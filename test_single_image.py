#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù
–¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

from watermark_remover import watermark_remover
import cv2
import numpy as np
import requests
import os

def test_single_image():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    
    print("üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    print("=" * 70)
    
    # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    url = "https://images.cdn-cian.ru/images/2504097329-1.jpg"
    
    print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
    print("-" * 50)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        image_data = response.content
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        nparr = np.frombuffer(image_data, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        height, width = image.shape[:2]
        print(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width} x {height}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è...")
        watermark_region = watermark_remover.detect_cian_watermark_region(image)
        
        if watermark_region:
            x1, y1, x2, y2 = watermark_region
            region_width = x2 - x1
            region_height = y2 - y1
            
            print(f"\n‚úÖ –û–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:")
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x1}, {y1}) - ({x2}, {y2})")
            print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {region_width} x {region_height} –ø–∏–∫—Å–µ–ª–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            right_edge = width * 0.9  # 90% –æ—Ç —à–∏—Ä–∏–Ω—ã
            bottom_edge = height * 0.9  # 90% –æ—Ç –≤—ã—Å–æ—Ç—ã
            
            if x1 > right_edge and y1 > bottom_edge:
                print("‚úÖ –û–±–ª–∞—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É")
            else:
                print("‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–µ –≤ —Ç–æ–º –º–µ—Å—Ç–µ")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            vis_image = image.copy()
            cv2.rectangle(vis_image, (x1, y1), (x2, y2), (0, 255, 0), 3)
            cv2.putText(vis_image, f"Watermark: ({x1},{y1})-({x2},{y2})", 
                       (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            vis_filename = "corrected_watermark_detection.jpg"
            cv2.imwrite(vis_filename, vis_image)
            print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {vis_filename}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É—é —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞...")
            
            # –ú–µ—Ç–æ–¥ blur
            result_blur = watermark_remover.remove_watermark_blur(image, watermark_region)
            if result_blur is not None:
                print("‚úÖ Blur –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_filename = "corrected_result_blur.jpg"
                cv2.imwrite(output_filename, result_blur)
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç blur —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_filename}")
            
            # –ú–µ—Ç–æ–¥ inpainting
            result_inpainting = watermark_remover.remove_watermark_inpainting(image, watermark_region)
            if result_inpainting is not None:
                print("‚úÖ Inpainting –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_filename = "corrected_result_inpainting.jpg"
                cv2.imwrite(output_filename, result_inpainting)
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç inpainting —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_filename}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    test_single_image()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
