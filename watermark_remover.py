#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
"""

import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import requests
import io
import base64
from typing import Optional, Dict, Any, Tuple
import re

class WatermarkRemover:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù
        self.watermark_color_ranges = [
            # –ë–µ–ª—ã–π —Ü–≤–µ—Ç (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            ((245, 245, 245), (255, 255, 255)),
            # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            ((220, 220, 220), (245, 245, 245)),
            # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π
            ((200, 200, 200), (220, 220, 220))
        ]
        
        # –†–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –¥–ª—è –¶–ò–ê–ù)
        self.search_region_width = 0.35  # 35% —à–∏—Ä–∏–Ω—ã (–≤–º–µ—Å—Ç–æ 50%)
        self.search_region_height = 0.25  # 25% –≤—ã—Å–æ—Ç—ã (–≤–º–µ—Å—Ç–æ 50%)
    
    def detect_cian_watermark_region(self, image: np.ndarray) -> Optional[Tuple[int, int, int, int]]:
        """
        –¢–æ—á–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¶–ò–ê–ù
        
        Args:
            image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ numpy array (BGR)
            
        Returns:
            Tuple (x1, y1, x2, y2) —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∏–ª–∏ None
        """
        try:
            height, width = image.shape[:2]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            
            # –û—á–µ–Ω—å —Ç–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏ –¶–ò–ê–ù
            # –ò—â–µ–º –≤ —Å–∞–º–æ–º –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            search_width = int(width * 0.12)   # 12% —à–∏—Ä–∏–Ω—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –ø—Ä–∞–≤—ã–π –∫—Ä–∞–π
            search_height = int(height * 0.08)  # 8% –≤—ã—Å–æ—Ç—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π –∫—Ä–∞–π
            
            x_start = width - search_width
            y_start = height - search_height
            
            print(f"üîç –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: ({x_start}, {y_start}) - ({width}, {height})")
            print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞: {search_width} x {search_height} –ø–∏–∫—Å–µ–ª–µ–π")
            
            # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞
            search_region = rgb_image[y_start:height, x_start:width]
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
            search_mask = np.zeros((search_height, search_width), dtype=np.uint8)
            
            # –ò—â–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–≤–µ—Ç–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏ –¶–ò–ê–ù
            # –í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —á–∏—Å—Ç–æ –±–µ–ª—ã–º–∏
            color_ranges = [
                # –ü–æ—á—Ç–∏ –±–µ–ª—ã–π
                (np.array([240, 240, 240]), np.array([255, 255, 255])),
                # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
                (np.array([200, 200, 200]), np.array([240, 240, 240])),
                # –û—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–π —Å–µ—Ä—ã–π
                (np.array([180, 180, 180]), np.array([200, 200, 200]))
            ]
            
            for lower, upper in color_ranges:
                color_mask = cv2.inRange(search_region, lower, upper)
                search_mask = cv2.bitwise_or(search_mask, color_mask)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–∞—Å–∫–∏
            kernel = np.ones((2, 2), np.uint8)
            search_mask = cv2.morphologyEx(search_mask, cv2.MORPH_CLOSE, kernel)
            search_mask = cv2.morphologyEx(search_mask, cv2.MORPH_OPEN, kernel)
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≤ –º–∞—Å–∫–µ
            contours, _ = cv2.findContours(search_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            
            if contours:
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: {len(contours)}")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Ñ–æ—Ä–º–µ
                valid_contours = []
                for i, c in enumerate(contours):
                    area = cv2.contourArea(c)
                    x, y, w, h = cv2.boundingRect(c)
                    aspect_ratio = w / h if h > 0 else 0
                    
                    print(f"   –ö–æ–Ω—Ç—É—Ä {i+1}: –ø–ª–æ—â–∞–¥—å={area:.0f}, —Ä–∞–∑–º–µ—Ä={w}x{h}, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ={aspect_ratio:.2f}")
                    
                    # –ò—â–µ–º –∫–æ–Ω—Ç—É—Ä—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞
                    min_area = 30  # –ú–∏–Ω–∏–º—É–º 30 –ø–∏–∫—Å–µ–ª–µ–π (—É–º–µ–Ω—å—à–∏–ª)
                    max_area = search_width * search_height * 0.5  # –ú–∞–∫—Å–∏–º—É–º 50% –æ—Ç –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ (—É–≤–µ–ª–∏—á–∏–ª)
                    
                    if min_area < area < max_area:
                        # –¢–µ–∫—Å—Ç –æ–±—ã—á–Ω–æ —à–∏—Ä–µ, —á–µ–º –≤—ã—Å–æ—Ç–∞, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–π
                        if 0.5 < aspect_ratio < 5.0:  # –†–∞—Å—à–∏—Ä–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω
                            valid_contours.append(c)
                            print(f"     ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π –∫–æ–Ω—Ç—É—Ä")
                        else:
                            print(f"     ‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω")
                    else:
                        print(f"     ‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–ª–æ—â–∞–¥—å")
                
                if valid_contours:
                    # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç—É—Ä —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—â–∞–¥—å—é —Å—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–Ω—ã—Ö
                    best_contour = max(valid_contours, key=cv2.contourArea)
                    
                    # –ü–æ–ª—É—á–∞–µ–º bounding box
                    x, y, w, h = cv2.boundingRect(best_contour)
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    x1 = x_start + x
                    y1 = y_start + y
                    x2 = x1 + w
                    y2 = y1 + h
                    
                    # –†–∞—Å—à–∏—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ 25% –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                    expand_x = int(w * 0.25)
                    expand_y = int(h * 0.25)
                    
                    x1 = max(0, x1 - expand_x)
                    y1 = max(0, y1 - expand_y)
                    x2 = min(width, x2 + expand_x)
                    y2 = min(height, y2 + expand_y)
                    
                    print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: ({x1}, {y1}) - ({x2}, {y2})")
                    print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {x2-x1} x {y2-y1} –ø–∏–∫—Å–µ–ª–µ–π")
                    print(f"   –ú–µ—Ç–æ–¥: –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—É—Ä–æ–≤")
                    
                    return (x1, y1, x2, y2)
                else:
                    print("‚ö†Ô∏è –í–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–Ω—Ç—É—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω—Ç—É—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ–Ω—å —Ç–æ—á–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é —Ç–æ—á–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥")
            return self._precise_heuristic_detection(image)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {e}")
            return None
    
    def _precise_heuristic_detection(self, image: np.ndarray) -> Tuple[int, int, int, int]:
        """
        –û—á–µ–Ω—å —Ç–æ—á–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¶–ò–ê–ù
        """
        height, width = image.shape[:2]
        
        # –û—á–µ–Ω—å —Ç–æ—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –Ω–∞–¥–ø–∏—Å–∏ –¶–ò–ê–ù
        watermark_width = int(width * 0.10)   # 10% —à–∏—Ä–∏–Ω—ã - —Ç–æ–ª—å–∫–æ –Ω–∞–¥–ø–∏—Å—å
        watermark_height = int(height * 0.06)  # 6% –≤—ã—Å–æ—Ç—ã - —Ç–æ–ª—å–∫–æ –Ω–∞–¥–ø–∏—Å—å
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        x1 = width - watermark_width
        y1 = height - watermark_height
        x2 = width
        y2 = height
        
        print(f"üîç –¢–æ—á–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥: ({x1}, {y1}) - ({x2}, {y2})")
        print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {watermark_width} x {watermark_height} –ø–∏–∫—Å–µ–ª–µ–π")
        print(f"   –ü–æ–∑–∏—Ü–∏—è: –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª")
        
        return (x1, y1, x2, y2)
    
    def detect_watermark_region(self, image: np.ndarray) -> Optional[Tuple[int, int, int, int]]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        return self.detect_cian_watermark_region(image)
    
    def remove_watermark_inpainting(self, image: np.ndarray, watermark_region: Tuple[int, int, int, int]) -> np.ndarray:
        """
        –£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ inpainting
        """
        try:
            x1, y1, x2, y2 = watermark_region
            height, width = image.shape[:2]
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            mask = np.zeros((height, width), dtype=np.uint8)
            mask[y1:y2, x1:x2] = 255
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º inpainting
            result = cv2.inpaint(image, mask, 3, cv2.INPAINT_TELEA)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ inpainting: {e}")
            return image
    
    def remove_watermark_blur(self, image: np.ndarray, watermark_region: Tuple[int, int, int, int]) -> np.ndarray:
        """
        –£–¥–∞–ª—è–µ—Ç –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–º—ã—Ç–∏—è –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        """
        try:
            x1, y1, x2, y2 = watermark_region
            height, width = image.shape[:2]
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = image.copy()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–º—ã—Ç–∏–µ –∫ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            blurred_region = cv2.GaussianBlur(result[y1:y2, x1:x2], (15, 15), 0)
            result[y1:y2, x1:x2] = blurred_region
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            pil_image = Image.fromarray(cv2.cvtColor(result, cv2.COLOR_BGR2RGB))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            draw = ImageDraw.Draw(pil_image)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            font_size = min((x2-x1) // 8, (y2-y1) // 3)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
            font_paths = [
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
                "/System/Library/Fonts/Arial.ttf",
                "/System/Library/Fonts/Helvetica.ttc",
                "C:/Windows/Fonts/arial.ttf"
            ]
            
            font = None
            for font_path in font_paths:
                try:
                    font = ImageFont.truetype(font_path, font_size)
                    break
                except:
                    continue
            
            if font is None:
                font = ImageFont.load_default()
                font_size = min((x2-x1) // 12, (y2-y1) // 5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
            bbox = draw.textbbox((0, 0), "–ú–ò–≠–õ–¨", font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±–ª–∞—Å—Ç–∏
            text_x = x1 + (x2 - x1 - text_width) // 2
            text_y = y1 + (y2 - y1 - text_height) // 2
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            text_layer = Image.new('RGBA', pil_image.size, (0, 0, 0, 0))
            text_draw = ImageDraw.Draw(text_layer)
            
            # –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            transparent_white = (255, 255, 255, 179)
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±–≤–æ–¥–∫–æ–π
            stroke_width = max(1, int(font_size * 0.02))
            
            for dx in range(-stroke_width, stroke_width + 1):
                for dy in range(-stroke_width, stroke_width + 1):
                    if dx == 0 and dy == 0:
                        continue
                    text_draw.text((text_x + dx, text_y + dy), "–ú–ò–≠–õ–¨", font=font, fill=transparent_white)
            
            # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
            text_draw.text((text_x, text_y), "–ú–ò–≠–õ–¨", font=font, fill=transparent_white)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–∏
            pil_image = pil_image.convert('RGBA')
            pil_image = Image.alpha_composite(pil_image, text_layer)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB
            pil_image = pil_image.convert('RGB')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ numpy array
            result = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGB2BGR)
            
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ blur: {e}")
            return image
    
    def process_image_from_url(self, photo_url: str, method: str = 'auto') -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL, —É–¥–∞–ª—è—è –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = self.session.get(photo_url, timeout=10)
            response.raise_for_status()
            image_data = response.content
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            nparr = np.frombuffer(image_data, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if image is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {photo_url}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            watermark_region = self.detect_cian_watermark_region(image)
            
            if watermark_region is None:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è: {photo_url}")
                return None
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            if method == 'inpainting':
                processed_image = self.remove_watermark_inpainting(image, watermark_region)
            elif method == 'blur':
                processed_image = self.remove_watermark_blur(image, watermark_region)
            else:  # auto
                # –ü—Ä–æ–±—É–µ–º inpainting, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - blur
                try:
                    processed_image = self.remove_watermark_inpainting(image, watermark_region)
                except:
                    processed_image = self.remove_watermark_blur(image, watermark_region)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base64
            success, buffer = cv2.imencode('.jpg', processed_image, [cv2.IMWRITE_JPEG_QUALITY, 95])
            
            if not success:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {photo_url}")
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            base64_data = base64.b64encode(buffer).decode('utf-8')
            
            return {
                'base64': base64_data,
                'format': 'jpeg',
                'size': (processed_image.shape[1], processed_image.shape[0]),
                'watermark_removed': True,
                'method': method
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_url}: {e}")
            return None
    
    def batch_process_images(self, photo_urls: list, method: str = 'auto') -> list:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–∞–∫–µ—Ç–Ω–æ
        """
        processed_images = []
        
        for i, url in enumerate(photo_urls):
            print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{len(photo_urls)}: {url}")
            
            result = self.process_image_from_url(url, method)
            if result:
                processed_images.append({
                    'url': url,
                    **result
                })
                print(f"‚úÖ –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª–µ–Ω: {url}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {url}")
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(processed_images)}/{len(photo_urls)}")
        return processed_images

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
watermark_remover = WatermarkRemover()
