# text_handlers.py
from aiogram.types import Message, BufferedInputFile
from listings_processor import listings_processor, export_listings_to_excel, extract_urls
from db_handler import find_similar_ads_grouped
import io
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font

async def handle_text_message(message: Message):
    text = message.text.strip()
    is_selection_request = "–ø–æ–¥–±–æ—Ä" in text.lower()
    use_embedded = "–ø–æ–¥–±–æ—Ä" in text.lower() and "–ø–æ–¥–±–æ—Ä-" not in text.lower()  # "–ø–æ–¥–±–æ—Ä" = –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ, "–ø–æ–¥–±–æ—Ä-" = –æ–±—ã—á–Ω—ã–µ
    urls, url_count = extract_urls(text)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ URL –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
    metro_info = "–º–µ—Ç—Ä–æ"
    if urls:
        try:
            from listings_processor import listings_processor
            listing_info = listings_processor.extract_listing_info(urls[0])
            if listing_info.get('metro') and listing_info['metro'] != 'N/A':
                metro_info = listing_info['metro']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–æ: {e}")
            metro_info = "–º–µ—Ç—Ä–æ"

    if url_count == 0:
        await message.answer("üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è CIAN –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                             "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Excel-–æ—Ç—á–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏.\n"
                             "üñºÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–¥–±–æ—Ä' + —Å—Å—ã–ª–∫–∏.\n"
                             "üîó –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: '–ø–æ–¥–±–æ—Ä-' + —Å—Å—ã–ª–∫–∏.")
        return

    await message.answer(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ —Å—Å—ã–ª–æ–∫: {url_count}")



    try:
        if is_selection_request:
            subtitle = None
            max_photos_per_listing = None  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            
            if "–ø–æ–¥–±–æ—Ä" in text.lower():
                podbor_pos = text.lower().find("–ø–æ–¥–±–æ—Ä")
                
                # –ò—â–µ–º —Ü–∏—Ñ—Ä—É –ø–µ—Ä–µ–¥ —Å–ª–æ–≤–æ–º "–ø–æ–¥–±–æ—Ä"
                text_before_podbor = text[:podbor_pos].strip()
                import re
                photo_limit_match = re.search(r'(\d+)\s*$', text_before_podbor)
                if photo_limit_match:
                    max_photos_per_listing = int(photo_limit_match.group(1))
                    print(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ: {max_photos_per_listing} –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
                
                text_after_podbor = text[podbor_pos + 6:].strip()
                first_url_pos = -1
                for url in urls:
                    pos = text_after_podbor.find(url)
                    if pos != -1:
                        first_url_pos = pos
                        break
                if first_url_pos != -1:
                    subtitle = text_after_podbor[:first_url_pos].strip()
                else:
                    subtitle = text_after_podbor
                if subtitle:
                    subtitle = subtitle.replace("–ø–æ–¥–±–æ—Ä", "").replace("–ø–æ–¥–±–æ—Ä-", "").strip()

            if use_embedded:
                html_content, photo_stats = await listings_processor.generate_html_gallery_embedded(urls, message.from_user.id, subtitle, remove_watermarks=True, max_photos_per_listing=max_photos_per_listing)
                filename = f"–ü–æ–¥–±–æ—Ä_{metro_info}.html"
                caption = f"üè† –ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if max_photos_per_listing:
                    await message.answer(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –º–∞–∫—Å–∏–º—É–º {max_photos_per_listing} —Ñ–æ—Ç–æ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
                
                for stat in photo_stats:
                    if stat['photo_count'] > 0:
                        await message.answer(f"üì∏ {stat['photo_count']} —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {stat['listing_number']}")
                    else:
                        if 'error' in stat:
                            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {stat['listing_number']}: {stat['error']}")
                        else:
                            await message.answer(f"‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {stat['listing_number']}")
            else:
                html_content = listings_processor.generate_html_gallery(urls, message.from_user.id, subtitle)
                filename = f"–ü–æ–¥–±–æ—Ä_{metro_info}.html"
                caption = f"üè† –ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–æ–±—ã—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏)"

            html_file = io.BytesIO(html_content.encode('utf-8'))
            html_file.name = filename
            input_file = BufferedInputFile(html_file.getvalue(), filename=filename)
            await message.answer_document(input_file, caption=caption)

        else:
            excel_file, request_id = await export_listings_to_excel(urls, message.from_user.id)
            input_file = BufferedInputFile(excel_file.getvalue(), filename=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_{metro_info}.xlsx")
            await message.answer_document(input_file, caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π Excel —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
            try:
                similar_ads = await find_similar_ads_grouped(request_id)
                if similar_ads:
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                    similar_excel = io.BytesIO()
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    import pandas as pd
                    import json
                    similar_data = []
                    for group in similar_ads:
                        address = group['address']
                        ads = group['ads']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ads - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å—Ç—Ä–æ–∫–∞
                        if isinstance(ads, list):
                            ads_list = ads
                        elif isinstance(ads, str):
                            try:
                                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å—Ç—Ä–æ–∫—É
                                ads_list = json.loads(ads)
                                if not isinstance(ads_list, list):
                                    print(f"‚ö†Ô∏è ads –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {type(ads_list)}")
                                    continue
                            except json.JSONDecodeError as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                                continue
                        else:
                            print(f"‚ö†Ô∏è ads –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π: {type(ads)}")
                            continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        for ad in ads_list:
                            if isinstance(ad, dict):
                                ad_copy = ad.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
                                ad_copy['–ê–¥—Ä–µ—Å'] = address
                                similar_data.append(ad_copy)
                    
                    if similar_data:
                        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∞–¥—Ä–µ—Å–∞–º
                        wb = Workbook()
                        ws = wb.active
                        ws.title = "–ü–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
                        
                        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        headers = ['URL', '–¶–µ–Ω–∞', '–ö–æ–º–Ω–∞—Ç', '–°–æ–∑–¥–∞–Ω–æ', '–û–±–Ω–æ–≤–ª–µ–Ω–æ', '–ê–∫—Ç–∏–≤–Ω–æ', '–¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞']
                        header_row = 1
                        
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–¥—Ä–µ—Å–∞–º
                        current_row = 1
                        for group in similar_ads:
                            address = group['address']
                            ads = group['ads']
                            
                            # –ü–∞—Ä—Å–∏–º ads –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                            if isinstance(ads, str):
                                try:
                                    ads_list = json.loads(ads)
                                except json.JSONDecodeError:
                                    continue
                            else:
                                ads_list = ads
                            
                            if not isinstance(ads_list, list):
                                continue
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º)
                            ws.cell(row=current_row, column=1, value=address)
                            ws.cell(row=current_row, column=1).font = Font(bold=True)
                            current_row += 1
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                            for col, header in enumerate(headers, 1):
                                ws.cell(row=current_row, column=col, value=header)
                                ws.cell(row=current_row, column=col).font = Font(bold=True)
                            current_row += 1
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                            for ad in ads_list:
                                if isinstance(ad, dict):
                                    ws.cell(row=current_row, column=1, value=ad.get('url', ''))
                                    ws.cell(row=current_row, column=2, value=ad.get('price', ''))
                                    ws.cell(row=current_row, column=3, value=ad.get('rooms', ''))
                                    ws.cell(row=current_row, column=4, value=ad.get('created', ''))
                                    ws.cell(row=current_row, column=5, value=ad.get('updated', ''))
                                    ws.cell(row=current_row, column=6, value=ad.get('is_active', ''))
                                    ws.cell(row=current_row, column=7, value=ad.get('person_type', ''))
                                    current_row += 1
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                            current_row += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
                        similar_excel = io.BytesIO()
                        wb.save(similar_excel)
                        similar_excel.seek(0)
                        
                        similar_filename = f"–ø–æ—Ö–æ–∂–∏–µ_–æ–±—ä—è–≤–ª–µ–Ω–∏—è_{metro_info}.xlsx"
                        similar_input_file = BufferedInputFile(similar_excel.getvalue(), filename=similar_filename)
                        await message.answer_document(similar_input_file, caption=f"üîç –ü–æ—Ö–æ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω Excel —Å {len(similar_data)} –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏")
                    else:
                        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Å –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏: {e}")
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_text_message: {e}")
