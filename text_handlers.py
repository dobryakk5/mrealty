import re
import logging
from aiogram.types import Message
# from handlers_common import process_user_input, show_parser_result
# from parse_expense import parse_expense_t
# from db_handler import 
from listings_processor import export_listings_to_excel, extract_urls
from aiogram.types.input_file import BufferedInputFile

logger = logging.getLogger(__name__)

async def handle_text_message(message: Message):
    text = message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª
    if text == "üìò –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        return await message.answer(
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¶–ò–ê–ù –≤–∏–¥–∞\n"
            "https://www.cian.ru/sale/flat/320223651\n"
            "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é excel —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ extract_urls
    urls, count = extract_urls(text)
    if count:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —á–∏—Å–ª–µ —Å—Å—ã–ª–æ–∫
        await message.answer(f"–ü—Ä–∏–Ω—è—Ç–æ —Å—Å—ã–ª–æ–∫: {count}")
        await _handle_listings_export(urls, message)
    else:
        await message.answer("üîç –°—Å—ã–ª–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π.")


async def _handle_listings_export(urls: list, message: Message):
    if not urls:
        return await message.answer("‚ùóÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤.")
    try:
        bio = await export_listings_to_excel(urls)
        bio.seek(0)
        tg_file = BufferedInputFile(bio.getvalue(), filename="—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_–∫–≤–∞—Ä—Ç–∏—Ä.xlsx")
        await message.answer_document(tg_file)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {e}")
