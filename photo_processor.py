#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π CIAN
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
"""

import requests
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from typing import List, Dict, Any, Optional
import io
import base64

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
        'AppleWebKit/537.36 (KHTML, like Gecko) '
        'Chrome/115.0.0.0 Safari/537.36'
    ),
    'Accept-Language': 'ru-RU,ru;q=0.9',
}

class PhotoProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π CIAN"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def download_and_convert_to_base64(self, photo_url: str, timeout: int = 10) -> Optional[Dict[str, str]]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64
        """
        try:
            response = self.session.get(photo_url, timeout=timeout)
            response.raise_for_status()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            image_data = response.content
            base64_data = base64.b64encode(image_data).decode('utf-8')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = Image.open(io.BytesIO(image_data))
            format_type = image.format.lower()
            

            
            return {
                'base64': base64_data,
                'format': format_type,
                'size': image.size
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {photo_url}: {e}")
            return None

    def process_photos_for_embedded_html(self, photo_urls: List[str], remove_watermarks: bool = False) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ HTML
        """
        processed_photos = []
        seen_urls = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö URL
        
        for i, url in enumerate(photo_urls):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç URL
                if url in seen_urls:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç URL: {url}")
                    continue
                
                seen_urls.add(url)
                
                if remove_watermarks:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ 6: –ú–ò–≠–õ–¨ –ø–æ–≤–µ—Ä—Ö –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                    result = self.method6_miel_overlay(url)
                    if result:
                        processed_photos.append({
                            'url': url,
                            'base64': result['base64'],
                            'format': result['format'],
                            'size': result['size'],
                            'processed': True
                        })
                else:
                    # –û–±—ã—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
                    result = self.download_and_convert_to_base64(url)
                    if result:
                        processed_photos.append({
                            'url': url,
                            'base64': result['base64'],
                            'format': result['format'],
                            'size': result['size'],
                            'processed': False
                        })
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ {i+1}: {e}")
                continue
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ base64
        unique_processed_photos = []
        seen_base64 = set()
        
        for photo in processed_photos:
            if photo and 'base64' in photo:
                base64_data = photo['base64']
                if base64_data not in seen_base64:
                    seen_base64.add(base64_data)
                    unique_processed_photos.append(photo)
                else:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç base64 –¥–ª—è URL: {photo.get('url', 'unknown')}")
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(unique_processed_photos)} –∏–∑ {len(processed_photos)}")
        return unique_processed_photos

    def method6_miel_overlay(self, photo_url: str) -> Optional[Dict[str, Any]]:
        """
        –ú–µ—Ç–æ–¥ 6: –ó–∞–º–µ–Ω–∞ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ CIAN –Ω–∞ "–ú–ò–≠–õ–¨" —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç—å—é –Ω–∞ 50%
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            response = self.session.get(photo_url, timeout=10)
            response.raise_for_status()
            image_data = response.content
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            nparr = np.frombuffer(image_data, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if image is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {photo_url}")
                return None
            
            height, width = image.shape[:2]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ (–ø—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å)
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞ 50%
            watermark_width = int(width * 0.25 * 1.5)  # 25% —à–∏—Ä–∏–Ω—ã + 50%
            watermark_height = int(height * 0.15 * 1.5)  # 15% –≤—ã—Å–æ—Ç—ã + 50%
            
            x1 = width - watermark_width
            y1 = height - watermark_height
            x2 = width
            y2 = height
            
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            mask = np.zeros((height, width), dtype=np.uint8)
            mask[y1:y2, x1:x2] = 255
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –∫ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            blurred_region = cv2.GaussianBlur(image[y1:y2, x1:x2], (15, 15), 0)
            image[y1:y2, x1:x2] = blurred_region
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            pil_image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            draw = ImageDraw.Draw(pil_image)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
            font_size = min((x2-x1) // 8, (y2-y1) // 3)  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ 50%, –∑–∞—Ç–µ–º –µ—â–µ –≤ 2 —Ä–∞–∑–∞, –∑–∞—Ç–µ–º –µ—â–µ –Ω–∞ 20% (–∏—Ç–æ–≥–æ –≤ 3.6 —Ä–∞–∑–∞)
            font_size = int(font_size * 1.5 * 2 * 1.2)
            
            # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            font_paths = [
                # Linux —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                "/usr/share/fonts/truetype/liberation/LiberationSans-Regular.ttf",
                "/usr/share/fonts/truetype/ubuntu/Ubuntu-R.ttf",
                # macOS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                "/System/Library/Fonts/Arial.ttf",
                "/System/Library/Fonts/Helvetica.ttc",
                # Windows —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ Windows)
                "C:/Windows/Fonts/arial.ttf",
                "C:/Windows/Fonts/calibri.ttf"
            ]
            
            font = None
            for font_path in font_paths:
                try:
                    font = ImageFont.truetype(font_path, font_size)
                    break
                except:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
            if font is None:
                font = ImageFont.load_default()
                print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫—Ä–∞—Å–∏–≤—ã–º)")
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                font_size = min((x2-x1) // 12, (y2-y1) // 5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
            bbox = draw.textbbox((0, 0), "–ú–ò–≠–õ–¨", font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ –≤—ã—Å–æ—Ç—É –æ–¥–Ω–æ–π –±—É–∫–≤—ã –ú –∏ —Å–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ –Ω–∞ 2 –±—É–∫–≤—ã –ú
            # –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π –±—É–∫–≤—ã –ú –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–∞ text_height
            # –®–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–π –±—É–∫–≤—ã –ú –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–∞ text_width / 5 (—Ç–∞–∫ –∫–∞–∫ –≤ —Å–ª–æ–≤–µ "–ú–ò–≠–õ–¨" 5 –±—É–∫–≤)
            single_letter_height = text_height
            single_letter_width = text_width / 5
            
            # –°–¥–≤–∏–≥–∞–µ–º –≤–ª–µ–≤–æ –Ω–∞ 2 –±—É–∫–≤—ã –ú
            left_shift = int(single_letter_width * 2)
            # –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞ –≤—ã—Å–æ—Ç—É –æ–¥–Ω–æ–π –±—É–∫–≤—ã –ú
            up_shift = int(single_letter_height)
            # –û–ø—É—Å–∫–∞–µ–º –Ω–∞ 6% –Ω–∏–∂–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ (–±—ã–ª–æ 3%, —É–≤–µ–ª–∏—á–∏–ª–∏ –Ω–∞ 3%)
            down_shift = int(height * 0.06)
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Å–¥–≤–∏–≥–æ–≤ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞, –∞ –Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            text_x = x1 + (x2 - x1 - text_width) // 2 - left_shift
            text_y = y1 + (y2 - y1 - text_height) // 2 - up_shift + down_shift
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ RGBA —Å–ª–æ–∏
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            text_layer = Image.new('RGBA', pil_image.size, (0, 0, 0, 0))
            text_draw = ImageDraw.Draw(text_layer)
            
            # –ë–µ–ª—ã–π —Ü–≤–µ—Ç —Å –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–æ–º –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            transparent_white = (255, 255, 255, 179)  # 179/255 = 70% –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –∏ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π –ª–∏–Ω–∏–π –Ω–∞ 15%
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–ª—â–∏–Ω—ã —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
            stroke_width = max(1, int(font_size * 0.02))  # –ë–∞–∑–æ–≤–∞—è —Ç–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
            stroke_width = int(stroke_width * 1.15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 15%
            
            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–º —Å–ª–æ–µ
            for dx in range(-stroke_width, stroke_width + 1):
                for dy in range(-stroke_width, stroke_width + 1):
                    if dx == 0 and dy == 0:
                        continue  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Ä–∏—Å—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                    # –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É —Å —Ç–æ–π –∂–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
                    text_draw.text((text_x + dx, text_y + dy), "–ú–ò–≠–õ–¨", font=font, fill=transparent_white)
            
            # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö
            text_draw.text((text_x, text_y), "–ú–ò–≠–õ–¨", font=font, fill=transparent_white)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
            pil_image = pil_image.convert('RGBA')
            pil_image = Image.alpha_composite(pil_image, text_layer)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ RGB –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JPG
            pil_image = pil_image.convert('RGB')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ base64
            img_buffer = io.BytesIO()
            pil_image.save(img_buffer, format='JPEG', quality=95)  # JPG –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
            img_buffer.seek(0)
            
            base64_data = base64.b64encode(img_buffer.getvalue()).decode('utf-8')
            
            return {
                'base64': base64_data,
                'format': 'jpeg',  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ JPG
                'size': pil_image.size
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–æ–¥–∞ 6 (–ú–ò–≠–õ–¨): {e}")
            return None

    def generate_photo_grid_html(self, processed_photos: List[Dict[str, Any]], grid_type: str = 'url') -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        if not processed_photos:
            return "<p>‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>"
        
        html_parts = ['<div class="photo-grid">']
        
        for i, photo in enumerate(processed_photos):
            if photo.get('processed') and photo.get('base64'):
                # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
                img_src = f"data:image/{photo['format']};base64,{photo['base64']}"
                alt_text = f"–§–æ—Ç–æ {i+1}"
            elif photo.get('base64'):
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ç–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
                img_src = f"data:image/{photo['format']};base64,{photo['base64']}"
                alt_text = f"–§–æ—Ç–æ {i+1}"
            else:
                # Fallback –Ω–∞ URL
                img_src = photo['url']
                alt_text = f"–§–æ—Ç–æ {i+1}"
            
            html_parts.append(f'''
                <div class="photo-item">
                    <img src="{img_src}" alt="{alt_text}" loading="lazy">
                </div>
            ''')
        
        html_parts.append('</div>')
        return ''.join(html_parts)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
photo_processor = PhotoProcessor()
