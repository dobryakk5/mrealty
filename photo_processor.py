#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π CIAN
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
"""

import base64
import requests
from typing import List, Dict, Any, Optional

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
        'AppleWebKit/537.36 (KHTML, like Gecko) '
        'Chrome/115.0.0.0 Safari/537.36'
    ),
    'Accept-Language': 'ru-RU,ru;q=0.9',
}

class PhotoProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π CIAN"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(HEADERS)
    
    def download_and_convert_to_base64(self, photo_url: str, timeout: int = 10) -> Optional[Dict[str, str]]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64
        
        Args:
            photo_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å MIME-—Ç–∏–ø–æ–º –∏ base64 –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            response = self.session.get(photo_url, timeout=timeout)
            if response.status_code == 200:
                img_base64 = base64.b64encode(response.content).decode('utf-8')
                img_mime = response.headers.get('content-type', 'image/jpeg')
                
                return {
                    'mime_type': img_mime,
                    'base64_data': img_base64,
                    'size': len(response.content)
                }
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_url}: HTTP {response.status_code}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {photo_url}: {e}")
            return None
    
    def process_photos_for_embedded_html(self, photo_urls: List[str]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ HTML (base64)
        –í—Å—Ç–∞–≤–ª—è–µ—Ç –í–°–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        
        Args:
            photo_urls: –°–ø–∏—Å–æ–∫ URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å base64 –¥–∞–Ω–Ω—ã–º–∏
        """
        processed_photos = []
        
        for i, url in enumerate(photo_urls):
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            base64_data = self.download_and_convert_to_base64(url)
            
            if base64_data:
                processed_photos.append({
                    'url': url,
                    'index': i + 1,
                    'type': 'base64',
                    'mime_type': base64_data['mime_type'],
                    'base64_data': base64_data['base64_data'],
                    'size': base64_data['size']
                })
            else:
                # Fallback –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                processed_photos.append({
                    'url': url,
                    'index': i + 1,
                    'type': 'fallback'
                })
        
        return processed_photos
    
    def generate_photo_grid_html(self, processed_photos: List[Dict[str, Any]], grid_type: str = 'url') -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            processed_photos: –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            grid_type: –¢–∏–ø —Å–µ—Ç–∫–∏ ('url' –∏–ª–∏ 'embedded')
            
        Returns:
            HTML —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–µ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        """
        if not processed_photos:
            return '<p class="no-photos">üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
        
        html_parts = [f'<div class="photo-grid">']
        
        for photo in processed_photos:
            if grid_type == 'embedded' and photo['type'] == 'base64':
                # –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
                html_parts.append(f"""
                <div class="photo-item">
                    <img src="data:{photo['mime_type']};base64,{photo['base64_data']}" alt="–§–æ—Ç–æ {photo['index']}">
                </div>
                """)
            elif grid_type == 'embedded' and photo['type'] == 'fallback':
                # Fallback –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                html_parts.append(f"""
                <div class="photo-item">
                    <div class="photo-fallback">
                        <div>üì∑ –§–æ—Ç–æ {photo['index']}</div>
                        <div class="photo-link">
                            <a href="{photo['url']}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ</a>
                        </div>
                    </div>
                </div>
                """)
            else:
                # –û–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
                html_parts.append(f"""
                <div class="photo-item">
                    <img src="{photo['url']}" alt="–§–æ—Ç–æ {photo['index']}" 
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                         loading="lazy">
                    <div class="photo-fallback" style="display: none;">
                        <div>üì∑ –§–æ—Ç–æ {photo['index']}</div>
                        <div class="photo-link">
                            <a href="{photo['url']}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ</a>
                        </div>
                    </div>
                </div>
                """)
        
        html_parts.append('</div>')
        return ''.join(html_parts)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
photo_processor = PhotoProcessor()
