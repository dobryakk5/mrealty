import re
import json
import pandas as pd
import requests
from bs4 import BeautifulSoup
from openpyxl import Workbook,load_workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter
from io import BytesIO
from typing import List, Dict, Any, Tuple
import asyncio
from datetime import datetime
from selenium.webdriver.common.by import By

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
from db_handler import save_listings, find_similar_ads_grouped, call_update_ad

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
from photo_processor import PhotoProcessor

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Avito
try:
    from avito_parser_integration import AvitoCardParser
    AVITO_AVAILABLE = True
except ImportError:
    AVITO_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å avito_parser_integration –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–Ω–≥ Avito –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
        'AppleWebKit/537.36 (KHTML, like Gecko) '
        'Chrome/115.0.0.0 Safari/537.36'
    ),
    'Accept-Language': 'ru-RU,ru;q=0.9',
}

class ListingsProcessor:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.photo_processor = PhotoProcessor()
    
    def is_avito_url(self, url: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Avito"""
        return 'avito.ru' in url.lower()
    
    def is_cian_url(self, url: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Cian"""
        return 'cian.ru' in url.lower()
    
    def get_url_source(self, url: str) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏: 1 - Avito, 4 - Cian"""
        if self.is_avito_url(url):
            return 1  # Avito
        elif self.is_cian_url(url):
            return 4  # Cian
        else:
            return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    
    async def parse_avito_listing(self, url: str) -> dict:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å Avito –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ë–î"""
        if not AVITO_AVAILABLE:
            print("‚ùå –ü–∞—Ä—Å–µ—Ä Avito –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            print(f"üîÑ –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito: {url}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä Avito
            parser = AvitoCardParser()
            
            # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            parsed_data = parser.parse_avito_page(url)
            if not parsed_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
            db_data = parser.prepare_data_for_db(parsed_data)
            if not db_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î")
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            db_data['source'] = 1  # Avito
            
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Avito —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
            return db_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito: {e}")
            return None
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if 'parser' in locals() and parser.driver:
                try:
                    parser.cleanup()
                except:
                    pass
    
    async def parse_listing_universal(self, url: str) -> dict:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian –∏ Avito"""
        try:
            if self.is_avito_url(url):
                print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito: {url}")
                return await self.parse_avito_listing(url)
            elif self.is_cian_url(url):
                print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian: {url}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è Cian
                session = requests.Session()
                return parse_listing(url, session)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏: {url}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    
    def extract_photo_urls(self, soup: BeautifulSoup) -> list[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ CIAN"""
        photo_urls = []
        
        try:
            # –ò—â–µ–º –≥–∞–ª–µ—Ä–µ—é –ø–æ data-name="GalleryInnerComponent"
            gallery = soup.find('div', {'data-name': 'GalleryInnerComponent'})
            if not gallery:
                return photo_urls
            
            # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = gallery.find_all('img', src=True)
            for img in images:
                src = img.get('src')
                if src and src.startswith('http') and 'cdn-cian.ru' in src:
                    photo_urls.append(src)
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ background-image (–¥–ª—è –≤–∏–¥–µ–æ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ñ–æ—Ç–æ)
            elements_with_bg = gallery.find_all(style=re.compile(r'background-image'))
            for elem in elements_with_bg:
                style = elem.get('style', '')
                bg_match = re.search(r'background-image:\s*url\(["\']?([^"\')\s]+)["\']?\)', style)
                if bg_match:
                    bg_url = bg_match.group(1)
                    if bg_url.startswith('http') and ('cdn-cian.ru' in bg_url or 'kinescopecdn.net' in bg_url):
                        photo_urls.append(bg_url)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            unique_photos = []
            for url in photo_urls:
                if url not in seen:
                    seen.add(url)
                    unique_photos.append(url)
            
            return unique_photos
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            return []
    
    def extract_avito_photo_urls(self, soup: BeautifulSoup) -> list[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å Avito"""
        photo_urls = []
        
        try:
            # –ò—â–µ–º –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ Avito
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
            images = soup.find_all('img', src=True)
            for img in images:
                src = img.get('src')
                if src and src.startswith('http') and ('avito.ru' in src or 'img.avito.ru' in src):
                    photo_urls.append(src)
            
            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ background-image
            elements_with_bg = soup.find_all(style=re.compile(r'background-image'))
            for elem in elements_with_bg:
                style = elem.get('style', '')
                bg_match = re.search(r'background-image:\s*url\(["\']?([^"\')\s]+)["\']?\)', style)
                if bg_match:
                    bg_url = bg_match.group(1)
                    if bg_url.startswith('http') and ('avito.ru' in bg_url or 'img.avito.ru' in bg_url):
                        photo_urls.append(bg_url)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            unique_photos = []
            for url in photo_urls:
                if url not in seen:
                    seen.add(url)
                    unique_photos.append(url)
            
            return unique_photos
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Avito: {e}")
            return []
    
    async def extract_photo_urls_from_url(self, listing_url: str) -> list[str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏
            if self.is_avito_url(listing_url):
                print(f"üì∏ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å Avito: {listing_url}")
                # –î–ª—è Avito –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                response = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.get(listing_url, headers=HEADERS))
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                return self.extract_avito_photo_urls(soup)
            else:
                print(f"üì∏ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å Cian: {listing_url}")
                # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                response = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.get(listing_url, headers=HEADERS))
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                return self.extract_photo_urls(soup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL {listing_url}: {e}")
            return []
    
    async def extract_listing_info(self, url: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏
            if self.is_avito_url(url):
                print(f"üè† –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ Avito: {url}")
                # –î–ª—è Avito –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                listing_data = await self.parse_avito_listing(url)
                if not listing_data:
                    return {
                        'rooms': 'N/A',
                        'price': 'N/A',
                        'floor': 'N/A',
                        'total_area': 'N/A',
                        'kitchen_area': 'N/A',
                        'metro': 'N/A'
                    }
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Avito –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                info = {
                    'rooms': listing_data.get('rooms', 'N/A'),
                    'price': listing_data.get('price', 'N/A'),
                    'floor': listing_data.get('floor', 'N/A'),
                    'total_area': listing_data.get('total_area', 'N/A'),
                    'kitchen_area': listing_data.get('kitchen_area', 'N/A'),
                    'metro': listing_data.get('metro_time', 'N/A'),
                    'photo_urls': listing_data.get('photo_urls', [])  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                }
                return info
            else:
                # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                print(f"üè† –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ Cian: {url}")
                response = requests.get(url, headers=HEADERS)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                listing_data = parse_listing(url, requests.Session())
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                info = {
                    'rooms': listing_data.get('–ö–æ–º–Ω–∞—Ç', 'N/A'),
                    'price': listing_data.get('–¶–µ–Ω–∞_raw', 'N/A'),
                    'floor': listing_data.get('–≠—Ç–∞–∂', 'N/A'),
                    'total_area': listing_data.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', 'N/A'),
                    'kitchen_area': listing_data.get('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏', 'N/A'),
                    'metro': listing_data.get('–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ', 'N/A')
                }
                return info
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ {url}: {str(e)}")
            return {
                'rooms': 'N/A',
                'price': 'N/A',
                'floor': 'N/A',
                'total_area': 'N/A',
                'kitchen_area': 'N/A',
                'metro': 'N/A'
            }
    
    async def generate_html_gallery(self, listing_urls: list[str], user_id: int, subtitle: str = None, listing_comments: list[str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –≥–∞–ª–µ—Ä–µ—é —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        html_parts = []
        
        html_parts.append("""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .listing { 
                    background: white; 
                    margin: 20px 0; 
                    padding: 20px; 
                    border-radius: 10px; 
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                    display: flex;
                    gap: 30px;
                    align-items: flex-start;
                }
                
                .listing-info {
                    flex: 1;
                    min-width: 0;
                }
                
                .listing-photos {
                    flex: 1;
                    min-width: 0;
                }
                .listing h3 { color: #333; margin-top: 0; margin-bottom: 15px; }
                .listing p { margin: 8px 0; color: #555; }
                .listing strong { color: #333; }
                .main-title { color: #333; margin-bottom: 10px; }
                .subtitle { color: #666; font-size: 18px; margin-bottom: 30px; font-style: italic; }
                .photo-grid { 
                    display: grid; 
                    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); 
                    gap: 8px; 
                    margin: 15px 0; 
                    max-height: 600px; 
                    overflow-y: auto; 
                    padding: 10px;
                    border: 1px solid #eee;
                    border-radius: 8px;
                }
                .photo-item { position: relative; }
                .photo-item img { 
                    width: 100%; 
                    height: 140px; 
                    object-fit: cover; 
                    border-radius: 5px; 
                    border: 2px solid transparent;
                    transition: border-color 0.2s;
                }
                .photo-item img:hover { 
                    border-color: #0066cc;
                    transition: border-color 0.2s ease;
                }
                
                /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
                .modal {
                    display: none;
                    position: fixed;
                    z-index: 1000;
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0,0,0,0.9);
                    overflow: auto;
                }
                
                .modal-content {
                    margin: auto;
                    display: block;
                    width: 90%;
                    max-width: 800px;
                    max-height: 90%;
                    position: relative;
                    top: 50%;
                    transform: translateY(-50%);
                }
                
                .modal-image {
                    width: 100%;
                    height: auto;
                    max-height: 90vh;
                    object-fit: contain;
                }
                
                .modal-caption {
                    margin: auto;
                    display: block;
                    width: 80%;
                    max-width: 700px;
                    text-align: center;
                    color: white;
                    padding: 20px 0;
                    font-size: 18px;
                }
                
                .close {
                    position: absolute;
                    top: 15px;
                    right: 35px;
                    color: #f1f1f1;
                    font-size: 40px;
                    font-weight: bold;
                    cursor: pointer;
                }
                
                .close:hover,
                .close:focus {
                    color: #bbb;
                    text-decoration: none;
                    cursor: pointer;
                }
                
                /* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º */
                .modal-nav {
                    position: absolute;
                    top: 50%;
                    transform: translateY(-50%);
                    background: rgba(0,0,0,0.5);
                    color: white;
                    border: none;
                    padding: 15px 12px;
                    cursor: pointer;
                    font-size: 24px;
                    border-radius: 50%;
                    width: 50px;
                    height: 50px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    transition: background-color 0.3s;
                }
                
                .modal-nav:hover {
                    background: rgba(0,0,0,0.8);
                }
                
                .modal-nav.prev {
                    left: 20px;
                }
                
                .modal-nav.next {
                    right: 20px;
                }
                
                .modal-nav:disabled {
                    opacity: 0.3;
                    cursor: not-allowed;
                }
                
                /* –°—á–µ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π */
                .modal-counter {
                    position: absolute;
                    bottom: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    color: white;
                    background: rgba(0,0,0,0.7);
                    padding: 8px 16px;
                    border-radius: 20px;
                    font-size: 14px;
                }
                
                .no-photos { color: #666; font-style: italic; }
                
                /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
                @media (max-width: 768px) {
                    body { margin: 10px; }
                    .listing { 
                        padding: 15px; 
                        margin: 15px 0; 
                        flex-direction: column;
                        gap: 20px;
                        width: 100%;
                        box-sizing: border-box;
                    }
                    .listing-info, .listing-photos {
                        width: 100%;
                        min-width: 100%;
                    }
                    .photo-grid { 
                        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); 
                        gap: 6px; 
                        padding: 8px;
                    }
                    .photo-item img { 
                        height: 120px; 
                    }
                    .main-title { font-size: 24px; }
                    .subtitle { font-size: 16px; }
                    
                    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
                    .modal-nav {
                        width: 40px;
                        height: 40px;
                        font-size: 20px;
                        padding: 10px 8px;
                    }
                    
                    .modal-nav.prev {
                        left: 10px;
                    }
                    
                    .modal-nav.next {
                        right: 10px;
                    }
                    
                    .modal-counter {
                        bottom: 10px;
                        font-size: 12px;
                        padding: 6px 12px;
                    }
                }
            </style>
        </head>
        <body>
            <h1 class="main-title">üè† –ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π -->
            <div id="photoModal" class="modal">
                <span class="close" onclick="closeModal()">&times;</span>
                <button class="modal-nav prev" id="prevBtn" onclick="showPrevPhoto()" title="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ (‚Üê)">‚Äπ</button>
                <button class="modal-nav next" id="nextBtn" onclick="showNextPhoto()" title="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ (‚Üí)">‚Ä∫</button>
                <img class="modal-content modal-image" id="modalImage">
                <div class="modal-caption" id="modalCaption"></div>
                <div class="modal-counter" id="modalCounter"></div>
            </div>
            
            <script>
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                
                // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
                let currentPhotos = [];
                let currentPhotoIndex = 0;
                let currentListingIndex = 0;
                
                // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function openModal(imageSrc, caption, photos, photoIndex, listingIndex) {
                    currentPhotos = photos || [];
                    currentPhotoIndex = photoIndex || 0;
                    currentListingIndex = listingIndex || 0;
                    
                    document.getElementById('photoModal').style.display = 'block';
                    document.getElementById('modalImage').src = imageSrc;
                    document.getElementById('modalCaption').innerHTML = caption;
                    
                    updateModalNavigation();
                }
                
                // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function closeModal() {
                    document.getElementById('photoModal').style.display = 'none';
                    currentPhotos = [];
                    currentPhotoIndex = 0;
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–æ—Ç–æ
                function showPrevPhoto() {
                    if (currentPhotos.length > 1) {
                        currentPhotoIndex = (currentPhotoIndex - 1 + currentPhotos.length) % currentPhotos.length;
                        const photo = currentPhotos[currentPhotoIndex];
                        document.getElementById('modalImage').src = photo.src;
                        document.getElementById('modalCaption').innerHTML = photo.caption;
                        updateModalNavigation();
                    }
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ
                function showNextPhoto() {
                    if (currentPhotos.length > 1) {
                        currentPhotoIndex = (currentPhotoIndex + 1) % currentPhotos.length;
                        const photo = currentPhotos[currentPhotoIndex];
                        document.getElementById('modalImage').src = photo.src;
                        document.getElementById('modalCaption').innerHTML = photo.caption;
                        updateModalNavigation();
                    }
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∞
                function updateModalNavigation() {
                    const prevBtn = document.getElementById('prevBtn');
                    const nextBtn = document.getElementById('nextBtn');
                    const counter = document.getElementById('modalCounter');
                    
                    if (currentPhotos.length <= 1) {
                        prevBtn.style.display = 'none';
                        nextBtn.style.display = 'none';
                        counter.style.display = 'none';
                    } else {
                        prevBtn.style.display = 'flex';
                        nextBtn.style.display = 'flex';
                        counter.style.display = 'block';
                        
                        prevBtn.disabled = false;
                        nextBtn.disabled = false;
                        
                        counter.innerHTML = `${{currentPhotoIndex + 1}} –∏–∑ ${{currentPhotos.length}}`;
                    }
                }
                
                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                window.onclick = function(event) {
                    const modal = document.getElementById('photoModal');
                    if (event.target == modal) {
                        closeModal();
                    }
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                document.addEventListener('keydown', function(event) {
                    if (event.key === 'Escape') {
                        closeModal();
                    } else if (event.key === 'ArrowLeft') {
                        showPrevPhoto();
                    } else if (event.key === 'ArrowRight') {
                        showNextPhoto();
                    }
                });
            </script>
        """)
        
        if subtitle:
            html_parts.append(f'<h2 class="subtitle">{subtitle}</h2>')
        
        html_parts.append("")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        db_listings = []
        
        for i, listing_url in enumerate(listing_urls, 1):
            try:
                # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if self.is_avito_url(listing_url):
                    # –î–ª—è Avito –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    listing_data = await self.parse_avito_listing(listing_url)
                    
                    if not listing_data:
                        html_parts.append(f"""
                        <div class="listing">
                            <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                            <p style="color: red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Avito</p>
                        </div>
                        """)
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
                    db_listings.append(listing_data)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Avito –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    listing_data_display = {
                        '–ö–æ–º–Ω–∞—Ç': listing_data.get('rooms', 'N/A'),
                        '–¶–µ–Ω–∞_raw': listing_data.get('price', 'N/A'),
                        'floor': listing_data.get('floor', 'N/A'),
                        'total_floors': listing_data.get('total_floors', 'N/A'),
                        '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å': listing_data.get('total_area', 'N/A'),
                        '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏': listing_data.get('kitchen_area', 'N/A'),
                        '–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ': listing_data.get('metro_time', 'N/A')
                    }
                    
                    # –î–ª—è Avito —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –∏–∑–≤–ª–µ–∫–∞–µ–º (—Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏)
                    photo_urls = []
                else:
                    # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                    listing_data = parse_listing(listing_url, requests.Session())
                    listing_data_display = listing_data
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    soup = BeautifulSoup(requests.get(listing_url, headers=HEADERS).text, 'html.parser')
                    photo_urls = self.extract_photo_urls(soup)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Cian –¥–ª—è –ë–î
                    cian_data = {
                        'url': listing_url,
                        'source': 4,  # Cian
                        'rooms': listing_data.get('–ö–æ–º–Ω–∞—Ç', 'N/A'),
                        'price': listing_data.get('–¶–µ–Ω–∞_raw', 'N/A'),
                        'floor': listing_data.get('–≠—Ç–∞–∂', 'N/A'),
                        'total_floors': listing_data.get('total_floors', 'N/A'),
                        'total_area': listing_data.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', 'N/A'),
                        'kitchen_area': listing_data.get('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏', 'N/A'),
                        'metro_time': listing_data.get('–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ', 'N/A'),
                        'photo_urls': photo_urls if photo_urls else []
                    }
                    db_listings.append(cian_data)
                
                html_parts.append(f"""
                <div class="listing">
                    <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                """)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
                if listing_comments and i <= len(listing_comments) and listing_comments[i-1]:
                    html_parts.append(f'<p class="listing-comment">{listing_comments[i-1]}</p>')
                
                html_parts.append("")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                html_parts.append(f"<p><strong>–ö–æ–º–Ω–∞—Ç:</strong> {listing_data_display.get('–ö–æ–º–Ω–∞—Ç', 'N/A')}</p>")
                html_parts.append(f"<p><strong>–¶–µ–Ω–∞:</strong> {listing_data_display.get('–¶–µ–Ω–∞_raw', 'N/A')}</p>")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç—Ç–∞–∂ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è Avito –∏ Cian
                # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ '–≠—Ç–∞–∂', –¥–ª—è Avito - 'floor'
                floor_value = listing_data_display.get('floor', listing_data_display.get('–≠—Ç–∞–∂', 'N/A'))
                total_floors = listing_data_display.get('total_floors')
                if total_floors and total_floors != 'N/A':
                    html_parts.append(f"<p><strong>–≠—Ç–∞–∂:</strong> {floor_value}/{total_floors}</p>")
                else:
                    html_parts.append(f"<p><strong>–≠—Ç–∞–∂:</strong> {floor_value}</p>")
                
                html_parts.append(f"<p><strong>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</strong> {listing_data_display.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', 'N/A')} –º¬≤</p>")
                html_parts.append(f"<p><strong>–ö—É—Ö–Ω—è:</strong> {listing_data_display.get('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏', 'N/A')} –º¬≤</p>")

                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal_photos = []
                if photo_urls:
                    for idx, photo_url in enumerate(photo_urls):
                        modal_photos.append({
                            'src': photo_url,
                            'caption': f"–§–æ—Ç–æ {idx + 1}"
                        })
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Cian)
                if photo_urls:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–≤—Å–µ —Ñ–æ—Ç–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
                    html_parts.append(f'<div class="photo-grid">')
                    for j, photo_url in enumerate(photo_urls):
                        html_parts.append(f"""
                        <div class="photo-item">
                            <img src="{photo_url}" alt="–§–æ—Ç–æ {j+1}" 
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
                                 loading="lazy"
                                 onclick="openModal('{photo_url}', '–§–æ—Ç–æ {j+1}', {json.dumps(modal_photos)}, {j}, {i})"
                                 style="cursor: pointer;">
                            <div class="photo-fallback" style="display: none; background: #f0f0f0; border: 1px dashed #ccc; border-radius: 5px; padding: 20px; text-align: center; color: #666;">
                                <div>üì∑ –§–æ—Ç–æ {j+1}</div>
                                <div style="font-size: 12px; margin-top: 5px;">
                                    <a href="{photo_url}" target="_blank" style="color: #0066cc;">–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ</a>
                                </div>
                            </div>
                        </div>
                        """)
                    html_parts.append('</div>')
                else:
                    if self.is_avito_url(listing_url):
                        html_parts.append('<p class="no-photos">üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Avito (—Ç—Ä–µ–±—É—é—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)</p>')
                    else:
                        html_parts.append('<p class="no-photos">üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>')
                
                html_parts.append('</div>')
                
            except Exception as e:
                html_parts.append(f"""
                <div class="listing">
                    <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                    <p style="color: red;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}</p>
                </div>
                """)
        
        html_parts.append("""
        </body>
        </html>
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä HTML
        html_content = ''.join(html_parts)
        html_size_mb = len(html_content.encode('utf-8')) / 1024 / 1024
        print(f"üìä –†–∞–∑–º–µ—Ä HTML: {html_size_mb:.1f}MB")
        
        if html_size_mb > 10:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: HTML —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({html_size_mb:.1f}MB)!")
            print(f"‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö.")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            if html_size_mb > 15:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                print(f"üö® HTML —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–æ–π ({html_size_mb:.1f}MB), —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                simplified_html = f"""
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                        .listing {{ background: white; margin: 20px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                    </style>
                </head>
                <body>
                    <h1 class="main-title">–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
                    <div class="warning">
                        <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º ({html_size_mb:.1f}MB), 
                        –ø–æ—ç—Ç–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. 
                        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–Ω—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.
                    </div>
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
                for i, listing_url in enumerate(listing_urls, 1):
                    simplified_html += f"""
                    <div class="listing">
                        <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                        <p><strong>–°—Å—ã–ª–∫–∞:</strong> <a href="{listing_url}" target="_blank">{listing_url}</a></p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)</p>
                    </div>
                    """
                
                simplified_html += """
                </body>
                </html>
                """
                
                simplified_size_mb = len(simplified_html.encode('utf-8')) / 1024 / 1024
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–∑–º–µ—Ä–æ–º {simplified_size_mb:.1f}MB")
                
                return simplified_html
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î
        if db_listings:
            try:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(db_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î...")
                await save_listings(db_listings, user_id)
                print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        else:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
        
        return html_content
    
    async def generate_html_gallery_embedded(self, listing_urls: list[str], user_id: int, subtitle: str = None, remove_watermarks: bool = False, max_photos_per_listing: int = None, listing_comments: list[str] = None, pre_parsed_data: dict = None) -> tuple[str, list[dict]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –≥–∞–ª–µ—Ä–µ—é —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ç–æ"""
        html_content = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</title>
            <style>
                body {{ 
                    font-family: Arial, sans-serif; 
                    margin: 20px; 
                    background-color: #f5f5f5; 
                }}
                .listing {{ 
                    background: white; 
                    margin: 20px 0; 
                    padding: 20px; 
                    border-radius: 10px; 
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                
                .listing-header {{
                    margin-bottom: 20px;
                }}
                
                .listing-info {{
                    flex: 1;
                    min-width: 0;
                }}
                

                
                .listing-photos {{
                    width: 100%;
                }}
                .listing h3 {{ 
                    color: #333; 
                    margin-top: 0; 
                    margin-bottom: 15px; 
                }}
                .listing p {{ 
                    margin: 8px 0; 
                    color: #555; 
                }}
                .listing strong {{ 
                    color: #333; 
                }}
                
                /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º */
                .listing-comment {{
                    background: #f8f9fa;
                    padding: 12px;
                    margin: 10px 0;
                    border-left: 4px solid #0066cc;
                    border-radius: 5px;
                    font-style: italic;
                    color: #555;
                    font-size: 14px;
                    line-height: 1.4;
                }}
                .main-title {{ 
                    color: #333; 
                    margin-bottom: 10px; 
                }}
                .subtitle {{ 
                    color: #666; 
                    font-size: 18px; 
                    margin-bottom: 30px; 
                    font-style: italic; 
                }}
                .photo-grid {{ 
                    display: grid; 
                    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr)); 
                    gap: 8px; 
                    margin: 15px 0; 
                    max-height: 600px; 
                    overflow-y: auto; 
                    padding: 10px;
                    border: 1px solid #eee;
                    border-radius: 8px;
                }}
                .photo-item {{ 
                    position: relative; 
                }}
                .photo-item img {{ 
                    width: 100%; 
                    height: 140px; 
                    object-fit: cover; 
                    border-radius: 5px; 
                    border: 2px solid transparent;
                    transition: border-color 0.2s;
                    background: #f8f9fa;
                }}
                

                
                .photo-item img:hover {{
                    border-color: #0066cc;
                    cursor: pointer;
                    transform: scale(1.02);
                    transition: transform 0.2s ease;
                }}
                
                /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
                .modal {{
                    display: none;
                    position: fixed;
                    z-index: 1000;
                    left: 0;
                    top: 0;
                    width: 100%;
                    height: 100%;
                    background-color: rgba(0,0,0,0.9);
                    overflow: auto;
                }}
                
                .modal-content {{
                    margin: auto;
                    display: block;
                    width: 90%;
                    max-width: 800px;
                    max-height: 90%;
                    position: relative;
                    top: 50%;
                    transform: translateY(-50%);
                }}
                
                .modal-image {{
                    width: 100%;
                    height: auto;
                    max-height: 90vh;
                    object-fit: contain;
                }}
                
                .modal-caption {{
                    margin: auto;
                    display: block;
                    width: 80%;
                    max-width: 700px;
                    text-align: center;
                    color: white;
                    padding: 20px 0;
                    font-size: 18px;
                }}
                
                .close {{
                    position: absolute;
                    top: 15px;
                    right: 35px;
                    color: #f1f1f1;
                    font-size: 40px;
                    font-weight: bold;
                    cursor: pointer;
                }}
                
                .close:hover,
                .close:focus {{
                    color: #bbb;
                    text-decoration: none;
                    cursor: pointer;
                }}
                
                .photo-fallback {{ 
                    width: 100%; 
                    height: 140px; 
                    display: flex; 
                    flex-direction: column; 
                    justify-content: center; 
                    align-items: center;
                }}
                .no-photos {{ 
                    color: #666; 
                    font-style: italic; 
                }}
                .photo-info {{ 
                    background: #f8f9fa; 
                    padding: 15px; 
                    border-radius: 8px; 
                    margin-top: 15px; 
                    font-size: 14px;
                    border-left: 4px solid #0066cc;
                }}
                .photo-info strong {{ 
                    color: #333; 
                }}
                .photo-info small {{ 
                    line-height: 1.4; 
                }}
                
                /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
                @media (max-width: 768px) {{
                    body {{ margin: 10px; }}
                    .listing {{ 
                        padding: 15px; 
                        margin: 15px 0; 
                        width: 100%;
                        box-sizing: border-box;
                    }}

                    .listing-info {{
                        width: 100%;
                        min-width: 100%;
                    }}
                    .listing-photos {{
                        width: 100%;
                    }}
                    .photo-grid {{ 
                        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); 
                        gap: 6px; 
                        padding: 8px;
                    }}
                    .photo-item img, .photo-fallback {{ 
                        height: 120px; 
                    }}
                    

                    
                    .main-title {{ font-size: 24px; }}
                    .subtitle {{ font-size: 16px; }}
                    
                    /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
                    .modal-nav {{
                        width: 40px;
                        height: 40px;
                        font-size: 20px;
                        padding: 10px 8px;
                    }}
                    
                    .modal-nav.prev {{
                        left: 10px;
                    }}
                    
                    .modal-nav.next {{
                        right: 10px;
                    }}
                    
                    .modal-counter {{
                        bottom: 10px;
                        font-size: 12px;
                        padding: 6px 12px;
                    }}
                }}
            </style>
        </head>
        <body>
            <h1 class="main-title">üè† –ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
            
            <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π -->
            <div id="photoModal" class="modal">
                <span class="close" onclick="closeModal()">&times;</span>
                <button class="modal-nav prev" id="prevBtn" onclick="showPrevPhoto()" title="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ (‚Üê)">‚Äπ</button>
                <button class="modal-nav next" id="nextBtn" onclick="showNextPhoto()" title="–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ (‚Üí)">‚Ä∫</button>
                <img class="modal-content modal-image" id="modalImage">
                <div class="modal-caption" id="modalCaption"></div>
                <div class="modal-counter" id="modalCounter"></div>
            </div>
            
            <script>
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
                console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', document.getElementById('photoModal'));
                console.log('–ö–Ω–æ–ø–∫–∞ prev:', document.getElementById('prevBtn'));
                console.log('–ö–Ω–æ–ø–∫–∞ next:', document.getElementById('nextBtn'));
                
                // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
                let currentPhotos = [];
                let currentPhotoIndex = 0;
                let currentListingIndex = 0;
                
                // –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function openModal(imageSrc, caption, photos, photoIndex, listingIndex) {{
                    console.log('openModal –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', imageSrc, caption, photos, photoIndex, listingIndex);
                    
                    currentPhotos = photos || [];
                    currentPhotoIndex = photoIndex || 0;
                    currentListingIndex = listingIndex || 0;
                    
                    console.log('–≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
                        modal: document.getElementById('photoModal'),
                        image: document.getElementById('modalImage'),
                        caption: document.getElementById('modalCaption')
                    });
                    
                    document.getElementById('photoModal').style.display = 'block';
                    document.getElementById('modalImage').src = imageSrc;
                    document.getElementById('modalCaption').innerHTML = caption;
                    
                    updateModalNavigation();
                    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç–æ');
                }}
                
                // –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                function closeModal() {{
                    document.getElementById('photoModal').style.display = 'none';
                    currentPhotos = [];
                    currentPhotoIndex = 0;
                }}
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–æ—Ç–æ
                function showPrevPhoto() {{
                    if (currentPhotos.length > 1) {{
                        currentPhotoIndex = (currentPhotoIndex - 1 + currentPhotos.length) % currentPhotos.length;
                        const photo = currentPhotos[currentPhotoIndex];
                        document.getElementById('modalImage').src = photo.src;
                        document.getElementById('modalCaption').innerHTML = photo.caption;
                        updateModalNavigation();
                    }}
                }}
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ç–æ
                function showNextPhoto() {{
                    if (currentPhotos.length > 1) {{
                        currentPhotoIndex = (currentPhotoIndex + 1) % currentPhotos.length;
                        const photo = currentPhotos[currentPhotoIndex];
                        document.getElementById('modalImage').src = photo.src;
                        document.getElementById('modalCaption').innerHTML = photo.caption;
                        updateModalNavigation();
                    }}
                }}
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å—á–µ—Ç—á–∏–∫–∞
                function updateModalNavigation() {{
                    const prevBtn = document.getElementById('prevBtn');
                    const nextBtn = document.getElementById('nextBtn');
                    const counter = document.getElementById('modalCounter');
                    
                    if (currentPhotos.length <= 1) {{
                        prevBtn.style.display = 'none';
                        nextBtn.style.display = 'none';
                        counter.style.display = 'none';
                    }} else {{
                        prevBtn.style.display = 'flex';
                        nextBtn.style.display = 'flex';
                        counter.style.display = 'block';
                        
                        prevBtn.disabled = false;
                        nextBtn.disabled = false;
                        
                        counter.innerHTML = `${{currentPhotoIndex + 1}} –∏–∑ ${{currentPhotos.length}}`;
                    }}
                }}
                
                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                window.onclick = function(event) {{
                    const modal = document.getElementById('photoModal');
                    if (event.target == modal) {{
                        closeModal();
                    }}
                }}
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                document.addEventListener('keydown', function(event) {{
                    if (event.key === 'Escape') {{
                        closeModal();
                    }} else if (event.key === 'ArrowLeft') {{
                        showPrevPhoto();
                    }} else if (event.key === 'ArrowRight') {{
                        showNextPhoto();
                    }}
                }});
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                document.addEventListener('DOMContentLoaded', function() {{
                    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã:');
                    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ:', document.getElementById('photoModal'));
                    console.log('–ö–Ω–æ–ø–∫–∞ prev:', document.getElementById('prevBtn'));
                    console.log('–ö–Ω–æ–ø–∫–∞ next:', document.getElementById('nextBtn'));
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', document.getElementById('modalImage'));
                    console.log('–ü–æ–¥–ø–∏—Å—å:', document.getElementById('modalCaption'));
                    console.log('–°—á–µ—Ç—á–∏–∫:', document.getElementById('modalCounter'));
                }});
            </script>
        """
        
        if subtitle:
            html_content += f'<h2 class="subtitle">{subtitle}</h2>'
        
        html_content += """
        """
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        photo_stats = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        db_listings = []
        
        for i, listing_url in enumerate(listing_urls, 1):
            try:
                print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i}: {listing_url}")
                
                # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if self.is_avito_url(listing_url):
                    # –î–ª—è Avito –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π URL –∏ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                    if i == 1 and pre_parsed_data:
                        listing_data = pre_parsed_data
                        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è URL #{i}")
                    else:
                        listing_data = await self.parse_avito_listing(listing_url)
                    
                    if not listing_data:
                        html_content += f"""
                        <div class="listing">
                            <div class="listing-header">
                                <div class="listing-info">
                                    <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                                    <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Avito</p>
                                </div>
                            </div>
                            <div class="listing-photos">
                                <p>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                            </div>
                        </div>
                        """
                        continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
                    db_listings.append(listing_data)
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Avito –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    listing_info = {
                        'rooms': listing_data.get('rooms', 'N/A'),
                        'price': listing_data.get('price', 'N/A'),
                        'floor': listing_data.get('floor', 'N/A'),
                        'total_floors': listing_data.get('total_floors', 'N/A'),
                        'total_area': listing_data.get('total_area', 'N/A'),
                        'kitchen_area': listing_data.get('kitchen_area', 'N/A'),
                        'metro': listing_data.get('metro_time', 'N/A')
                    }
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Avito
                    processed_photos = []
                    
                    if 'photo_urls' in listing_data and listing_data['photo_urls']:
                        photo_urls = listing_data['photo_urls']
                        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(photo_urls)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Avito")
                        
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ photo_processor
                        if photo_urls:
                            try:
                                processed_photos = self.photo_processor.process_photos_for_embedded_html(
                                    photo_urls, remove_watermarks, max_photos=8
                                )
                                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Avito —á–µ—Ä–µ–∑ photo_processor")
                            except Exception as e:
                                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Avito —á–µ—Ä–µ–∑ photo_processor: {e}")
                                processed_photos = []
                        
                        # –ï—Å–ª–∏ photo_processor –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
                        if not processed_photos and photo_urls:
                            print(f"üîÑ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è {len(photo_urls)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Avito")
                            for idx, url in enumerate(photo_urls):
                                processed_photos.append({
                                    'format': 'jpeg',
                                    'base64': None,
                                    'url': url,
                                    'is_external': True
                                })
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(processed_photos)} –ø—Ä–æ—Å—Ç—ã—Ö —Å—Å—ã–ª–æ–∫")
                    else:
                        print(f"‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Avito –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö")
                else:
                    # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                    listing_info = await self.extract_listing_info(listing_url)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    photo_urls = await self.extract_photo_urls_from_url(listing_url)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    if photo_urls:
                        processed_photos = self.photo_processor.process_photos_for_embedded_html(
                            photo_urls, remove_watermarks, max_photos=8
                        )
                    else:
                        processed_photos = []
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ Cian –¥–ª—è –ë–î
                    cian_data = {
                        'url': listing_url,
                        'source': 4,  # Cian
                        'rooms': listing_info.get('rooms', 'N/A'),
                        'price': listing_info.get('price', 'N/A'),
                        'floor': listing_info.get('floor', listing_info.get('–≠—Ç–∞–∂', 'N/A')),
                        'total_floors': listing_info.get('total_floors', 'N/A'),
                        'total_area': listing_info.get('total_area', 'N/A'),
                        'kitchen_area': listing_info.get('kitchen_area', 'N/A'),
                        'metro_time': listing_info.get('metro', 'N/A'),
                        'photo_urls': photo_urls if photo_urls else []
                    }
                    db_listings.append(cian_data)
                
                html_content += f"""
                <div class="listing">
                    <div class="listing-header">
                        <div class="listing-info">
                            <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
                if listing_comments and i <= len(listing_comments) and listing_comments[i-1]:
                    html_content += f'<p class="listing-comment">{listing_comments[i-1]}</p>'
                
                html_content += f"""
                            <p><strong>–ö–æ–º–Ω–∞—Ç:</strong> {listing_info.get('rooms', 'N/A')}</p>
                            <p><strong>–¶–µ–Ω–∞:</strong> {listing_info.get('price', 'N/A')}</p>
                            <p><strong>–≠—Ç–∞–∂:</strong> {listing_info.get('floor', 'N/A')}{'/' + str(listing_info.get('total_floors')) if listing_info.get('total_floors') and listing_info.get('total_floors') != 'N/A' else ''}</p>
                            <p><strong>–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å:</strong> {listing_info.get('total_area', 'N/A')} –º¬≤</p>
                            <p><strong>–ö—É—Ö–Ω—è:</strong> {listing_info.get('kitchen_area', 'N/A')} –º¬≤</p>
                        </div>
                    </div>
                    
                    <div class="listing-photos">
                """
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                modal_photos = []
                
                if processed_photos:
                    for idx, photo in enumerate(processed_photos):
                        if photo and 'base64' in photo:
                            # Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                            base64_size_mb = len(photo['base64']) / 1024 / 1024
                            if base64_size_mb > 2:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ {idx+1} –¥–ª—è modal_photos - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({base64_size_mb:.1f}MB)")
                                continue
                                
                            modal_photos.append({
                                'src': f"data:image/{photo['format']};base64,{photo['base64']}",
                                'caption': f"–§–æ—Ç–æ {idx + 1}" if idx > 0 else "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"
                            })
                        elif photo and 'url' in photo:
                            # –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
                            modal_photos.append({
                                'src': photo['url'],
                                'caption': f"–§–æ—Ç–æ {idx + 1}" if idx > 0 else "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ"
                            })
                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                if processed_photos and len(processed_photos) > 0:
                    html_content += '<div class="photo-grid">'
                    for j, photo_data in enumerate(processed_photos):
                        if photo_data and 'base64' in photo_data:
                            # Base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
                            base64_size_mb = len(photo_data['base64']) / 1024 / 1024
                            if base64_size_mb > 2:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ {j+1} - —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({base64_size_mb:.1f}MB)")
                                continue
                                
                            photo_caption = "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ" if j == 0 else f"–§–æ—Ç–æ {j + 1}"
                            html_content += f"""
                            <div class="photo-item">
                                <img src="data:image/{photo_data['format']};base64,{photo_data['base64']}" 
                                     alt="{photo_caption}" 
                                     loading="lazy"
                                     onclick="console.log('–ö–ª–∏–∫ –ø–æ —Ñ–æ—Ç–æ {j}'); openModal('data:image/{photo_data['format']};base64,{photo_data['base64']}', '{photo_caption}', {json.dumps(modal_photos)}, {j}, {i})"
                                     style="cursor: pointer;">
                            </div>
                            """
                        elif photo_data and 'url' in photo_data:
                            # –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞
                            photo_caption = "–ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ" if j == 0 else f"–§–æ—Ç–æ {j + 1}"
                            html_content += f"""
                            <div class="photo-item">
                                <img src="{photo_data['url']}" 
                                     alt="{photo_caption}" 
                                     loading="lazy"
                                     onclick="console.log('–ö–ª–∏–∫ –ø–æ —Ñ–æ—Ç–æ {j}'); openModal('{photo_data['url']}', '{photo_caption}', {json.dumps(modal_photos)}, {j}, {i})"
                                     style="cursor: pointer;">
                            </div>
                            """
                    
                    html_content += '</div>'
                else:
                    html_content += '<div class="photo-grid">'
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç
                if not processed_photos:
                    if self.is_avito_url(listing_url):
                        html_content += '<p>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Avito –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
                    else:
                        html_content += '<p>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>'
                else:
                    html_content += f'<p>üì∑ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(processed_photos)}</p>'
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ç–æ
                photo_stats.append({
                    'listing_number': i,
                    'photo_count': len(processed_photos) if processed_photos else 0,
                    'url': listing_url
                })
                
                html_content += f"""
                    </div>
                </div>
                """
            except Exception as e:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
                photo_stats.append({
                    'listing_number': i,
                    'photo_count': 0,
                    'url': listing_url,
                    'error': str(e)
                })
                
                html_content += f"""
                <div class="listing">
                    <div class="listing-header">
                        <div class="listing-info">
                            <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                            <p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}</p>
                        </div>
                    </div>
                    <div class="listing-photos">
                        <p>üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>
                    </div>
                </div>
                """
        
        html_content += """
        </body>
        </html>
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä HTML
        html_size_mb = len(html_content.encode('utf-8')) / 1024 / 1024
        print(f"üìä –†–∞–∑–º–µ—Ä HTML: {html_size_mb:.1f}MB")
        
        if html_size_mb > 10:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: HTML —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π ({html_size_mb:.1f}MB)!")
            print(f"‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö.")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            if html_size_mb > 15:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
                print(f"üö® HTML —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –±–æ–ª—å—à–æ–π ({html_size_mb:.1f}MB), —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é...")
                
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                simplified_html = f"""
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)</title>
                    <style>
                        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                        .listing {{ background: white; margin: 20px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                        .warning {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                    </style>
                </head>
                <body>
                    <h1 class="main-title">–ü–æ–¥–±–æ—Ä –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
                    <div class="warning">
                        <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –±—ã–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º ({html_size_mb:.1f}MB), 
                        –ø–æ—ç—Ç–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. 
                        –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–Ω—å—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑.
                    </div>
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
                for i, listing_url in enumerate(listing_urls, 1):
                    simplified_html += f"""
                    <div class="listing">
                        <h3>–í–∞—Ä–∏–∞–Ω—Ç #{i}</h3>
                        <p><strong>–°—Å—ã–ª–∫–∞:</strong> <a href="{listing_url}" target="_blank">{listing_url}</a></p>
                        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π)</p>
                    </div>
                    """
                
                simplified_html += """
                </body>
                </html>
                """
                
                simplified_size_mb = len(simplified_html.encode('utf-8')) / 1024 / 1024
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–∑–º–µ—Ä–æ–º {simplified_size_mb:.1f}MB")
                
                return simplified_html, []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ë–î
        if db_listings:
            try:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(db_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î...")
                await save_listings(db_listings, user_id)
                print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        else:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
        
        return html_content, photo_stats

    async def parse_listings_batch(self, listing_urls: list[str]) -> list[dict]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å Cian –∏ Avito"""
        parsed_listings = []
        
        for i, url in enumerate(listing_urls, 1):
            try:
                print(f"üîÑ –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i}/{len(listing_urls)}: {url}")
                
                if self.is_avito_url(url):
                    print(f"üè† –ò—Å—Ç–æ—á–Ω–∏–∫: Avito")
                    listing_data = await self.parse_avito_listing(url)
                    if listing_data:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        listing_data['source'] = 1  # Avito
                        parsed_listings.append(listing_data)
                        print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Avito —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito")
                elif self.is_cian_url(url):
                    print(f"üè† –ò—Å—Ç–æ—á–Ω–∏–∫: Cian")
                    # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                    session = requests.Session()
                    listing_data = parse_listing(url, session)
                    if listing_data:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
                        listing_data['source'] = 4  # Cian
                        parsed_listings.append(listing_data)
                        print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Cian —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏: {url}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
                continue
        
        print(f"üìä –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_listings)} –∏–∑ {len(listing_urls)}")
        return parsed_listings
    
    def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            # PhotoProcessor –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ cleanup, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        self.cleanup()

def extract_number(text: str):
    if not text or text == '‚Äî':
        return None
    cleaned = re.sub(r"[^\d.,]", "", text)
    cleaned = cleaned.replace('\u00A0', '').replace(' ', '').replace(',', '.')
    try:
        return float(cleaned) if '.' in cleaned else int(cleaned)
    except ValueError:
        return None

async def export_listings_to_excel(listing_urls: list[str], user_id: int, output_path: str = None) -> tuple[BytesIO, int]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Excel-—Ñ–∞–π–ª –∏ request_id.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ Cian, —Ç–∞–∫ –∏ Avito.
    :param listing_urls: —Å–ø–∏—Å–æ–∫ URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    :param output_path: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫
    :return: tuple (BytesIO —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞, request_id)
    """
    sess = requests.Session()
    rows = []
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å—Å—ã–ª–æ–∫
    processor = ListingsProcessor()
    
    for url in listing_urls:
        try:
            if processor.is_avito_url(url):
                print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito: {url}")
                # –î–ª—è Avito –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                avito_data = await processor.parse_avito_listing(url)
                if avito_data:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Avito –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
                    excel_data = {
                        'URL': url,
                        '–ö–æ–º–Ω–∞—Ç': avito_data.get('rooms', 'N/A'),
                        '–¶–µ–Ω–∞_raw': avito_data.get('price', 'N/A'),
                        '–≠—Ç–∞–∂': f"{avito_data.get('floor', 'N/A')}/{avito_data.get('total_floors')}" if avito_data.get('total_floors') and avito_data.get('total_floors') != 'N/A' else f"{avito_data.get('floor', 'N/A')}",
                        '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å': avito_data.get('total_area', 'N/A'),
                        '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å': avito_data.get('living_area', 'N/A'),
                        '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏': avito_data.get('kitchen_area', 'N/A'),
                        '–°–∞–Ω—É–∑–µ–ª': avito_data.get('bathroom', 'N/A'),
                        '–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è': avito_data.get('balcony', 'N/A'),
                        '–í–∏–¥ –∏–∑ –æ–∫–æ–Ω': avito_data.get('windows', 'N/A'),
                        '–†–µ–º–æ–Ω—Ç': avito_data.get('renovation', 'N/A'),
                        '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏': avito_data.get('construction_year', 'N/A'),
                        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è': 'N/A',  # –ü—É—Å—Ç–æ –≤ Avito
                        '–¢–∏–ø –¥–æ–º–∞': avito_data.get('house_type', 'N/A'),
                        '–¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π': 'N/A',  # –ü—É—Å—Ç–æ –≤ Avito
                        '–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ª–∏—Ñ—Ç–æ–≤': avito_data.get('passenger_elevator', 'N/A'),
                        '–ì—Ä—É–∑–æ–≤—ã—Ö –ª–∏—Ñ—Ç–æ–≤': avito_data.get('cargo_elevator', 'N/A'),
                        '–ü–∞—Ä–∫–æ–≤–∫–∞': avito_data.get('parking', 'N/A'),
                        '–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ': avito_data.get('gas_supply', 'N/A'),  # –ë–µ—Ä–µ–º –∏–∑ "–í –¥–æ–º–µ"
                        '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤': avito_data.get('ceiling_height', 'N/A'),
                        '–ú–µ–±–µ–ª—å': avito_data.get('furniture', 'N/A'),
                        '–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏': avito_data.get('sale_type', 'N/A'),
                        '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è': avito_data.get('today_views', 'N/A'),
                        '–ê–¥—Ä–µ—Å': avito_data.get('address', 'N/A'),
                        '–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ': avito_data.get('metro_time', 'N/A'),
                        '–ú–µ—Ç–∫–∏': avito_data.get('tags', 'N/A'),
                        '–°—Ç–∞—Ç—É—Å': '–ê–∫—Ç–∏–≤–Ω–æ',
                        '–¢–∏–ø –∂–∏–ª—å—è': '–ö–≤–∞—Ä—Ç–∏—Ä–∞',
                    }
                    rows.append(excel_data)
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito: {url}")
            else:
                print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian: {url}")
                # –î–ª—è Cian –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
                cian_data = parse_listing(url, sess)
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Cian –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
                if cian_data.get('total_floors') and cian_data['total_floors'] != 'N/A':
                    cian_data['–≠—Ç–∞–∂'] = f"{cian_data.get('–≠—Ç–∞–∂', 'N/A')}/{cian_data['total_floors']}"
                else:
                    cian_data['–≠—Ç–∞–∂'] = cian_data.get('–≠—Ç–∞–∂', 'N/A')
                
                rows.append(cian_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º request_id
    request_id = await save_listings(rows, user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
    df = pd.DataFrame(rows)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
    if '–¶–µ–Ω–∞_raw' in df.columns:
        df['–¶–µ–Ω–∞'] = df['–¶–µ–Ω–∞_raw']
        df = df.sort_values('–¶–µ–Ω–∞_raw')
        df.drop('–¶–µ–Ω–∞_raw', axis=1, inplace=True)

    # –ü–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
    ordered = [
        '–ö–æ–º–Ω–∞—Ç', '–¶–µ–Ω–∞', '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å',
        '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏', '–°–∞–Ω—É–∑–µ–ª', '–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è', '–í–∏–¥ –∏–∑ –æ–∫–æ–Ω',
        '–†–µ–º–æ–Ω—Ç', '–≠—Ç–∞–∂', '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è',
        '–¢–∏–ø –¥–æ–º–∞', '–¢–∏–ø –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π', '–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ª–∏—Ñ—Ç–æ–≤', '–ì—Ä—É–∑–æ–≤—ã—Ö –ª–∏—Ñ—Ç–æ–≤',
        '–ü–∞—Ä–∫–æ–≤–∫–∞', '–ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤', '–ú–µ–±–µ–ª—å',
        '–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏', '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è',
        '–ê–¥—Ä–µ—Å', '–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ', '–ú–µ—Ç–∫–∏', '–°—Ç–∞—Ç—É—Å', '–¢–∏–ø –∂–∏–ª—å—è', 'URL'
    ]
    df = df[[c for c in ordered if c in df.columns]]

    # –ó–∞–ø–∏—Å—å –≤ BytesIO
    bio = BytesIO()
    df.to_excel(bio, index=False)
    bio.seek(0)

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–æ–ª–±–µ—Ü '–¶–µ–Ω–∞'
    if output_path:
        with open(output_path, 'wb') as f:
            f.write(bio.getbuffer())

        wb = load_workbook(output_path)
        ws = wb.active
        # –í—ã–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for cell in ws[1]:
            cell.font = Font(bold=True)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É '–¶–µ–Ω–∞' –∏ –∑–∞–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç—ã—Å—è—á
        if '–¶–µ–Ω–∞' in df.columns:
            price_idx = df.columns.get_loc('–¶–µ–Ω–∞') + 1
            price_col = get_column_letter(price_idx)
            custom_format = '#,##0'
            for row in range(2, ws.max_row + 1):
                cell = ws[f"{price_col}{row}"]
                if isinstance(cell.value, (int, float)):
                    cell.number_format = custom_format

        wb.save(output_path)

    return bio, request_id

# –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è
def parse_listing(url: str, session: requests.Session) -> dict:
    resp = session.get(url, headers=HEADERS)
    resp.encoding = 'utf-8'
    soup = BeautifulSoup(resp.text, 'html.parser')

    data = {'URL': url}
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–∫–∞–ø—á–∞/–∞–Ω—Ç–∏–±–æ—Ç)
    page_text = soup.get_text(" ", strip=True).lower()
    is_blocked = bool(re.search(r"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã.*–Ω–µ —Ä–æ–±–æ—Ç|–ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ", page_text))
    if is_blocked:
        data['–°—Ç–∞—Ç—É—Å'] = None
    elif soup.find(string=re.compile(r"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ", re.IGNORECASE)):
        data['–°—Ç–∞—Ç—É—Å'] = '–°–Ω—è—Ç–æ'
    labels = [span.get_text(strip=True) for span in soup.select('div[data-name="LabelsLayoutNew"] > span span:last-of-type')]
    data['–ú–µ—Ç–∫–∏'] = '; '.join(labels) if labels else None
    h1 = soup.find('h1')
    if h1:
        m = re.search(r"(\d+)[^\d]*[-‚Äì]?–∫–æ–º–Ω", h1.get_text())
        if m:
            data['–ö–æ–º–Ω–∞—Ç'] = extract_number(m.group(1))
    price_el = (
        soup.select_one('[data-name="NewbuildingPriceInfo"] [data-testid="price-amount"] span')
        or soup.select_one('[data-name="AsideGroup"] [data-testid="price-amount"] span')
    )
    if price_el:
        data['–¶–µ–Ω–∞_raw'] = extract_number(price_el.get_text())
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∏ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–Ω—É ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
        if '–°—Ç–∞—Ç—É—Å' not in data or data['–°—Ç–∞—Ç—É—Å'] is None:
            data['–°—Ç–∞—Ç—É—Å'] = '–ê–∫—Ç–∏–≤–Ω–æ'

    summary = soup.select_one('[data-name="OfferSummaryInfoLayout"]')
    if summary:
        for item in summary.select('[data-name="OfferSummaryInfoItem"]'):
            ps = item.find_all('p')
            if len(ps) < 2:
                continue
            key = ps[0].get_text(strip=True)
            val = ps[1].get_text(strip=True)
            kl = key.lower().strip()
            if key == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è':
                data[key] = val
                continue
            if kl == '—ç—Ç–∞–∂': 
                # –ü–∞—Ä—Å–∏–º —ç—Ç–∞–∂: "5 –∏–∑ 5" -> floor=5, total_floors=5
                floor_match = re.search(r'(\d+)\s*–∏–∑\s*(\d+)', val)
                if floor_match:
                    data['–≠—Ç–∞–∂'] = int(floor_match.group(1))
                    data['total_floors'] = int(floor_match.group(2))
                else:
                    data['–≠—Ç–∞–∂'] = val
                    data['total_floors'] = None
                continue
            if kl in ['—Å–∞–Ω—É–∑–µ–ª', '–±–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤']:
                data[key] = val; continue
            data[key] = extract_number(val) if re.search(r"\d", val) else val

    cont = soup.find('div', {'data-name': 'ObjectFactoids'})
    if cont:
        lines = cont.get_text(separator='\n', strip=True).split('\n')
        for i in range(0, len(lines)-1, 2):
            key, val = lines[i].strip(), lines[i+1].strip()
            kl = key.lower().strip()
            if key == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è': data[key] = val; continue
            if kl == '—ç—Ç–∞–∂' and '–≠—Ç–∞–∂' not in data: 
                # –ü–∞—Ä—Å–∏–º —ç—Ç–∞–∂: "5 –∏–∑ 5" -> floor=5, total_floors=5
                floor_match = re.search(r'(\d+)\s*–∏–∑\s*(\d+)', val)
                if floor_match:
                    data['–≠—Ç–∞–∂'] = int(floor_match.group(1))
                    data['total_floors'] = int(floor_match.group(2))
                else:
                    data['–≠—Ç–∞–∂'] = val
                    data['total_floors'] = None
            elif kl in ['—Å–∞–Ω—É–∑–µ–ª', '–±–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤']: data[key] = val
            else: data[key] = extract_number(val) if re.search(r"\d", val) else val

    stats_re = re.compile(r"([\d\s]+)\s–ø—Ä–æ—Å–º–æ—Ç—Ä\S*,\s*(\d+)\s–∑–∞ —Å–µ–≥–æ–¥–Ω—è,\s*(\d+)\s—É–Ω–∏–∫–∞–ª—å", re.IGNORECASE)
    st = soup.find(string=stats_re)
    if st:
        m = stats_re.search(st)
        data['–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'], data['–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è'], data['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'] = (
            extract_number(m.group(1)), extract_number(m.group(2)), extract_number(m.group(3))
        )

    geo = soup.select_one('div[data-name="Geo"]')
    if geo:
        span = geo.find('span', itemprop='name')
        addr = span['content'] if span and span.get('content') else ', '.join(
            a.get_text(strip=True) for a in geo.select('a[data-name="AddressItem"]')
        )
        parts = [s.strip() for s in addr.split(',') if s.strip()]
        data['–ê–¥—Ä–µ—Å'] = ', '.join(parts[-2:]) if len(parts) > 1 else addr
        stations = []
        for li in geo.select('ul[data-name="UndergroundList"] li[data-name="UndergroundItem"]'):
            st_el = li.find('a', href=True)
            tm_el = li.find('span', class_=re.compile(r".*underground_time.*"))
            if st_el and tm_el:
                name = st_el.get_text(strip=True)
                m = re.search(r"(\d+)", tm_el.get_text(strip=True))
                stations.append((name, int(m.group(1)) if m else None))
        if stations:
            station, time_to = min(stations, key=lambda x: x[1] or float('inf'))
            data['–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ'] = f"{time_to} {station}"

    return data

def extract_urls(raw_input: str) -> tuple[list[str], int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫"""
    urls = re.findall(r'https?://[^\s,;]+', raw_input)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    processor = ListingsProcessor()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    avito_count = 0
    cian_count = 0
    unknown_count = 0
    
    for url in urls:
        if processor.is_avito_url(url):
            avito_count += 1
        elif processor.is_cian_url(url):
            cian_count += 1
        else:
            unknown_count += 1
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    if avito_count > 0 or cian_count > 0:
        print(f"üîç –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫:")
        if avito_count > 0:
            print(f"   üè† Avito: {avito_count}")
        if cian_count > 0:
            print(f"   üè† Cian: {cian_count}")
        if unknown_count > 0:
            print(f"   ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ: {unknown_count}")
    
    return urls, len(urls)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
listings_processor = ListingsProcessor()

if __name__ == '__main__':
    user_id = 12345
    urls = ["https://www.cian.ru/sale/flat/318826533/"]
    excel = asyncio.run(export_listings_to_excel(urls, user_id, output_path="listings_numeric.xlsx"))
    print("listings_numeric.xlsx —Å–æ–∑–¥–∞–Ω.")
