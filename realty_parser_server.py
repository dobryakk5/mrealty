"""
HTTP API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Fastify (Node.js)
"""

import re
import json
import asyncio
from typing import List, Dict, Any, Optional, Union
from dataclasses import dataclass, asdict
from datetime import datetime

import requests
from bs4 import BeautifulSoup
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import uvicorn
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import os
import threading
import signal
import atexit

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Avito
try:
    from avito_parser_integration import AvitoCardParser
    AVITO_AVAILABLE = True
except ImportError:
    AVITO_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å avito_parser_integration –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–Ω–≥ Avito –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Yandex
try:
    from yandex_parser_integration import YandexCardParser
    YANDEX_AVAILABLE = True
except ImportError:
    YANDEX_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å yandex_parser_integration –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–Ω–≥ Yandex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä Baza Winner
try:
    from baza_winner_parser import BazaWinnerParser
    BAZA_WINNER_AVAILABLE = True
except ImportError:
    BAZA_WINNER_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å baza_winner_parser –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–∞—Ä—Å–∏–Ω–≥ Baza Winner –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': (
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
        'AppleWebKit/537.36 (KHTML, like Gecko) '
        'Chrome/115.0.0.0 Safari/537.36'
    ),
    'Accept-Language': 'ru-RU,ru;q=0.9',
}

@dataclass
class PropertyData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    rooms: Optional[int] = None
    price: Optional[float] = None
    total_area: Optional[float] = None
    living_area: Optional[float] = None
    kitchen_area: Optional[float] = None
    floor: Optional[str] = None
    total_floors: Optional[int] = None
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    bathroom: Optional[str] = None
    balcony: Optional[str] = None
    renovation: Optional[str] = None
    construction_year: Optional[int] = None
    house_type: Optional[str] = None
    ceiling_height: Optional[float] = None
    furniture: Optional[str] = None
    
    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    address: Optional[str] = None
    metro_station: Optional[str] = None
    metro_time: Optional[Union[int, str]] = None  # Can be int (minutes) or str (formatted like "6 –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏")
    metro_way: Optional[str] = None  # –°–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Ç—Ä–æ (–ø–µ—à–∫–æ–º, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    tags: Optional[List[str]] = None
    description: Optional[str] = None
    photo_urls: Optional[List[str]] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    source: Optional[str] = None  # 'avito', 'cian', 'yandex'
    url: Optional[str] = None
    status: Optional[bool] = None  # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    views_today: Optional[int] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return asdict(self)
    
    def to_json(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ JSON —Å—Ç—Ä–æ–∫—É"""
        return json.dumps(self.to_dict(), ensure_ascii=False, indent=2)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è FastAPI
class ParseUrlsRequest(BaseModel):
    urls: List[str]

class ParseTextRequest(BaseModel):
    text: str

class BazaWinnerAuthRequest(BaseModel):
    username: str
    password: str

class BazaWinnerSearchRequest(BaseModel):
    username: str
    password: str
    search_params: Dict[str, Any] = {}

class ParseResponse(BaseModel):
    success: bool
    data: List[PropertyData]
    total: int
    message: str
    timestamp: str

class RealtyParserAPI:
    """API –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update(HEADERS)
    
    def is_avito_url(self, url: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Avito"""
        return 'avito.ru' in url.lower()
    
    def is_cian_url(self, url: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Cian"""
        return 'cian.ru' in url.lower()
    
    def is_yandex_url(self, url: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Yandex Realty"""
        return 'realty.yandex.ru' in url.lower()
    
    def _extract_station_from_metro_time(self, metro_time: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ '6 –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏'"""
        if not metro_time or not isinstance(metro_time, str):
            return None
        
        parts = metro_time.strip().split(' ', 1)
        if len(parts) >= 2 and parts[0].isdigit():
            return parts[1]  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        return None
    
    def _extract_minutes_from_metro_time(self, metro_time: str) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∏–Ω—É—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ '6 –¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏'"""
        if not metro_time or not isinstance(metro_time, str):
            return None
        
        parts = metro_time.strip().split(' ', 1)
        if len(parts) >= 1 and parts[0].isdigit():
            try:
                return int(parts[0])  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
            except ValueError:
                return None
        return None
    
    def get_url_source(self, url: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏"""
        if self.is_avito_url(url):
            return 'avito'
        elif self.is_cian_url(url):
            return 'cian'
        elif self.is_yandex_url(url):
            return 'yandex'
        else:
            return 'unknown'
    
    def _determine_status(self, status_str: Optional[str]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Å—Ç–∞—Ç—É—Å—É"""
        if not status_str:
            return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
        
        status_lower = status_str.lower().strip()
        inactive_statuses = [
            '—Å–Ω—è—Ç–æ', '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ', '–∞—Ä—Ö–∏–≤', '—É–¥–∞–ª–µ–Ω–æ', 
            '–ø—Ä–æ–¥–∞–Ω–æ', '—Å–¥–∞–Ω–æ', '–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'
        ]
        
        return not any(inactive_status in status_lower for inactive_status in inactive_statuses)
    
    async def parse_property(self, url: str, skip_photos: bool = True) -> Optional[PropertyData]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PropertyData
        """
        try:
            if self.is_avito_url(url):
                return await self._parse_avito_property(url, skip_photos=skip_photos)
            elif self.is_cian_url(url):
                return await self._parse_cian_property(url)
            elif self.is_yandex_url(url):
                return await self._parse_yandex_property(url)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏: {url}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
            return None

    async def parse_property_extended(self, url: str, skip_photos: bool = True) -> Optional[PropertyData]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ PropertyData
        """
        try:
            if self.is_avito_url(url):
                return await self._parse_avito_extended(url, skip_photos=skip_photos)
            elif self.is_cian_url(url):
                return await self._parse_cian_property(url)
            elif self.is_yandex_url(url):
                return await self._parse_yandex_property(url)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—Å—ã–ª–∫–∏: {url}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ {url}: {e}")
            return None

    async def parse_properties_batch(self, urls: List[str], skip_photos: bool = True) -> List[PropertyData]:
        """
        –ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ PropertyData –æ–±—ä–µ–∫—Ç–æ–≤
        """
        results = []
        for i, url in enumerate(urls, 1):
            try:
                print(f"üîÑ –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i}/{len(urls)}: {url}")
                property_data = await self.parse_property(url, skip_photos=skip_photos)
                if property_data:
                    results.append(property_data)
                    print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {e}")
                continue
        
        print(f"üìä –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(results)} –∏–∑ {len(urls)}")
        return results

    async def _parse_avito_light(self, url: str) -> Optional[PropertyData]:
        """–õ–µ–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä Avito —á–µ—Ä–µ–∑ persistent –±—Ä–∞—É–∑–µ—Ä"""
        try:
            print(f"üîç –õ–µ–≥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ Avito (persistent): {url}")

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º persistent –±—Ä–∞—É–∑–µ—Ä
            data = parse_avito_fast(url)

            if data:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                title = data.get('title', '')
                h1 = data.get('h1', '')
                price_text = data.get('price', '')

                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                text = h1 if h1 else title
                parsed_data = self._extract_data_from_title(title, h1)

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
                if 'rooms' in data:
                    parsed_data['rooms'] = data['rooms']
                if 'total_area' in data:
                    parsed_data['total_area'] = data['total_area']
                if 'floor' in data:
                    parsed_data['floor'] = data['floor']
                if 'total_floors' in data:
                    parsed_data['total_floors'] = data['total_floors']

                # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
                price = None
                if price_text:
                    price_match = re.search(r'(\d[\d\s]*)', price_text.replace('\u00a0', ' '))
                    if price_match:
                        price_str = price_match.group(1).replace(' ', '')
                        try:
                            price = float(price_str)
                        except:
                            pass

                if parsed_data:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–∞—Ö
                    has_rooms = parsed_data.get('rooms') is not None
                    status = has_rooms

                    print(f"üìä –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {'–∞–∫—Ç–∏–≤–Ω–æ' if status else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ'} (–∫–æ–º–Ω–∞—Ç—ã: {parsed_data.get('rooms')})")

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PropertyData
                    property_data = PropertyData(
                        rooms=parsed_data.get('rooms'),
                        price=price,
                        total_area=parsed_data.get('total_area'),
                        floor=parsed_data.get('floor'),
                        total_floors=parsed_data.get('total_floors'),
                        source='avito',
                        url=url,
                        status=status
                    )

                    print("‚úÖ –õ–µ–≥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (persistent) —É—Å–ø–µ—à–µ–Ω")
                    return property_data

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–µ–≥–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (persistent): {e}")
            return None

    def _extract_data_from_title(self, title: str, h1: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ H1 Avito"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º H1 –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ title
            text = h1 if h1 else title
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: {text}")

            data = {}

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: "1-–∫.", "2-–∫.", "3-–∫." –∏ —Ç.–¥.
            rooms_match = re.search(r'(\d+)-–∫\.', text)
            if rooms_match:
                data['rooms'] = int(rooms_match.group(1))
                print(f"üè† –ö–æ–º–Ω–∞—Ç: {data['rooms']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—É–¥–∏–∏ –∏ –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã (0 –∫–æ–º–Ω–∞—Ç)
            if re.search(r'\b—Å—Ç—É–¥–∏—è\b|\b–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã\b', text.lower()):
                data['rooms'] = 0
                print(f"üè† –¢–∏–ø –∂–∏–ª—å—è: {'—Å—Ç—É–¥–∏—è' if '—Å—Ç—É–¥–∏—è' in text.lower() else '–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã'} (–∫–æ–º–Ω–∞—Ç: 0)")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–ª–æ—â–∞–¥—å: "29,5 –º¬≤", "45.2 –º¬≤"
            area_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', text)
            if area_match:
                area_str = area_match.group(1).replace(',', '.')
                data['total_area'] = float(area_str)
                print(f"üìê –ü–ª–æ—â–∞–¥—å: {data['total_area']} –º¬≤")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —ç—Ç–∞–∂: "3/5 —ç—Ç.", "12/25 —ç—Ç."
            floor_match = re.search(r'(\d+)/(\d+)\s*—ç—Ç\.', text)
            if floor_match:
                data['floor'] = floor_match.group(1)
                data['total_floors'] = int(floor_match.group(2))
                print(f"üè¢ –≠—Ç–∞–∂: {data['floor']}/{data['total_floors']}")

            return data if data else None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None

    async def _parse_avito_property(self, url: str, skip_photos: bool = True) -> Optional[PropertyData]:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å Avito (—Ç–æ–ª—å–∫–æ –ª–µ–≥–∫–∏–π –ø–∞—Ä—Å–µ—Ä)"""
        return await self._parse_avito_light(url)

    async def _parse_avito_extended(self, url: str, skip_photos: bool = True) -> Optional[PropertyData]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å Avito (–ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–µ—Ä)"""
        if not AVITO_AVAILABLE:
            print("‚ùå –ü–∞—Ä—Å–µ—Ä Avito –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None

        try:
            print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä): {url}")

            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä Avito —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º skip_photos
            parser = AvitoCardParser(skip_photos=skip_photos)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Selenium –ø–∞—Ä—Å–∏–Ω–≥ (HTTP –≤–∞—Ä–∏–∞–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è)
            parsed_data = parser.parse_avito_page(url)
            if not parsed_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito")
                return None

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
            db_data = parser.prepare_data_for_db(parsed_data)
            print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ Selenium –ø–∞—Ä—Å–∏–Ω–≥–∞")
            if not db_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã –≤ Avito, —Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ
            price = db_data.get('price')
            is_active = price is not None and price != "" and price != 0
            
            property_data = PropertyData(
                rooms=db_data.get('rooms'),
                price=price,
                total_area=db_data.get('total_area'),
                living_area=db_data.get('living_area'),
                kitchen_area=db_data.get('kitchen_area'),
                floor=db_data.get('floor'),
                total_floors=db_data.get('total_floors'),
                bathroom=db_data.get('bathroom'),
                balcony=db_data.get('balcony'),
                renovation=db_data.get('renovation'),
                construction_year=db_data.get('construction_year'),
                house_type=db_data.get('house_type'),
                ceiling_height=db_data.get('ceiling_height'),
                furniture=db_data.get('furniture'),
                address=db_data.get('address'),
                metro_station=db_data.get('metro_station'),
                metro_time=db_data.get('metro_time'),
                metro_way=db_data.get('metro_way'),
                tags=db_data.get('tags'),
                description=db_data.get('description'),
                photo_urls=db_data.get('photo_urls'),
                source='avito',
                url=url,
                status=is_active,
                views_today=db_data.get('today_views')
            )
            
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Avito —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
            return property_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito: {e}")
            return None
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if 'parser' in locals() and parser.driver:
                try:
                    parser.cleanup()
                except:
                    pass
    
    async def _parse_yandex_property(self, url: str) -> Optional[PropertyData]:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å Yandex Realty"""
        if not YANDEX_AVAILABLE:
            print("‚ùå –ü–∞—Ä—Å–µ—Ä Yandex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None
        
        try:
            print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Yandex Realty: {url}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä Yandex
            parser = YandexCardParser()
            
            # –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            parsed_data = parser.parse_yandex_page(url)
            if not parsed_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Yandex Realty")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
            db_data = parser.prepare_data_for_db(parsed_data)
            if not db_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            property_data = PropertyData(
                rooms=db_data.get('rooms'),
                price=db_data.get('price'),
                total_area=db_data.get('area_total'),
                living_area=db_data.get('living_area'),
                kitchen_area=db_data.get('kitchen_area'),
                floor=db_data.get('floor'),
                total_floors=db_data.get('floor_total'),
                bathroom=db_data.get('bathroom'),
                balcony=db_data.get('balcony'),
                renovation=db_data.get('renovation'),
                construction_year=db_data.get('year_built'),
                house_type=db_data.get('house_type'),
                address=db_data.get('address'),
                metro_station=self._extract_station_from_metro_time(db_data.get('metro_time')),  # Extract station name from metro_time
                metro_time=self._extract_minutes_from_metro_time(db_data.get('metro_time')),      # Extract minutes from metro_time
                description=db_data.get('description'),
                source='yandex',
                url=url,
                status=self._determine_status(db_data.get('status', 'active')),
                views_today=db_data.get('views')  # Yandex views are today's views, not total
            )
            
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Yandex Realty —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
            return property_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Yandex Realty: {e}")
            return None
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if 'parser' in locals():
                try:
                    parser.cleanup()
                except:
                    pass
    
    async def _parse_cian_property(self, url: str) -> Optional[PropertyData]:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å Cian"""
        try:
            print(f"üè† –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Cian: {url}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            response = await asyncio.get_event_loop().run_in_executor(
                None, lambda: self.session.get(url)
            )
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self._extract_cian_data(soup, url)
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            property_data = PropertyData(
                rooms=data.get('–ö–æ–º–Ω–∞—Ç'),
                price=data.get('–¶–µ–Ω–∞_raw'),
                total_area=data.get('–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å'),
                living_area=data.get('–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å'),
                kitchen_area=data.get('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏'),
                floor=data.get('–≠—Ç–∞–∂'),
                total_floors=data.get('–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π'),
                bathroom=data.get('–°–∞–Ω—É–∑–µ–ª'),
                balcony=data.get('–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è'),
                renovation=data.get('–†–µ–º–æ–Ω—Ç'),
                construction_year=data.get('–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏'),
                house_type=data.get('–¢–∏–ø –¥–æ–º–∞'),
                ceiling_height=data.get('–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤'),
                furniture=data.get('–ú–µ–±–µ–ª—å'),
                address=data.get('–ê–¥—Ä–µ—Å'),
                metro_station=self._extract_station_from_metro_time(data.get('–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ')),  # Extract station name from metro_time format
                metro_time=self._extract_minutes_from_metro_time(data.get('–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ')),      # Extract minutes from metro_time format
                tags=data.get('–ú–µ—Ç–∫–∏'),
                description=data.get('–û–ø–∏—Å–∞–Ω–∏–µ'),
                photo_urls=data.get('photo_urls', []),
                source='cian',
                url=url,
                status=self._determine_status(data.get('–°—Ç–∞—Ç—É—Å', 'active')),
                views_today=data.get('–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è')
            )
            
            print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ Cian —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ")
            return property_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Cian: {e}")
            return None
    
    def _extract_cian_data(self, soup: BeautifulSoup, url: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã Cian"""
        data = {'URL': url}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        page_text = soup.get_text(" ", strip=True).lower()
        is_blocked = bool(re.search(r"–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã.*–Ω–µ —Ä–æ–±–æ—Ç|–ø–æ—Ö–æ–∂–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ", page_text))
        if is_blocked:
            data['–°—Ç–∞—Ç—É—Å'] = None
        elif soup.find(string=re.compile(r"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ", re.IGNORECASE)):
            data['–°—Ç–∞—Ç—É—Å'] = '–°–Ω—è—Ç–æ'
        
        # –ú–µ—Ç–∫–∏ (—É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        labels = []
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –º–µ—Ç–æ–∫
        label_selectors = [
            'div[data-name="LabelsLayoutNew"] > span[class]',  # –ü—Ä—è–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å–ø–∞–Ω—ã —Å –∫–ª–∞—Å—Å–∞–º–∏
            'div[data-name="LabelsLayoutNew"] span[data-testid]',  # –°–ø–∞–Ω—ã —Å data-testid
            'div[data-name="LabelsLayoutNew"] span:not(:has(span))'  # –õ–∏—Å—Ç–æ–≤—ã–µ —Å–ø–∞–Ω—ã (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö)
        ]
        
        for selector in label_selectors:
            try:
                spans = soup.select(selector)
                if spans:
                    labels = [span.get_text(strip=True) for span in spans if span.get_text(strip=True)]
                    break  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            except Exception:
                continue
                
        data['–ú–µ—Ç–∫–∏'] = '; '.join(labels) if labels else None
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
        h1 = soup.find('h1')
        if h1:
            m = re.search(r"(\d+)[^\d]*[-‚Äì]?–∫–æ–º–Ω", h1.get_text())
            if m:
                data['–ö–æ–º–Ω–∞—Ç'] = self._extract_number(m.group(1))
        
        # –¶–µ–Ω–∞
        price_el = (
            soup.select_one('[data-name="NewbuildingPriceInfo"] [data-testid="price-amount"] span')
            or soup.select_one('[data-name="AsideGroup"] [data-testid="price-amount"] span')
        )
        if price_el:
            data['–¶–µ–Ω–∞_raw'] = self._extract_number(price_el.get_text())
            if '–°—Ç–∞—Ç—É—Å' not in data or data['–°—Ç–∞—Ç—É—Å'] is None:
                data['–°—Ç–∞—Ç—É—Å'] = '–ê–∫—Ç–∏–≤–Ω–æ'
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        summary = soup.select_one('[data-name="OfferSummaryInfoLayout"]')
        if summary:
            for item in summary.select('[data-name="OfferSummaryInfoItem"]'):
                ps = item.find_all('p')
                if len(ps) < 2:
                    continue
                key = ps[0].get_text(strip=True)
                val = ps[1].get_text(strip=True)
                kl = key.lower().strip()
                if key == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è':
                    data[key] = val
                    continue
                if kl == '—ç—Ç–∞–∂': 
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —ç—Ç–∞–∂ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏ –æ–±—â–∏–π
                    floor_info = self._parse_floor_info(val)
                    data['–≠—Ç–∞–∂'] = floor_info['current_floor']
                    data['–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π'] = floor_info['total_floors']
                    continue
                if kl in ['—Å–∞–Ω—É–∑–µ–ª', '–±–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤']:
                    data[key] = val
                    continue
                data[key] = self._extract_number(val) if re.search(r"\d", val) else val
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cont = soup.find('div', {'data-name': 'ObjectFactoids'})
        if cont:
            lines = cont.get_text(separator='\n', strip=True).split('\n')
            for i in range(0, len(lines)-1, 2):
                key, val = lines[i].strip(), lines[i+1].strip()
                kl = key.lower().strip()
                if key == '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è': 
                    data[key] = val
                    continue
                if kl == '—ç—Ç–∞–∂' and '–≠—Ç–∞–∂' not in data: 
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —ç—Ç–∞–∂ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏ –æ–±—â–∏–π
                    floor_info = self._parse_floor_info(val)
                    data['–≠—Ç–∞–∂'] = floor_info['current_floor']
                    data['–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π'] = floor_info['total_floors']
                elif kl in ['—Å–∞–Ω—É–∑–µ–ª', '–±–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ñ—Ç–æ–≤']: 
                    data[key] = val
                else: 
                    data[key] = self._extract_number(val) if re.search(r"\d", val) else val
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        stats_re = re.compile(r"([\d\s]+)\s–ø—Ä–æ—Å–º–æ—Ç—Ä\S*,\s*(\d+)\s–∑–∞ —Å–µ–≥–æ–¥–Ω—è,\s*(\d+)\s—É–Ω–∏–∫–∞–ª—å", re.IGNORECASE)
        st = soup.find(string=stats_re)
        if st:
            m = stats_re.search(st)
            data['–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'], data['–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è'], data['–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤'] = (
                self._extract_number(m.group(1)), self._extract_number(m.group(2)), self._extract_number(m.group(3))
            )
        
        # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –º–µ—Ç—Ä–æ
        geo = soup.select_one('div[data-name="Geo"]')
        if geo:
            span = geo.find('span', itemprop='name')
            addr = span['content'] if span and span.get('content') else ', '.join(
                a.get_text(strip=True) for a in geo.select('a[data-name="AddressItem"]')
            )
            parts = [s.strip() for s in addr.split(',') if s.strip()]
            data['–ê–¥—Ä–µ—Å'] = ', '.join(parts[-2:]) if len(parts) > 1 else addr
            
            # –ú–µ—Ç—Ä–æ
            stations = []
            for li in geo.select('ul[data-name="UndergroundList"] li[data-name="UndergroundItem"]'):
                st_el = li.find('a', href=True)
                tm_el = li.find('span', class_=re.compile(r".*underground_time.*"))
                if st_el and tm_el:
                    name = st_el.get_text(strip=True)
                    m = re.search(r"(\d+)", tm_el.get_text(strip=True))
                    stations.append((name, int(m.group(1)) if m else None))
            if stations:
                station, time_to = min(stations, key=lambda x: x[1] or float('inf'))
                data['–ú–∏–Ω—É—Ç –º–µ—Ç—Ä–æ'] = f"{time_to} {station}"
        
        # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        data['photo_urls'] = self._extract_cian_photos(soup)
        
        return data
    
    def _parse_floor_info(self, text: str) -> Dict[str, Optional[int]]:
        """–†–∞–∑–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –∏ –æ–±—â–∏–π"""
        if not text:
            return {'current_floor': None, 'total_floors': None}
        
        s = str(text).replace('\u00A0', ' ').strip().lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω "13 –∏–∑ 37" –∏–ª–∏ "13/37"
        m = re.search(r"(\d+)\s*(?:–∏–∑|/)\s*(\d+)", s)
        if m:
            return {
                'current_floor': int(m.group(1)),
                'total_floors': int(m.group(2))
            }
        
        # –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–∂
        m2 = re.search(r"(\d+)\b", s)
        if m2:
            return {
                'current_floor': int(m2.group(1)),
                'total_floors': None
            }
        
        return {'current_floor': None, 'total_floors': None}
    
    def _extract_cian_photos(self, soup: BeautifulSoup) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å Cian"""
        photo_urls = []
        
        try:
            # –ò—â–µ–º –≥–∞–ª–µ—Ä–µ—é
            gallery = soup.find('div', {'data-name': 'GalleryInnerComponent'})
            if not gallery:
                return photo_urls
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = gallery.find_all('img', src=True)
            for img in images:
                src = img.get('src')
                if src and src.startswith('http') and 'cdn-cian.ru' in src:
                    photo_urls.append(src)
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ background-image
            elements_with_bg = gallery.find_all(style=re.compile(r'background-image'))
            for elem in elements_with_bg:
                style = elem.get('style', '')
                bg_match = re.search(r'background-image:\s*url\(["\']?([^"\')\s]+)["\']?\)', style)
                if bg_match:
                    bg_url = bg_match.group(1)
                    if bg_url.startswith('http') and ('cdn-cian.ru' in bg_url or 'kinescopecdn.net' in bg_url):
                        photo_urls.append(bg_url)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            unique_photos = []
            for url in photo_urls:
                if url not in seen:
                    seen.add(url)
                    unique_photos.append(url)
            
            return unique_photos
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π Cian: {e}")
            return []
    
    def _extract_number(self, text: str) -> Optional[Union[int, float]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text or text == '‚Äî':
            return None
        cleaned = re.sub(r"[^\d.,]", "", text)
        cleaned = cleaned.replace('\u00A0', '').replace(' ', '').replace(',', '.')
        try:
            return float(cleaned) if '.' in cleaned else int(cleaned)
        except ValueError:
            return None
    
    def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        try:
            self.session.close()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.cleanup()


# ===============================================
# PERSISTENT BROWSER CLASS (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
# ===============================================

class PersistentAvitoBrowser:
    """Persistent –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Avito —Å cookies"""

    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        """Singleton pattern –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if hasattr(self, 'initialized'):
            return

        self.driver = None
        self.cookies_file = "avito_cookies.json"
        self.initialized = False
        self.last_activity = time.time()
        self.session_timeout = 86400  # 24 —á–∞—Å–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞)

        # –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –¥–ª—è "–Ω–∞–≤—Å–µ–≥–¥–∞" —Ä–µ–∂–∏–º–∞
        # atexit.register(self.cleanup)  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        print("üîÑ Persistent –±—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã")

    def setup_browser(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver and self._is_browser_alive():
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True

        try:
            print("üîß –ó–∞–ø—É—Å–∫–∞–µ–º persistent –±—Ä–∞—É–∑–µ—Ä...")

            options = Options()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ cookies –¥–ª—è headless —Ä–µ–∂–∏–º–∞
            has_cookies = os.path.exists(self.cookies_file)

            if has_cookies:
                # –° cookies –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å headless –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                options.add_argument("--headless=new")
                print("üîí –†–µ–∂–∏–º headless (–µ—Å—Ç—å cookies)")
            else:
                # –ë–µ–∑ cookies –ª—É—á—à–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
                print("üëÅÔ∏è –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–µ—Ç cookies)")

            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            options.add_argument("--disable-images")  # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            options.add_argument("--memory-pressure-off")  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–±–æ—Ä–∫—É –º—É—Å–æ—Ä–∞ –ø–æ –ø–∞–º—è—Ç–∏
            options.add_argument("--max_old_space_size=512")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å V8
            options.add_argument("--window-size=1280,720")

            # User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

            # –û—Ç–∫–ª—é—á–∞–µ–º webdriver —Ñ–ª–∞–≥–∏
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)

            # Chrome binary path
            if os.path.exists("/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"):
                options.binary_location = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
            else:
                options.binary_location = "/opt/google/chrome/google-chrome"

            self.driver = webdriver.Chrome(options=options)
            self.driver.set_page_load_timeout(30)
            self.driver.implicitly_wait(5)

            # –£–±–∏—Ä–∞–µ–º webdriver property
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            self._load_and_apply_cookies()

            self.initialized = True
            self.last_activity = time.time()

            print("‚úÖ Persistent –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def _is_browser_alive(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if not self.driver:
                return False
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
            _ = self.driver.current_url
            return True
        except:
            return False

    def _load_and_apply_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç cookies"""
        try:
            if not os.path.exists(self.cookies_file):
                print("‚ö†Ô∏è –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω–æ")
                return

            # –°–Ω–∞—á–∞–ª–∞ –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é Avito –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ cookies
            print("üç™ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è cookies...")
            self.driver.get("https://www.avito.ru/")
            time.sleep(2)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if 'cookies' in cookies_data:
                cookies_list = cookies_data['cookies']
            else:
                cookies_list = cookies_data

            for cookie in cookies_list:
                try:
                    self.driver.add_cookie(cookie)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å cookie: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies
            self.driver.refresh()
            time.sleep(1)

            print("‚úÖ Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            print("üè† –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π Avito –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")

    def parse_url(self, url):
        """–ë—ã—Å—Ç—Ä–æ –ø–∞—Ä—Å–∏—Ç URL —Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—ã–º –±—Ä–∞—É–∑–µ—Ä–æ–º"""
        if not self.setup_browser():
            return None

        try:
            self.last_activity = time.time()

            print(f"üîÑ –ü–∞—Ä—Å–∏–º: {url}")
            start_time = time.time()

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(url)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(1)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {}

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                data['title'] = self.driver.title
            except:
                pass

            # H1
            try:
                h1_element = self.driver.find_element("tag name", "h1")
                data['h1'] = h1_element.text.strip()
            except:
                pass

            # –¶–µ–Ω–∞
            try:
                price_selectors = [
                    '[data-marker="item-view/item-price"]',
                    '[class*="price"]',
                    '[data-testid*="price"]'
                ]

                for selector in price_selectors:
                    try:
                        price_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for el in price_elements:
                            if el.is_displayed() and el.text.strip():
                                data['price'] = el.text.strip()
                                break
                        if 'price' in data:
                            break
                    except:
                        continue
            except:
                pass

            # –ü–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
            text = data.get('h1', '') or data.get('title', '')
            if text:
                parsed_data = self._extract_from_text(text)
                data.update(parsed_data)

            parse_time = time.time() - start_time
            print(f"‚è±Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª: {parse_time:.2f} —Å–µ–∫")

            return data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None

    def _extract_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        data = {}

        # –ö–æ–º–Ω–∞—Ç—ã
        rooms_match = re.search(r'(\d+)-–∫\.', text)
        if rooms_match:
            data['rooms'] = int(rooms_match.group(1))

        # –°—Ç—É–¥–∏–∏/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
        if re.search(r'\b—Å—Ç—É–¥–∏—è\b|\b–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã\b', text.lower()):
            data['rooms'] = 0

        # –ü–ª–æ—â–∞–¥—å
        area_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', text)
        if area_match:
            area_str = area_match.group(1).replace(',', '.')
            data['total_area'] = float(area_str)

        # –≠—Ç–∞–∂
        floor_match = re.search(r'(\d+)/(\d+)\s*—ç—Ç\.', text)
        if floor_match:
            data['floor'] = floor_match.group(1)
            data['total_floors'] = int(floor_match.group(2))

        return data

    def is_session_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        return time.time() - self.last_activity > self.session_timeout

    def get_session_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        if not self.driver:
            return {"status": "not_started", "message": "–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"}

        try:
            current_url = self.driver.current_url
            title = self.driver.title
            session_age = time.time() - self.last_activity

            return {
                "status": "active",
                "url": current_url,
                "title": title,
                "session_age_minutes": round(session_age / 60, 1),
                "is_on_avito": 'avito.ru' in current_url,
                "last_activity": self.last_activity
            }
        except:
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"}

    def refresh_session(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é"""
        if self.is_session_expired() or not self._is_browser_alive():
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä —Å–µ—Å—Å–∏—é...")
            self.cleanup()
            return self.setup_browser()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ Avito
        try:
            current_url = self.driver.current_url
            if not ('avito.ru' in current_url):
                print("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é Avito...")
                self.driver.get("https://www.avito.ru/")
                time.sleep(1)
        except:
            pass

        return True

    def cleanup(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.driver:
                print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º persistent –±—Ä–∞—É–∑–µ—Ä...")
                self.driver.quit()
                self.driver = None
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    def __del__(self):
        self.cleanup()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_browser = None

def get_persistent_browser():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä persistent –±—Ä–∞—É–∑–µ—Ä–∞"""
    global _browser
    if _browser is None:
        _browser = PersistentAvitoBrowser()
    return _browser

def parse_avito_fast(url):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ persistent –±—Ä–∞—É–∑–µ—Ä"""
    browser = get_persistent_browser()
    if not browser.refresh_session():
        return None
    return browser.parse_url(url)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser = RealtyParserAPI()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ persistent –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ
def init_persistent_browser():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç persistent –±—Ä–∞—É–∑–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è persistent –±—Ä–∞—É–∑–µ—Ä–∞...")
        browser = get_persistent_browser()
        if browser.setup_browser():
            print("‚úÖ Persistent –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            print("üè† –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ Avito —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ cookies")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å persistent –±—Ä–∞—É–∑–µ—Ä")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ persistent –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
browser_thread = threading.Thread(target=init_persistent_browser, daemon=True)
browser_thread.start()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Realty Parser HTTP API",
    description="API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å Avito –∏ Cian",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Fastify
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# API endpoints
@app.post("/api/parse/urls", response_model=ParseResponse)
async def parse_by_urls(request: ParseUrlsRequest):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Å–ø–∏—Å–∫—É URL"""
    try:
        properties = await parser.parse_properties_batch(request.urls)
        
        return ParseResponse(
            success=True,
            data=properties,
            total=len(properties),
            message=f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(properties)} –∏–∑ {len(request.urls)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            timestamp=str(datetime.now())
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

@app.post("/api/parse/text", response_model=ParseResponse)
async def parse_from_text(request: ParseTextRequest):
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞
        urls = extract_urls(request.text)
        if not urls:
            raise HTTPException(status_code=400, detail="URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ")
        
        # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        properties = await parser.parse_properties_batch(urls)
        
        return ParseResponse(
            success=True,
            data=properties,
            total=len(properties),
            message=f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(urls)} URL, —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ {len(properties)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            timestamp=str(datetime.now())
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

@app.get("/api/parse/single")
async def parse_single_property(url: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ URL (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)"""
    try:
        property_data = await parser.parse_property(url)
        if property_data:
            return {
                "success": True,
                "data": property_data.to_dict(),
                "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)"
            }
        else:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

@app.get("/api/parse/extended")
async def parse_extended_property(url: str):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ URL (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)"""
    try:
        property_data = await parser.parse_property_extended(url)
        if property_data:
            return {
                "success": True,
                "data": property_data.to_dict(),
                "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
            }
        else:
            raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å persistent –±—Ä–∞—É–∑–µ—Ä–∞
    browser_status = "unknown"
    try:
        browser = get_persistent_browser()
        session_info = browser.get_session_info()
        browser_status = session_info.get('status', 'unknown')
    except:
        browser_status = "error"

    return {
        "status": "healthy",
        "service": "realty-parser-api",
        "avito_available": AVITO_AVAILABLE,
        "cian_available": True,
        "yandex_available": YANDEX_AVAILABLE,
        "persistent_browser": browser_status
    }

@app.get("/api/browser/status")
async def browser_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ persistent –±—Ä–∞—É–∑–µ—Ä–∞"""
    try:
        browser = get_persistent_browser()
        session_info = browser.get_session_info()
        return {
            "success": True,
            "browser_session": session_info,
            "message": "–°—Ç–∞—Ç—É—Å –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω"
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–∞—É–∑–µ—Ä–∞"
        }

@app.post("/api/browser/init")
async def init_browser():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è persistent –±—Ä–∞—É–∑–µ—Ä–∞"""
    try:
        browser = get_persistent_browser()
        if browser.setup_browser():
            session_info = browser.get_session_info()
            return {
                "success": True,
                "browser_session": session_info,
                "message": "–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä"
            }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"
        }

@app.post("/api/browser/refresh")
async def refresh_browser():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ persistent –±—Ä–∞—É–∑–µ—Ä–∞"""
    try:
        browser = get_persistent_browser()
        if browser.refresh_session():
            session_info = browser.get_session_info()
            return {
                "success": True,
                "browser_session": session_info,
                "message": "–°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            }
        else:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –±—Ä–∞—É–∑–µ—Ä–∞"
            }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞"
        }

@app.get("/api/sources")
async def get_supported_sources():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    return {
        "sources": [
            {
                "name": "Avito",
                "domain": "avito.ru",
                "available": AVITO_AVAILABLE,
                "source_id": "avito"
            },
            {
                "name": "Cian",
                "domain": "cian.ru",
                "available": True,
                "source_id": "cian"
            },
            {
                "name": "Yandex Realty",
                "domain": "realty.yandex.ru",
                "available": YANDEX_AVAILABLE,
                "source_id": "yandex"
            }
        ]
    }

@app.get("/api/docs")
async def api_documentation():
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"""
    return {
        "title": "Realty Parser HTTP API",
        "version": "1.0.0",
        "description": "API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å Avito, Cian –∏ Yandex Realty",
        "base_url": "http://localhost:8008",
        "endpoints": {
            "monitoring": {
                "GET /api/health": {
                    "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ persistent –±—Ä–∞—É–∑–µ—Ä–∞",
                    "response": {
                        "status": "healthy",
                        "service": "realty-parser-api",
                        "avito_available": True,
                        "cian_available": True,
                        "yandex_available": True,
                        "persistent_browser": "active"
                    }
                },
                "GET /api/sources": {
                    "description": "–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                    "response": {
                        "sources": [
                            {"name": "Avito", "domain": "avito.ru", "available": True}
                        ]
                    }
                }
            },
            "parsing": {
                "GET /api/parse/single": {
                    "description": "–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)",
                    "parameters": {
                        "url": "URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
                    },
                    "example": "/api/parse/single?url=https://www.avito.ru/moskva/kvartiry/1-k._kvartira_295_m_25_et._7627589190",
                    "response": {
                        "success": True,
                        "data": {
                            "rooms": 1,
                            "total_area": 29.5,
                            "floor": "3",
                            "total_floors": 5,
                            "price": 9000000,
                            "source": "avito",
                            "status": True
                        },
                        "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)"
                    }
                },
                "GET /api/parse/extended": {
                    "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
                    "parameters": {
                        "url": "URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)"
                    },
                    "example": "/api/parse/extended?url=https://www.avito.ru/moskva/kvartiry/1-k._kvartira_295_m_25_et._7627589190",
                    "response": {
                        "success": True,
                        "data": {
                            "rooms": 1,
                            "price": 9000000,
                            "total_area": 29.5,
                            "address": "–ú–æ—Å–∫–≤–∞, 3-—è –†—ã–±–∏–Ω—Å–∫–∞—è —É–ª., 30",
                            "metro_station": "–ú–∏—Ç—å–∫–æ–≤–æ",
                            "description": "...",
                            "source": "avito"
                        },
                        "message": "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
                    }
                },
                "POST /api/parse/urls": {
                    "description": "–ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ URL",
                    "body": {
                        "urls": ["url1", "url2", "..."]
                    },
                    "response": {
                        "success": True,
                        "data": ["array of PropertyData objects"],
                        "total": 2,
                        "message": "–£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ 2 –∏–∑ 2 –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                    }
                },
                "POST /api/parse/text": {
                    "description": "–ü–∞—Ä—Å–∏–Ω–≥ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞",
                    "body": {
                        "text": "–¢–µ–∫—Å—Ç —Å URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                    },
                    "response": {
                        "success": True,
                        "data": ["array of PropertyData objects"],
                        "total": 1,
                        "message": "–ò–∑–≤–ª–µ—á–µ–Ω–æ 1 URL, —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ 1 –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
                    }
                }
            },
            "browser_management": {
                "GET /api/browser/status": {
                    "description": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å persistent –±—Ä–∞—É–∑–µ—Ä–∞",
                    "response": {
                        "success": True,
                        "browser_session": {
                            "status": "active",
                            "url": "https://www.avito.ru/",
                            "title": "–ê–≤–∏—Ç–æ",
                            "session_age_minutes": 15.5,
                            "is_on_avito": True
                        },
                        "message": "–°—Ç–∞—Ç—É—Å –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω"
                    }
                },
                "POST /api/browser/init": {
                    "description": "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞",
                    "response": {
                        "success": True,
                        "browser_session": {"status": "active"},
                        "message": "–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                    }
                },
                "POST /api/browser/refresh": {
                    "description": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞",
                    "response": {
                        "success": True,
                        "browser_session": {"status": "active"},
                        "message": "–°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                    }
                }
            }
        },
        "data_structure": {
            "PropertyData": {
                "description": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
                "fields": {
                    "rooms": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (int, 0 –¥–ª—è —Å—Ç—É–¥–∏–π)",
                    "price": "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (float)",
                    "total_area": "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (float)",
                    "living_area": "–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –≤ –º¬≤ (float)",
                    "kitchen_area": "–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –≤ –º¬≤ (float)",
                    "floor": "–≠—Ç–∞–∂ (string)",
                    "total_floors": "–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ (int)",
                    "bathroom": "–¢–∏–ø —Å–∞–Ω—É–∑–ª–∞ (string)",
                    "balcony": "–ë–∞–ª–∫–æ–Ω/–ª–æ–¥–∂–∏—è (string)",
                    "renovation": "–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞ (string)",
                    "construction_year": "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (int)",
                    "house_type": "–¢–∏–ø –¥–æ–º–∞ (string)",
                    "ceiling_height": "–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ –≤ –º (float)",
                    "furniture": "–ú–µ–±–µ–ª—å (string)",
                    "address": "–ê–¥—Ä–µ—Å (string)",
                    "metro_station": "–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ (string)",
                    "metro_time": "–í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ –≤ –º–∏–Ω—É—Ç–∞—Ö (int)",
                    "metro_way": "–°–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –º–µ—Ç—Ä–æ (string)",
                    "tags": "–ú–µ—Ç–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (array of strings)",
                    "description": "–û–ø–∏—Å–∞–Ω–∏–µ (string)",
                    "photo_urls": "–°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ (array of strings)",
                    "source": "–ò—Å—Ç–æ—á–Ω–∏–∫: avito/cian/yandex (string)",
                    "url": "URL –æ–±—ä—è–≤–ª–µ–Ω–∏—è (string)",
                    "status": "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è (boolean)",
                    "views_today": "–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è (int)"
                }
            }
        },
        "features": {
            "fast_parsing": "–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (3-5 —Å–µ–∫)",
            "persistent_browser": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Å cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫",
            "multiple_sources": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Avito, Cian, Yandex Realty",
            "batch_processing": "–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ URL",
            "auto_extraction": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"
        },
        "performance": {
            "fast_mode": "3-5 —Å–µ–∫—É–Ω–¥ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫)",
            "extended_mode": "10-30 —Å–µ–∫—É–Ω–¥ (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)",
            "memory_usage": "~435 MB (persistent –±—Ä–∞—É–∑–µ—Ä)",
            "concurrent_requests": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        }
    }

@app.get("/", response_class=HTMLResponse)
async def api_docs_html():
    """HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Realty Parser API - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</title>
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 1200px; margin: 0 auto; padding: 20px; }
            h1, h2, h3 { color: #2c3e50; }
            .endpoint { background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 10px 0; border-radius: 5px; }
            .method { display: inline-block; padding: 4px 8px; border-radius: 3px; font-weight: bold; color: white; font-size: 12px; }
            .get { background: #28a745; }
            .post { background: #007bff; }
            code { background: #f1f1f1; padding: 2px 4px; border-radius: 3px; font-family: 'Monaco', 'Consolas', monospace; }
            .example { background: #e9ecef; padding: 10px; border-radius: 5px; overflow-x: auto; }
            .status { display: inline-block; padding: 2px 6px; border-radius: 3px; font-size: 11px; }
            .active { background: #d4edda; color: #155724; }
            .fast { background: #fff3cd; color: #856404; }
            .extended { background: #f8d7da; color: #721c24; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; text-align: center; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
            .card { background: white; border: 1px solid #e1e5e9; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .badge { display: inline-block; padding: 3px 8px; background: #e9ecef; border-radius: 12px; font-size: 12px; margin: 2px; }
            .success { color: #28a745; }
            .warning { color: #ffc107; }
            .error { color: #dc3545; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üè† Realty Parser API</h1>
            <p>HTTP API –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</p>
            <p><strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:</strong> Avito, Cian, Yandex Realty</p>
        </div>

        <div class="grid">
            <div class="card">
                <h3>üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</h3>
                <div class="example">
                    <strong>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:</strong><br>
                    <code>GET /api/health</code><br><br>
                    <strong>–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥:</strong><br>
                    <code>GET /api/parse/single?url=https://www.avito.ru/...</code><br><br>
                    <strong>–°—Ç–∞—Ç—É—Å –±—Ä–∞—É–∑–µ—Ä–∞:</strong><br>
                    <code>GET /api/browser/status</code>
                </div>
            </div>

            <div class="card">
                <h3>üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                <span class="badge fast">–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: 3-5 —Å–µ–∫</span><br>
                <span class="badge extended">–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π: 10-30 —Å–µ–∫</span><br>
                <span class="badge">–ü–∞–º—è—Ç—å: ~435 MB</span><br>
                <span class="badge active">Persistent –±—Ä–∞—É–∑–µ—Ä</span>
            </div>
        </div>

        <h2>üì° Endpoints</h2>

        <h3>üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h3>
        <div class="endpoint">
            <span class="method get">GET</span> <code>/api/health</code>
            <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∏ persistent –±—Ä–∞—É–∑–µ—Ä–∞</p>
        </div>

        <div class="endpoint">
            <span class="method get">GET</span> <code>/api/sources</code>
            <p>–°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</p>
        </div>

        <h3>üè† –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</h3>
        <div class="endpoint">
            <span class="method get">GET</span> <code>/api/parse/single?url={URL}</code>
            <p><strong>–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥</strong> - –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (3-5 —Å–µ–∫)</p>
            <div class="example">
                <strong>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:</strong> –∫–æ–º–Ω–∞—Ç—ã, –ø–ª–æ—â–∞–¥—å, —ç—Ç–∞–∂, —Ü–µ–Ω—É (–¥–ª—è Avito)
            </div>
        </div>

        <div class="endpoint">
            <span class="method get">GET</span> <code>/api/parse/extended?url={URL}</code>
            <p><strong>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</strong> - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (10-30 —Å–µ–∫)</p>
            <div class="example">
                <strong>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:</strong> –≤—Å–µ –ø–æ–ª—è + –∞–¥—Ä–µ—Å, –º–µ—Ç—Ä–æ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ
            </div>
        </div>

        <div class="endpoint">
            <span class="method post">POST</span> <code>/api/parse/urls</code>
            <p><strong>–ü–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥</strong> —Å–ø–∏—Å–∫–∞ URL</p>
            <div class="example">
                <strong>Body:</strong> <code>{"urls": ["url1", "url2", ...]}</code>
            </div>
        </div>

        <div class="endpoint">
            <span class="method post">POST</span> <code>/api/parse/text</code>
            <p><strong>–ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞</strong> - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç URL</p>
            <div class="example">
                <strong>Body:</strong> <code>{"text": "–¢–µ–∫—Å—Ç —Å URL –æ–±—ä—è–≤–ª–µ–Ω–∏–π"}</code>
            </div>
        </div>

        <h3>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º</h3>
        <div class="endpoint">
            <span class="method get">GET</span> <code>/api/browser/status</code>
            <p>–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å persistent –±—Ä–∞—É–∑–µ—Ä–∞</p>
        </div>

        <div class="endpoint">
            <span class="method post">POST</span> <code>/api/browser/init</code>
            <p>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞</p>
        </div>

        <div class="endpoint">
            <span class="method post">POST</span> <code>/api/browser/refresh</code>
            <p>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞</p>
        </div>

        <h2>üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h2>
        <div class="card">
            <h3>PropertyData</h3>
            <div class="grid">
                <div>
                    <strong>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:</strong><br>
                    <span class="badge">rooms</span> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç<br>
                    <span class="badge">price</span> - —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö<br>
                    <span class="badge">total_area</span> - –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å<br>
                    <span class="badge">floor</span> - —ç—Ç–∞–∂<br>
                    <span class="badge">source</span> - avito/cian/yandex<br>
                    <span class="badge">status</span> - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                </div>
                <div>
                    <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:</strong><br>
                    <span class="badge">address</span> - –∞–¥—Ä–µ—Å<br>
                    <span class="badge">metro_station</span> - –º–µ—Ç—Ä–æ<br>
                    <span class="badge">description</span> - –æ–ø–∏—Å–∞–Ω–∏–µ<br>
                    <span class="badge">photo_urls</span> - —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏<br>
                    <span class="badge">renovation</span> - —Ä–µ–º–æ–Ω—Ç<br>
                    <span class="badge">house_type</span> - —Ç–∏–ø –¥–æ–º–∞
                </div>
            </div>
        </div>

        <h2>üåü –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h2>
        <div class="grid">
            <div class="card">
                <h3>‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥</h3>
                <p>–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞ 3-5 —Å–µ–∫—É–Ω–¥</p>
            </div>
            <div class="card">
                <h3>üç™ Persistent –±—Ä–∞—É–∑–µ—Ä</h3>
                <p>–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Å cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫</p>
            </div>
            <div class="card">
                <h3>üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</h3>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ Avito</p>
            </div>
            <div class="card">
                <h3>üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</h3>
                <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ URL –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º</p>
            </div>
        </div>

        <h2>üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏</h2>
        <div class="example">
            üìä <a href="/api/health">–°—Ç–∞—Ç—É—Å API</a><br>
            üîç <a href="/api/browser/status">–°—Ç–∞—Ç—É—Å –±—Ä–∞—É–∑–µ—Ä–∞</a><br>
            üìö <a href="/api/docs">JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a><br>
            üéØ <a href="/api/sources">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏</a>
        </div>

        <footer style="margin-top: 50px; text-align: center; color: #6c757d; border-top: 1px solid #e1e5e9; padding-top: 20px;">
            <p>Realty Parser API v1.0.0 | –ü–æ–¥–¥–µ—Ä–∂–∫–∞: Avito, Cian, Yandex Realty</p>
        </footer>
    </body>
    </html>
    """

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö Python –º–æ–¥—É–ª—è—Ö)
async def parse_property(url: str) -> Optional[PropertyData]:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    return await parser.parse_property(url)

async def parse_property_extended(url: str) -> Optional[PropertyData]:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    return await parser.parse_property_extended(url)

async def parse_properties_batch(urls: List[str]) -> List[PropertyData]:
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
    return await parser.parse_properties_batch(urls)

def extract_urls(raw_input: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    return re.findall(r'https?://[^\s,;]+', raw_input)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
realty_parser = RealtyParserAPI()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Realty Parser Server")
    print("=" * 60)
    print("üåê HTTP API: http://localhost:8008")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8008/")
    print("üìä –°—Ç–∞—Ç—É—Å API: http://localhost:8008/api/health")
    print("üîç –°—Ç–∞—Ç—É—Å –±—Ä–∞—É–∑–µ—Ä–∞: http://localhost:8008/api/browser/status")
    print("üîÑ Persistent –±—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ...")
    print("=" * 60)

    # –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8008,
        log_level="info"
    )
