#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ Avito
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from realty_parser_server import RealtyParserAPI

async def test_avito_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito"""

    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_url = "https://www.avito.ru/moskva/kvartiry/1-k._kvartira_295_m_25_et._7627589190"

    print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Avito –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {test_url}")
    print("-" * 80)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
    parser = RealtyParserAPI()

    try:
        # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = await asyncio.wait_for(
            parser.parse_property(test_url, skip_photos=True),
            timeout=60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        )

        if result:
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            print("-" * 80)
            print("üìã –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
            print("-" * 80)

            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if result.rooms:
                print(f"üè† –ö–æ–º–Ω–∞—Ç: {result.rooms}")
            if result.price:
                print(f"üí∞ –¶–µ–Ω–∞: {result.price:,.0f} ‚ÇΩ")
            if result.total_area:
                print(f"üìê –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: {result.total_area} –º¬≤")
            if result.living_area:
                print(f"üõèÔ∏è –ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å: {result.living_area} –º¬≤")
            if result.kitchen_area:
                print(f"üçΩÔ∏è –ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏: {result.kitchen_area} –º¬≤")
            if result.floor:
                print(f"üè¢ –≠—Ç–∞–∂: {result.floor}")
            if result.total_floors:
                print(f"üèóÔ∏è –≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ: {result.total_floors}")

            print("-" * 40)

            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            if result.bathroom:
                print(f"üöø –°–∞–Ω—É–∑–µ–ª: {result.bathroom}")
            if result.balcony:
                print(f"ü™ü –ë–∞–ª–∫–æ–Ω: {result.balcony}")
            if result.renovation:
                print(f"üî® –†–µ–º–æ–Ω—Ç: {result.renovation}")
            if result.construction_year:
                print(f"üèóÔ∏è –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {result.construction_year}")
            if result.house_type:
                print(f"üèòÔ∏è –¢–∏–ø –¥–æ–º–∞: {result.house_type}")
            if result.ceiling_height:
                print(f"üìè –í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤: {result.ceiling_height} –º")
            if result.furniture:
                print(f"ü™ë –ú–µ–±–µ–ª—å: {result.furniture}")

            print("-" * 40)

            # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            if result.address:
                print(f"üìç –ê–¥—Ä–µ—Å: {result.address}")
            if result.metro_station:
                print(f"üöá –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {result.metro_station}")
            if result.metro_time:
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ: {result.metro_time}")
            if result.metro_way:
                print(f"üö∂ –°–ø–æ—Å–æ–± –¥–æ–±—Ä–∞—Ç—å—Å—è: {result.metro_way}")

            print("-" * 40)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if result.tags:
                print(f"üè∑Ô∏è –ú–µ—Ç–∫–∏: {', '.join(result.tags)}")
            if result.description:
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result.description[:200]}...")
            if result.status is not None:
                print(f"üìä –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–æ' if result.status else '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'}")
            if result.views_today:
                print(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {result.views_today}")

            print("-" * 40)
            print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}")
            print(f"üåê URL: {result.url}")

            print("-" * 80)
            print("üìÑ JSON –¥–∞–Ω–Ω—ã–µ:")
            print(result.to_json())

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")

    except asyncio.TimeoutError:
        print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª –±–æ–ª—å—à–µ 60 —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        parser.cleanup()
        print("\nüßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Avito")
    print("=" * 80)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_avito_parsing())

    print("=" * 80)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")