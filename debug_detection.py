#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ç–µ–∫—Ç–æ–º –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
"""

import cv2
import numpy as np
import requests
from watermark_remover import watermark_remover

def debug_detection():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –¥–µ—Ç–µ–∫—Ç–æ–º"""
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–∞ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    print("=" * 60)
    
    url = "https://images.cdn-cian.ru/images/2504097329-1.jpg"
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print(f"üì• –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        image_data = response.content
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        nparr = np.frombuffer(image_data, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        height, width = image.shape[:2]
        print(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width} x {height}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å...")
        
        # –í—ã—Ä–µ–∑–∞–µ–º –ø—Ä–∞–≤—É—é –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        right_width = int(width * 0.15)  # 15% —Å–ø—Ä–∞–≤–∞
        bottom_height = int(height * 0.10)  # 10% —Å–Ω–∏–∑—É
        
        x_start = width - right_width
        y_start = height - bottom_height
        
        print(f"   –û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: ({x_start}, {y_start}) - ({width}, {height})")
        print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {right_width} x {bottom_height}")
        
        # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å
        roi = image[y_start:height, x_start:width]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
        roi_rgb = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏
        print(f"\nüé® –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏...")
        
        # –ò—â–µ–º –±–µ–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏
        white_threshold = 250
        white_pixels = np.sum(np.all(roi_rgb >= white_threshold, axis=2))
        total_pixels = roi_rgb.shape[0] * roi_rgb.shape[1]
        white_percentage = (white_pixels / total_pixels) * 100
        
        print(f"   –ë–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π (>=250): {white_pixels} –∏–∑ {total_pixels} ({white_percentage:.1f}%)")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –±–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        white_mask = np.all(roi_rgb >= white_threshold, axis=2).astype(np.uint8) * 255
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç—É—Ä—ã –≤ –º–∞—Å–∫–µ
        contours, _ = cv2.findContours(white_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç—É—Ä–æ–≤: {len(contours)}")
        
        if contours:
            print(f"\nüìê –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—É—Ä–æ–≤:")
            for i, c in enumerate(contours):
                area = cv2.contourArea(c)
                x, y, w, h = cv2.boundingRect(c)
                aspect_ratio = w / h if h > 0 else 0
                
                print(f"   –ö–æ–Ω—Ç—É—Ä {i+1}: –ø–ª–æ—â–∞–¥—å={area:.0f}, —Ä–∞–∑–º–µ—Ä={w}x{h}, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ={aspect_ratio:.2f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        mask_filename = "debug_white_mask.jpg"
        cv2.imwrite(mask_filename, white_mask)
        print(f"\nüíæ –ú–∞—Å–∫–∞ –±–µ–ª—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {mask_filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        roi_filename = "debug_roi.jpg"
        cv2.imwrite(roi_filename, roi)
        print(f"üíæ –û–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {roi_filename}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ç–µ–∫—É—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–µ–∫—Ç–∞...")
        watermark_region = watermark_remover.detect_cian_watermark_region(image)
        
        if watermark_region:
            x1, y1, x2, y2 = watermark_region
            print(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ä–Ω—É–ª –æ–±–ª–∞—Å—Ç—å: ({x1}, {y1}) - ({x2}, {y2})")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            vis_image = image.copy()
            cv2.rectangle(vis_image, (x1, y1), (x2, y2), (0, 255, 0), 3)
            cv2.putText(vis_image, f"Detected: ({x1},{y1})-({x2},{y2})", 
                       (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # –†–∏—Å—É–µ–º –æ–±–ª–∞—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
            cv2.rectangle(vis_image, (x_start, y_start), (width, height), (255, 0, 0), 2)
            cv2.putText(vis_image, f"ROI: ({x_start},{y_start})-({width},{height})", 
                       (x_start, y_start-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)
            
            vis_filename = "debug_visualization.jpg"
            cv2.imwrite(vis_filename, vis_image)
            print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {vis_filename}")
            
        else:
            print("‚ùå –ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±–ª–∞—Å—Ç—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_detection()
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
