#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito –≤ Excel —ç–∫—Å–ø–æ—Ä—Ç–µ
"""

import sys
import os
import asyncio
from datetime import datetime

# Add path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class TestLogger:
    """Logger –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.calls = []
        self.start_time = datetime.now()
    
    def log_call(self, function_name, url, additional_info=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        timestamp = datetime.now()
        elapsed = (timestamp - self.start_time).total_seconds()
        
        entry = {
            'timestamp': timestamp,
            'elapsed_seconds': elapsed,
            'function': function_name,
            'url': url,
            'info': additional_info
        }
        
        self.calls.append(entry)
        print(f"[{elapsed:6.1f}s] {function_name}: {url} {additional_info}")
    
    def check_duplicates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤"""
        print("\n" + "="*60)
        print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï")
        print("="*60)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ URL –∏ —Ñ—É–Ω–∫—Ü–∏–∏
        url_function_calls = {}
        for entry in self.calls:
            key = f"{entry['url']}::{entry['function']}"
            if key not in url_function_calls:
                url_function_calls[key] = []
            url_function_calls[key].append(entry)
        
        duplicates_found = False
        
        for key, calls in url_function_calls.items():
            if len(calls) > 1:
                url, function = key.split("::")
                duplicates_found = True
                print(f"\n‚ùå –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û:")
                print(f"   URL: {url}")
                print(f"   –§—É–Ω–∫—Ü–∏—è: {function}")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤: {len(calls)}")
                
                for i, call in enumerate(calls, 1):
                    print(f"     {i}. [{call['elapsed_seconds']:6.1f}s] {call['info']}")
        
        if not duplicates_found:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"   –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.calls)}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL+—Ñ—É–Ω–∫—Ü–∏—è: {len(url_function_calls)}")
        
        return not duplicates_found

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-–ª–æ–≥–≥–µ—Ä
test_logger = TestLogger()

async def test_excel_export_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Excel —ç–∫—Å–ø–æ—Ä—Ç–µ"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø AVITO")
    print("="*50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π URL Avito
    test_urls = [
        "https://www.avito.ru/moskva/kvartiry/4-k._kvartira_95_m_514_et._4805953955"
    ]
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å URL: {test_urls[0]}")
    print("–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞...\n")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from listings_processor import ListingsProcessor, export_listings_to_excel
        
        original_parse_avito = ListingsProcessor.parse_avito_listing
        original_extract_info = ListingsProcessor.extract_listing_info
        
        async def logged_parse_avito(self, url, skip_photos=True):
            """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è parse_avito_listing —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
            test_logger.log_call("parse_avito_listing", url, f"skip_photos={skip_photos}")
            result = await original_parse_avito(self, url, skip_photos)
            status = "SUCCESS" if result else "FAILED"
            test_logger.log_call("parse_avito_listing_result", url, status)
            return result
        
        async def logged_extract_info(self, url):
            """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è extract_listing_info —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
            test_logger.log_call("extract_listing_info", url, "CALLED")
            result = await original_extract_info(self, url)
            status = "SUCCESS" if result else "FAILED"
            test_logger.log_call("extract_listing_info_result", url, status)
            return result
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
        ListingsProcessor.parse_avito_listing = logged_parse_avito
        ListingsProcessor.extract_listing_info = logged_extract_info
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Excel —ç–∫—Å–ø–æ—Ä—Ç
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Excel —ç–∫—Å–ø–æ—Ä—Ç...")
        test_logger.log_call("export_listings_to_excel", test_urls[0], "START")
        
        user_id = 999999
        bio, request_id = await export_listings_to_excel(test_urls, user_id)
        
        test_logger.log_call("export_listings_to_excel", test_urls[0], "COMPLETED")
        
        if bio:
            print("‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ß–∏—Ç–∞–µ–º Excel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            import pandas as pd
            bio.seek(0)
            df = pd.read_excel(bio)
            print(f"üìä Excel —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} —Å—Ç—Ä–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
            if len(df) > 1:
                print("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–ï–°–ö–û–õ–¨–ö–û –°–¢–†–û–ö - –í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!")
                for i, row in df.iterrows():
                    print(f"   –°—Ç—Ä–æ–∫–∞ {i+1}: {row.get('URL', 'No URL')}")
            else:
                print("‚úÖ –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å")
        else:
            print("‚ùå Excel —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ—É–¥–∞—á–µ–Ω")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        ListingsProcessor.parse_avito_listing = original_parse_avito
        ListingsProcessor.extract_listing_info = original_extract_info
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success = test_logger.check_duplicates()
        return success

async def test_html_gallery_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ HTML –≥–∞–ª–µ—Ä–µ–µ"""
    
    print("\n" + "="*50)
    print("üß™ –¢–ï–°–¢ HTML –ì–ê–õ–ï–†–ï–ò (–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù)")
    print("="*50)
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
    return True

if __name__ == "__main__":
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    async def run_all_tests():
        results = []
        
        # –¢–µ—Å—Ç Excel —ç–∫—Å–ø–æ—Ä—Ç–∞
        excel_success = await test_excel_export_fix()
        results.append(("Excel Export", excel_success))
        
        # –¢–µ—Å—Ç HTML –≥–∞–ª–µ—Ä–µ–∏ (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        html_success = await test_html_gallery_fix()
        results.append(("HTML Gallery", html_success))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        all_passed = True
        for test_name, success in results:
            status = "‚úÖ PASSED" if success else "‚ùå FAILED"
            print(f"{test_name}: {status}")
            if not success:
                all_passed = False
        
        if all_passed:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
        
        return all_passed
    
    success = asyncio.run(run_all_tests())
    exit(0 if success else 1)