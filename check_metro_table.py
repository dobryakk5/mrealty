#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã metro –≤ –ë–î
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_metro_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã metro –≤ –ë–î"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π search_path
        search_path = await conn.fetchval("SHOW search_path")
        print(f"üîç –¢–µ–∫—É—â–∏–π search_path: {search_path}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π search_path
        await conn.execute("SET search_path TO public, information_schema")
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω search_path: public, information_schema")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'metro'
            );
        """)
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ metro –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await conn.close()
            return False
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ metro —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'metro'
            ORDER BY ordinal_position;
        """)
        
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã metro:")
        print("=" * 60)
        for col in columns:
            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
            default = f" DEFAULT {col['column_default']}" if col['column_default'] else ""
            print(f"‚Ä¢ {col['column_name']:<15} {col['data_type']:<20} {nullable}{default}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        try:
            count = await conn.fetchval("SELECT COUNT(*) FROM metro")
            print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {count}")
            
            if count > 0:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø–∏—Å–µ–π
                print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
                print("=" * 60)
                rows = await conn.fetch("SELECT * FROM metro LIMIT 5")
                for row in rows:
                    print(f"‚Ä¢ {dict(row)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {e}")
            print("üîç –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–∞–±–ª–∏—Ü–µ metro")
            
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
            try:
                schema = await conn.fetchval("""
                    SELECT table_schema 
                    FROM information_schema.tables 
                    WHERE table_name = 'metro'
                """)
                print(f"üîç –¢–∞–±–ª–∏—Ü–∞ metro –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ö–µ–º–µ: {schema}")
                
                if schema != 'public':
                    print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è: {schema}.metro")
            except Exception as schema_e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ö–µ–º—É: {schema_e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ê–≤–∏—Ç–æ
        required_fields = ['id', 'name', 'avito_id', 'is_msk']
        existing_fields = [col['column_name'] for col in columns]
        
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ê–≤–∏—Ç–æ:")
        print("=" * 60)
        for field in required_fields:
            if field in existing_fields:
                print(f"‚úÖ {field}")
            else:
                print(f"‚ùå {field} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã metro: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(check_metro_table())
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É metro")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
