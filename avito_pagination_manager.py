#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ê–≤–∏—Ç–æ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python avito_pagination_manager.py --status                    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–µ—Ç—Ä–æ
  python avito_pagination_manager.py --metro-id 1 --status      # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–æ
  python avito_pagination_manager.py --metro-id 1 --reset       # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ—Ç—Ä–æ
  python avito_pagination_manager.py --reset-all                # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–µ—Ç—Ä–æ
  python avito_pagination_manager.py --create-table             # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
"""

import asyncio
import argparse
import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
try:
    from parse_todb_avito import (
        get_avito_pagination_status,
        get_all_avito_pagination_status,
        reset_avito_pagination,
        create_ads_avito_table
    )
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª parse_todb_avito.py –¥–æ—Å—Ç—É–ø–µ–Ω")
    sys.exit(1)

async def show_metro_status(metro_id: int = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–æ"""
    if metro_id:
        # –°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–æ
        status = await get_avito_pagination_status(metro_id)
        if status:
            print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–æ ID {metro_id}:")
            print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {status['last_processed_page']}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {status['total_pages_processed']}")
            print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {status['last_updated']}")
        else:
            print(f"‚ÑπÔ∏è –î–ª—è –º–µ—Ç—Ä–æ ID {metro_id} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    else:
        # –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–µ—Ç—Ä–æ
        all_status = await get_all_avito_pagination_status()
        if all_status:
            print(f"\nüìä –°—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–æ ({len(all_status)}):")
            print("-" * 60)
            for status in all_status:
                print(f"–ú–µ—Ç—Ä–æ ID {status['metro_id']:>3}: "
                      f"—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {status['last_processed_page']:>3}, "
                      f"–≤—Å–µ–≥–æ {status['total_pages_processed']:>3}, "
                      f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ {status['last_updated'].strftime('%Y-%m-%d %H:%M')}")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ª—é–±–æ–≥–æ –º–µ—Ç—Ä–æ")

async def reset_metro_pagination(metro_id: int = None):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    if metro_id:
        success = await reset_avito_pagination(metro_id)
        if success:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–æ ID {metro_id} —Å–±—Ä–æ—à–µ–Ω")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–æ ID {metro_id}")
    else:
        success = await reset_avito_pagination()
        if success:
            print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–æ —Å–±—Ä–æ—à–µ–Ω")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–æ")

async def create_pagination_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    try:
        await create_ads_avito_table()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ê–≤–∏—Ç–æ',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    action_group = parser.add_mutually_exclusive_group(required=True)
    action_group.add_argument('--status', action='store_true',
                            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
    action_group.add_argument('--reset', action='store_true',
                            help='–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
    action_group.add_argument('--reset-all', action='store_true',
                            help='–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–æ')
    action_group.add_argument('--create-table', action='store_true',
                            help='–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--metro-id', type=int,
                       help='ID –º–µ—Ç—Ä–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
    if not os.getenv('DATABASE_URL'):
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return False
    
    try:
        if args.create_table:
            await create_pagination_table()
        elif args.status:
            await show_metro_status(args.metro_id)
        elif args.reset:
            if not args.metro_id:
                print("‚ùå –û—à–∏–±–∫–∞: –¥–ª—è --reset –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --metro-id")
                return False
            await reset_metro_pagination(args.metro_id)
        elif args.reset_all:
            await reset_metro_pagination()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
