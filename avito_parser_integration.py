#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Avito –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å listings_processor

–§—É–Ω–∫—Ü–∏–∏:
- –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î –∏ Excel
"""

import json
import os
import time
import re
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

class AvitoCardParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito –¥–ª—è listings_processor"""
    
    def __init__(self, skip_photos=False):
        self.driver = None
        self.cookies_file = "avito_cookies.json"
        self.skip_photos = skip_photos  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ
        self.session = None  # HTTP —Å–µ—Å—Å–∏—è –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –¥–ª—è Avito"""
        try:
            if not os.path.exists(self.cookies_file):
                print(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            if 'cookies' not in cookies_data:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ cookies")
                return False
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies: {len(cookies_data['cookies'])}")
            return cookies_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver"""
        try:
            options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            
            # Headless —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã (–Ω–æ–≤—ã–π headless)
            options.add_argument("--headless=new")
            
            # User-Agent
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--window-size=1920,1080")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)

            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Chrome binary
            if os.path.exists("/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"):
                options.binary_location = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
            else:
                options.binary_location = "/opt/google/chrome/google-chrome"

            print("üîß –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.driver = webdriver.Chrome(options=options)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã
            self.driver.implicitly_wait(10)  # –ù–µ—è–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.driver.set_page_load_timeout(30)  # –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.set_script_timeout(30)  # –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
            
            # –£–±–∏—Ä–∞–µ–º webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ –¥—Ä–∞–π–≤–µ—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            if not cookies_data or 'cookies' not in cookies_data:
                print("‚ùå –î–∞–Ω–Ω—ã–µ cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                return False
            
            print(f"üìä –ü—Ä–∏–º–µ–Ω—è–µ–º cookies: {len(cookies_data['cookies'])}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            original_timeout = self.driver.timeouts.page_load
            self.driver.set_page_load_timeout(15)  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 15 —Å–µ–∫—É–Ω–¥
            
            try:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
                print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AVITO...")
                try:
                    self.driver.get("https://avito.ru")
                except Exception as e:
                    print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ—Ç —É–∂–µ –±—ã—Ç—å –Ω–∞ Avito
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(2)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
                applied_count = 0
                for cookie in cookies_data['cookies']:
                    try:
                        if 'name' in cookie and 'value' in cookie:
                            cookie_dict = {
                                'name': cookie['name'],
                                'value': cookie['value'],
                                'domain': cookie.get('domain', ''),
                                'path': cookie.get('path', '/')
                            }
                            
                            if cookie.get('expiry'):
                                cookie_dict['expiry'] = cookie['expiry']
                            if cookie.get('secure'):
                                cookie_dict['secure'] = cookie['secure']
                            if cookie.get('httpOnly'):
                                cookie_dict['httpOnly'] = cookie['httpOnly']
                            
                            self.driver.add_cookie(cookie_dict)
                            applied_count += 1
                            
                    except Exception as e:
                        continue
                
                print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {applied_count}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ cookies —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    self.driver.refresh()
                    time.sleep(3)
                except Exception as e:
                    print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                
                return applied_count > 0
                
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                self.driver.set_page_load_timeout(original_timeout)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False —Å—Ä–∞–∑—É - –¥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ cookies
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ cookies")
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
    
    def parse_card(self, url):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito"""
        return self.parse_avito_page(url)
    
    def parse_avito_page_light(self, url):
        """–õ–µ–≥–∫–∏–π HTTP –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ Selenium. Fallback –∫ Selenium –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."""
        try:
            print(f"üåê –ü–æ–ø—ã—Ç–∫–∞ –ª–µ–≥–∫–æ–≥–æ HTTP –ø–∞—Ä—Å–∏–Ω–≥–∞: {url}")
            
            # –ü—Ä–æ–±—É–µ–º HTTP –ø–∞—Ä—Å–∏–Ω–≥
            result = self._http_parse(url)
            if result and result.get('success', False):
                print("‚úÖ –õ–µ–≥–∫–∏–π HTTP –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω")
                return result
            
            print("‚ö†Ô∏è HTTP –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Selenium...")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ HTTP –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Selenium...")
        
        # Fallback –∫ Selenium
        return self.parse_avito_page(url)
    
    def _http_parse(self, url):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å"""
        try:
            if not self.session:
                self.session = self._create_http_session()
            
            response = self.session.get(url)
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ Avito
            if 'captcha' in response.text.lower() or '—Ä–æ–±–æ—Ç' in response.text.lower():
                print("‚ùå HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–∫–∞–ø—á–∞)")
                return None
            
            # –ü–∞—Ä—Å–∏–º HTML
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if soup.find(string=lambda text: text and '–Ω–µ –Ω–∞–π–¥–µ–Ω' in text.lower()):
                print("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (404)")
                return {'success': False, 'reason': '404'}
            
            # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = self._extract_basic_data_http(soup, url)
            if data:
                return {'success': True, 'data': data}
            
            return {'success': False, 'reason': 'no_data'}
            
        except Exception as e:
            print(f"‚ùå HTTP –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            return None
    
    def _create_http_session(self):
        """–°–æ–∑–¥–∞–µ—Ç HTTP —Å–µ—Å—Å–∏—é —Å –Ω—É–∂–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        import requests
        
        session = requests.Session()
        session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            if os.path.exists(self.cookies_file):
                with open(self.cookies_file, 'r', encoding='utf-8') as f:
                    cookies_data = json.load(f)
                for cookie in cookies_data.get('cookies', []):
                    session.cookies.set(cookie['name'], cookie['value'], domain=cookie.get('domain'))
                print(f"üç™ –ó–∞–≥—Ä—É–∂–µ–Ω–æ cookies –¥–ª—è HTTP: {len(cookies_data.get('cookies', []))}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies –¥–ª—è HTTP: {e}")
        
        return session
    
    def _extract_basic_data_http(self, soup, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML —á–µ—Ä–µ–∑ BeautifulSoup"""
        try:
            data = {'url': url}
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = soup.find('h1') or soup.find('[data-marker="item-view/title"]')
            if title_elem:
                data['title'] = title_elem.get_text(strip=True)
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title_parsed = self.parse_title(data['title'])
                data.update(title_parsed)
            
            # –¶–µ–Ω–∞  
            price_selectors = [
                '[data-marker="item-view/item-price"]',
                '.price-value-string',
                '[class*="price"]'
            ]
            
            for selector in price_selectors:
                price_elem = soup.select_one(selector)
                if price_elem:
                    price_text = price_elem.get_text(strip=True)
                    if price_text and '—Ü–µ–Ω–∞' not in price_text.lower():
                        data['price'] = price_text
                        break
            
            # –ê–¥—Ä–µ—Å –∏–∑ –º–µ—Ç–∞ —Ç–µ–≥–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –ò—â–µ–º –∞–¥—Ä–µ—Å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            address_text = self._find_address_http(soup)
            if address_text:
                data['address'] = address_text
                # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∞–¥—Ä–µ—Å–∞  
                metro_data = self._parse_metro_from_text(address_text)
                if metro_data:
                    data.update(metro_data)
            
            return data if data.get('price') else None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö HTTP: {e}")
            return None
    
    def _find_address_http(self, soup):
        """–ò—â–µ—Ç –∞–¥—Ä–µ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã"""
        try:
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            selectors = [
                '[itemprop="address"]',
                '[data-marker*="address"]', 
                '.item-address',
                '[class*="address"]'
            ]
            
            for selector in selectors:
                elem = soup.select_one(selector)
                if elem:
                    text = elem.get_text(strip=True)
                    if text and len(text) > 10:
                        return text
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return None
    
    def _parse_metro_from_text(self, text):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            import re
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–µ—Ç—Ä–æ
            metro_patterns = [
                r'(.+?)(\d+)\s*–º–∏–Ω\.',  # "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏–¥–æ 5 –º–∏–Ω."
                r'(.+?)\s*-\s*(\d+)\s*–º–∏–Ω\.',  # "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏ - 5 –º–∏–Ω."
            ]
            
            for pattern in metro_patterns:
                match = re.search(pattern, text)
                if match:
                    station = match.group(1).replace('–¥–æ', '').strip()
                    time_min = int(match.group(2))
                    return {
                        'metro_station': station,
                        'metro_time': time_min,
                        'metro_way': '–ø–µ—à–∫–æ–º'
                    }
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–æ: {e}")
            return None
    
    def parse_title(self, title_text):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            title_data = {}
            
            # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
            # –ò—â–µ–º "4-–∫." –∏–ª–∏ "—Å—Ç—É–¥–∏—è"
            rooms_match = re.search(r'(\d+)-–∫\.', title_text)
            if rooms_match:
                title_data['rooms'] = int(rooms_match.group(1))
            elif '—Å—Ç—É–¥–∏—è' in title_text.lower():
                title_data['rooms'] = 0
            else:
                title_data['rooms'] = None
            
            # 2. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å
            # –ò—â–µ–º "95 –º¬≤" –∏–ª–∏ "95–º¬≤"
            area_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', title_text)
            if area_match:
                title_data['total_area'] = float(area_match.group(1).replace(',', '.'))
            else:
                title_data['total_area'] = None
            
            # 3. –≠—Ç–∞–∂ –∏ –≤—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π
            # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "5/14 —ç—Ç.", "5 –∏–∑ 14", "5/N/A", "5 –∏–∑ 5/N/A"
            floor_match = re.search(r'(\d+)\s*(?:[\/–∏–∑]\s*(\d+)|(?:\/N\/A))', title_text)
            if floor_match:
                title_data['floor'] = int(floor_match.group(1))
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π)
                if floor_match.group(2):
                    title_data['total_floors'] = int(floor_match.group(2))
                else:
                    title_data['total_floors'] = None
            else:
                title_data['floor'] = None
                title_data['total_floors'] = None
            
            return title_data
            
        except Exception as e:
            return {
                'rooms': None,
                'total_area': None,
                'floor': None,
                'total_floors': None
            }
    
    def parse_address(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            address_data = {}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = address_text.strip().split('\n')
            
            if len(lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ª–∏—Ü–∞ –∏ –¥–æ–º
                street_line = lines[0].strip()
                street_parts = street_line.split(',')
                if len(street_parts) >= 2:
                    street = street_parts[0].strip()
                    house = street_parts[1].strip()
                    address_data['street_house'] = f"{street}, {house}"
                else:
                    address_data['street_house'] = street_line
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                metro_line = lines[1].strip()
                metro_parts = metro_line.split(',')
                metro_name = None
                time_to_metro = None
                
                for part in metro_parts:
                    part = part.strip()
                    if part:
                        # –ò—â–µ–º –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
                        time_match = re.search(r'(\d+)\s*–º–∏–Ω', part)
                        if time_match:
                            time_to_metro = int(time_match.group(1))
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è, —Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
                            if not metro_name and not re.search(r'\d+', part):
                                metro_name = part
                
                address_data['metro_name'] = metro_name if metro_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = str(time_to_metro) if time_to_metro else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                
            else:
                address_data['street_house'] = address_text.strip()
                address_data['metro_name'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            return address_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return {
                'street_house': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_name': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'time_to_metro': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_tags_from_params(self, params_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–≥–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            if not params_text or params_text == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                return []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = params_text.strip().split('\n')
            tags = []
            
            # –ò—â–µ–º —Ç–µ–≥–∏ - –æ–Ω–∏ –∏–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã "–∑–∞ –º¬≤"
            found_price_line = False
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π "–∑–∞ –º¬≤"
                if '–∑–∞ –º¬≤' in line:
                    found_price_line = True
                    continue
                
                # –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–æ–π –∏—â–µ–º —Ç–µ–≥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                if found_price_line:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–≥–æ–º
                    if len(line) < 50 and not self.is_address_line(line):
                        tags.append(line)
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ —Ç–µ–≥–æ–≤
                        break
            
            return tags
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤: {e}")
            return []
    
    def is_address_line(self, line):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–æ–º"""
        try:
            line_lower = line.lower()
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∞–¥—Ä–µ—Å–∞
            street_indicators = ['—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.']
            time_pattern = r'\d+\s*–º–∏–Ω'
            
            has_street = any(indicator in line_lower for indicator in street_indicators)
            has_time = bool(re.search(time_pattern, line_lower))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –ø—Ä–∏–∑–Ω–∞–∫–∞ –∞–¥—Ä–µ—Å–∞, —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–æ–º
            if has_street or has_time:
                return True
            
            return False
            
        except Exception as e:
            return False
    
    def parse_seller_info(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ"""
        try:
            seller_data = {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                if params_elem:
                    params_text = params_elem.text.strip()
                    seller_data['full_text'] = params_text
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–µ–≥–∞–º
                    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in params_text.lower():
                        seller_data['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in params_text.lower() or '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in params_text.lower():
                        seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    else:
                        seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    
                else:
                    seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    
            except:
                seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            
            return seller_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return {
                'type': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'full_text': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def clean_url_path(self, url_path: str) -> str:
        """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—É—Ç—å"""
        if not url_path:
            return ""
        if "?" in url_path:
            url_path = url_path.split("?")[0]
        return url_path
    
    def prepare_data_for_db(self, parsed_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        try:
            if not parsed_data:
                return None
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π "–ù–µ –Ω–∞–π–¥–µ–Ω–æ" –∏ –ø–æ–¥–æ–±–Ω—ã—Ö
            def clean_value(value):
                if value in ['–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö', '–ù–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ']:
                    return ''
                return value
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            db_data = {
                'url': clean_value(parsed_data.get('url', '')),
                'title': clean_value(parsed_data.get('title', '')),
                'price': clean_value(parsed_data.get('price', '')),
                'description': clean_value(parsed_data.get('description', '')),
                'source': 1,  # Avito
            }
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if 'rooms' in parsed_data:
                db_data['rooms'] = parsed_data['rooms']
            if 'total_area' in parsed_data:
                db_data['total_area'] = parsed_data['total_area']
            if 'floor' in parsed_data:
                db_data['floor'] = parsed_data['floor']
            if 'total_floors' in parsed_data:
                db_data['total_floors'] = parsed_data['total_floors']
            
            # –ï—Å–ª–∏ —ç—Ç–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –ø—Ä–æ–±—É–µ–º –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã
            if 'floor' not in parsed_data or parsed_data['floor'] is None:
                apartment_params = parsed_data.get('apartment_params', {})
                if '–≠—Ç–∞–∂' in apartment_params:
                    floor_text = apartment_params['–≠—Ç–∞–∂']
                    # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "5 –∏–∑ 5", "5/N/A", "5 –∏–∑ 5/N/A"
                    floor_match = re.search(r'(\d+)\s*(?:–∏–∑\s*(\d+)|(?:\/N\/A))', floor_text)
                    if floor_match:
                        db_data['floor'] = int(floor_match.group(1))
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π)
                        if floor_match.group(2):
                            db_data['total_floors'] = int(floor_match.group(2))
                        else:
                            db_data['total_floors'] = None
                    else:
                        db_data['floor'] = None
                        db_data['total_floors'] = None
            
            # –ê–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ
            address_data = parsed_data.get('address_data', {})
            if address_data:
                db_data['address'] = clean_value(address_data.get('address', ''))
                db_data['metro_station'] = address_data.get('metro_station')
                db_data['metro_time'] = address_data.get('metro_time')
                db_data['metro_way'] = address_data.get('metro_way')
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
            apartment_params = parsed_data.get('apartment_params', {})
            if apartment_params:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç' in apartment_params:
                    db_data['rooms_from_params'] = apartment_params['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç']
                if '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å' in apartment_params:
                    area_text = apartment_params['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å']
                    if '–º¬≤' in area_text:
                        area_match = re.search(r'(\d+(?:[.,]\d+)?)', area_text)
                        if area_match:
                            db_data['total_area_from_params'] = float(area_match.group(1).replace(',', '.'))
                if '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏' in apartment_params:
                    kitchen_text = apartment_params['–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏']
                    if '–º¬≤' in kitchen_text:
                        kitchen_match = re.search(r'(\d+(?:[.,]\d+)?)', kitchen_text)
                        if kitchen_match:
                            db_data['kitchen_area'] = float(kitchen_match.group(1).replace(',', '.'))
                if '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å' in apartment_params:
                    living_text = apartment_params['–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å']
                    if '–º¬≤' in living_text:
                        living_match = re.search(r'(\d+(?:[.,]\d+)?)', living_text)
                        if living_match:
                            db_data['living_area'] = float(living_match.group(1).replace(',', '.'))
                if '–≠—Ç–∞–∂' in apartment_params:
                    floor_text = apartment_params['–≠—Ç–∞–∂']
                    # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "5 –∏–∑ 5", "5/N/A", "5 –∏–∑ 5/N/A"
                    floor_match = re.search(r'(\d+)\s*(?:–∏–∑\s*(\d+)|(?:\/N\/A))', floor_text)
                    if floor_match:
                        db_data['floor_from_params'] = int(floor_match.group(1))
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π)
                        if floor_match.group(2):
                            db_data['total_floors_from_params'] = int(floor_match.group(2))
                        else:
                            db_data['total_floors_from_params'] = None
                    else:
                        db_data['floor_from_params'] = None
                        db_data['total_floors_from_params'] = None
                if '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤' in apartment_params:
                    ceiling_text = apartment_params['–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤']
                    ceiling_match = re.search(r'(\d+(?:[.,]\d+)?)', ceiling_text)
                    if ceiling_match:
                        db_data['ceiling_height'] = float(ceiling_match.group(1).replace(',', '.'))
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if '–ë–∞–ª–∫–æ–Ω –∏–ª–∏ –ª–æ–¥–∂–∏—è' in apartment_params:
                    db_data['balcony'] = apartment_params['–ë–∞–ª–∫–æ–Ω –∏–ª–∏ –ª–æ–¥–∂–∏—è']
                if '–¢–∏–ø –∫–æ–º–Ω–∞—Ç' in apartment_params:
                    db_data['room_type'] = apartment_params['–¢–∏–ø –∫–æ–º–Ω–∞—Ç']
                if '–°–∞–Ω—É–∑–µ–ª' in apartment_params:
                    db_data['bathroom'] = apartment_params['–°–∞–Ω—É–∑–µ–ª']
                if '–û–∫–Ω–∞' in apartment_params:
                    db_data['windows'] = apartment_params['–û–∫–Ω–∞']
                if '–†–µ–º–æ–Ω—Ç' in apartment_params:
                    db_data['renovation'] = apartment_params['–†–µ–º–æ–Ω—Ç']
                if '–ú–µ–±–µ–ª—å' in apartment_params:
                    db_data['furniture'] = apartment_params['–ú–µ–±–µ–ª—å']
                if '–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏' in apartment_params:
                    db_data['sale_type'] = apartment_params['–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏']
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞
            house_params = parsed_data.get('house_params', {})
            if house_params:
                if '–¢–∏–ø –¥–æ–º–∞' in house_params:
                    db_data['house_type'] = house_params['–¢–∏–ø –¥–æ–º–∞']
                if '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏' in house_params:
                    year_text = house_params['–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏']
                    year_match = re.search(r'(\d{4})', year_text)
                    if year_match:
                        db_data['construction_year'] = int(year_match.group(1))
                if '–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ' in house_params:
                    floors_text = house_params['–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ']
                    # –ò—â–µ–º —á–∏—Å–ª–æ –∏–ª–∏ "N/A"
                    if floors_text != 'N/A' and floors_text != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                        floors_match = re.search(r'(\d+)', floors_text)
                        if floors_match:
                            db_data['house_floors'] = int(floors_match.group(1))
                        else:
                            db_data['house_floors'] = None
                    else:
                        db_data['house_floors'] = None
                if '–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç' in house_params:
                    db_data['passenger_elevator'] = house_params['–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç']
                if '–ì—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç' in house_params:
                    db_data['cargo_elevator'] = house_params['–ì—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç']
                if '–í –¥–æ–º–µ' in house_params:
                    db_data['house_amenities'] = house_params['–í –¥–æ–º–µ']
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–∑–µ –∏–∑ "–í –¥–æ–º–µ"
                    house_amenities_text = house_params['–í –¥–æ–º–µ'].lower()
                    if '–≥–∞–∑' in house_amenities_text:
                        db_data['gas_supply'] = '–ï—Å—Ç—å'
                    else:
                        db_data['gas_supply'] = '–ù–µ—Ç'
                if '–î–≤–æ—Ä' in house_params:
                    db_data['yard_amenities'] = house_params['–î–≤–æ—Ä']
                if '–ü–∞—Ä–∫–æ–≤–∫–∞' in house_params:
                    db_data['parking'] = house_params['–ü–∞—Ä–∫–æ–≤–∫–∞']
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publication_info = parsed_data.get('publication_info', {})
            if publication_info:
                if 'publication_date' in publication_info:
                    db_data['publication_date'] = publication_info['publication_date']
                if 'today_views' in publication_info:
                    db_data['today_views'] = publication_info['today_views']
            
            # –°—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            status_info = parsed_data.get('status_info', {})
            if status_info:
                status = status_info.get('status', 'active')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if status == 'active':
                    db_data['status'] = '–ê–∫—Ç–∏–≤–Ω–æ'
                elif status == 'inactive':
                    db_data['status'] = '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ'
                else:
                    db_data['status'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if 'reason' in status_info:
                    db_data['status_reason'] = status_info['reason']
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                db_data['status'] = '–ê–∫—Ç–∏–≤–Ω–æ'
            
            # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è HTML –≥–∞–ª–µ—Ä–µ–∏
            photos = parsed_data.get('photos', [])
            if photos:
                photo_urls = [photo[1] for photo in photos if photo[1]]
                db_data['photo_urls'] = photo_urls
                print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(photo_urls)} URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è HTML")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
            tags = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö Excel
            if apartment_params:
                # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
                unique_apartment_fields = {
                    '–¢–∏–ø –∫–æ–º–Ω–∞—Ç'  # –≠—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã
                }
                
                for key, value in apartment_params.items():
                    if (key in unique_apartment_fields and 
                        value and value not in ['–Ω–µ—Ç', '–ù–µ—Ç']):
                        tags.append(f"{key}: {value}")
            
            if house_params:
                # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–º–∞
                unique_house_fields = {
                    '–í –¥–æ–º–µ', '–î–≤–æ—Ä'  # –≠—Ç–∏ –ø–æ–ª—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–æ–º–∞
                }
                
                for key, value in house_params.items():
                    if (key in unique_house_fields and 
                        value and value not in ['–Ω–µ—Ç', '–ù–µ—Ç']):
                        tags.append(f"{key}: {value}")
            
            if tags:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ë–î
                db_data['tags'] = ', '.join(tags)
            
            return db_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î: {e}")
            return None
    
    def convert_relative_time_to_date(self, relative_time):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞—Ç—É"""
        try:
            if not relative_time:
                return None
                
            now = datetime.now()
            relative_time_lower = relative_time.lower().strip()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if '—Å–µ–≥–æ–¥–Ω—è' in relative_time_lower:
                return now
            elif '–≤—á–µ—Ä–∞' in relative_time_lower:
                return now - timedelta(days=1)
            elif '–ø–æ–∑–∞–≤—á–µ—Ä–∞' in relative_time_lower:
                return now - timedelta(days=2)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
            time_patterns = [
                (r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s*–Ω–∞–∑–∞–¥', 'hours'),
                (r'(\d+)\s*(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)\s*–Ω–∞–∑–∞–¥', 'days'),
                (r'(\d+)\s*(–Ω–µ–¥–µ–ª|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é)\s*–Ω–∞–∑–∞–¥', 'weeks'),
                (r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü)\s*–Ω–∞–∑–∞–¥', 'months')
            ]
            
            for pattern, unit in time_patterns:
                match = re.search(pattern, relative_time_lower)
                if match:
                    count = int(match.group(1))
                    
                    if unit == 'hours':
                        return now - timedelta(hours=count)
                    elif unit == 'days':
                        return now - timedelta(days=count)
                    elif unit == 'weeks':
                        return now - timedelta(weeks=count)
                    elif unit == 'months':
                        return now - timedelta(days=count * 30)
            
            return now
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return datetime.now()
    
    def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.driver:
                print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                self.driver.quit()
                self.driver = None
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.cleanup()

    def extract_photo_urls(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ Avito.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview-–≤–µ—Ä—Å–∏–∏ (1.5x –∏–∑ srcset),
        –∏—Å–∫–ª—é—á–∞—è –º–µ–ª–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (1x –≤–µ—Ä—Å–∏–∏).
        """
        try:
            photos = []
            
            # –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ preview)
            try:
                main_photo_wrapper = self.driver.find_element(By.CSS_SELECTOR, 'div[data-marker="image-frame/image-wrapper"]')
                if main_photo_wrapper:
                    # –ë–µ—Ä–µ–º src –∏–∑ img (—ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ preview)
                    main_img = main_photo_wrapper.find_element(By.TAG_NAME, 'img')
                    if main_img:
                        main_url = main_img.get_attribute('src')
                        if main_url and main_url.startswith('http'):
                            photos.append(('main', main_url))
                            print(f"üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ preview): {main_url}")
            except:
                pass
            
            # –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≥–∞–ª–µ—Ä–µ–µ - —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview (1.5x)
            gallery_items = self.driver.find_elements(By.CSS_SELECTOR, 'li[data-marker="image-preview/item"]')
            for i, item in enumerate(gallery_items):
                try:
                    img = item.find_element(By.TAG_NAME, 'img')
                    if img:
                        # –ò—â–µ–º —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é (1.5x) –≤ srcset
                        srcset = img.get_attribute('srcset')
                        medium_url = None
                        
                        if srcset:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º srcset –∏ –∏—â–µ–º –≤–µ—Ä—Å–∏—é 1.5x (—Å—Ä–µ–¥–Ω—è—è)
                            srcset_parts = srcset.split(', ')
                            for part in srcset_parts:
                                if ' ' in part:
                                    url = part.split(' ')[0]
                                    size_indicator = part.split(' ')[1]
                                    
                                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 1.5x –≤–µ—Ä—Å–∏–∏ (—Å—Ä–µ–¥–Ω–∏–µ preview)
                                    if size_indicator == '1.5x':
                                        medium_url = url
                                        print(f"üì∏ –§–æ—Ç–æ {i+1} (—Å—Ä–µ–¥–Ω–µ–µ 1.5x): {medium_url}")
                                        break
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ 1.5x, –ù–ï –±–µ—Ä–µ–º –æ–±—ã—á–Ω—ã–π src (—ç—Ç–æ –º–µ–ª–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç)
                        # medium_url –æ—Å—Ç–∞–µ—Ç—Å—è None
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
                        if medium_url and medium_url not in [p[1] for p in photos]:
                            photos.append(('gallery', medium_url))
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ {i+1}: {e}")
                    continue
            
            print(f"üì∏ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–Ω–∏—Ö preview-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
            print("‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview (1.5x), –∏—Å–∫–ª—é—á–∞—è –º–µ–ª–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
            
            return photos
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            return []

    def extract_high_quality_photos(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å–ª–∞–π–¥–µ—Ä—É.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
        1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        2. –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —Å–ª–∞–π–¥–µ—Ä–µ
        3. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        4. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        """
        try:
            print("üì∏ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
            photos = []
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
            time.sleep(3)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            preview_items = self.driver.find_elements(By.CSS_SELECTOR, 'li[data-marker="image-preview/item"]')
            if not preview_items:
                print("‚ö†Ô∏è Preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥")
                return self.extract_photo_urls()
            
            print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(preview_items)} preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ)
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ
                main_photo = self.extract_current_main_photo()
                if main_photo:
                    photos.append(('main', main_photo))
                    print(f"üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ): {main_photo}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            for i, preview_item in enumerate(preview_items):
                try:
                    print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ {i+1}/{len(preview_items)}...")
                    
                    # –ö–ª–∏–∫–∞–µ–º –ø–æ preview –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º —Å–ª–∞–π–¥–µ—Ä–µ
                    self.driver.execute_script("arguments[0].click();", preview_item)
                    time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
                    current_photo = self.extract_current_main_photo()
                    if current_photo and current_photo not in [p[1] for p in photos]:
                        photos.append(('gallery', current_photo))
                        print(f"üì∏ –§–æ—Ç–æ {i+1} (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ): {current_photo}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ {i+1}: {e}")
                    continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            photos = self.navigate_with_arrows(photos)
            
            print(f"‚úÖ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {len(photos)}")
            return photos
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
            return self.extract_photo_urls()

    def extract_current_main_photo(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"""
        try:
            # –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            main_photo_wrapper = self.driver.find_element(By.CSS_SELECTOR, 'div[data-marker="image-frame/image-wrapper"]')
            if not main_photo_wrapper:
                return None
            
            # –ò—â–µ–º img —ç–ª–µ–º–µ–Ω—Ç
            img = main_photo_wrapper.find_element(By.TAG_NAME, 'img')
            if not img:
                return None
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å srcset –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            srcset = img.get_attribute('srcset')
            if srcset:
                # –ò—â–µ–º –≤–µ—Ä—Å–∏—é 2x –∏–ª–∏ 3x (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                srcset_parts = srcset.split(', ')
                high_quality_url = None
                
                for part in srcset_parts:
                    if ' ' in part:
                        url = part.split(' ')[0]
                        size_indicator = part.split(' ')[1]
                        
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 3x > 2x > 1.5x
                        if size_indicator == '3x':
                            high_quality_url = url
                            break
                        elif size_indicator == '2x' and not high_quality_url:
                            high_quality_url = url
                        elif size_indicator == '1.5x' and not high_quality_url:
                            high_quality_url = url
                
                if high_quality_url:
                    return high_quality_url
            
            # –ï—Å–ª–∏ srcset –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –æ–±—ã—á–Ω—ã–π src
            return img.get_attribute('src')
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ç–æ: {e}")
            return None

    def navigate_with_arrows(self, existing_photos):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–ª–∞–π–¥–µ—Ä—É –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
        """
        try:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
            
            # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            next_button = None
            prev_button = None
            
            # –ò—â–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            next_selectors = [
                'button[data-marker="image-frame/next"]',
                'button[class*="next"]',
                'button[class*="arrow"]',
                'div[class*="next"]',
                'div[class*="arrow"]'
            ]
            
            for selector in next_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for elem in elements:
                        if elem.is_displayed() and elem.is_enabled():
                            next_button = elem
                            break
                    if next_button:
                        break
                except:
                    continue
            
            if not next_button:
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '–≤–ø–µ—Ä–µ–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return existing_photos
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥
            max_attempts = 20  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫
            attempts = 0
            
            while attempts < max_attempts:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
                    if not next_button.is_enabled() or not next_button.is_displayed():
                        print("üõë –ö–Ω–æ–ø–∫–∞ '–≤–ø–µ—Ä–µ–¥' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        break
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
                    self.driver.execute_script("arguments[0].click();", next_button)
                    time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    current_photo = self.extract_current_main_photo()
                    if current_photo and current_photo not in [p[1] for p in existing_photos]:
                        existing_photos.append(('gallery', current_photo))
                        print(f"üì∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ (—Å—Ç—Ä–µ–ª–∫–∞): {current_photo}")
                    
                    attempts += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å –ª–∏ –º—ã
                    if len(existing_photos) > 50:  # –ú–∞–∫—Å–∏–º—É–º 50 —Ñ–æ—Ç–æ
                        print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                        break
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤–ø–µ—Ä–µ–¥: {e}")
                    break
            
            print(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–µ–ª–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(existing_photos)}")
            return existing_photos
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å—Ç—Ä–µ–ª–∫–∞–º–∏: {e}")
            return existing_photos

    def wait_for_image_loading(self, timeout=10):
        """
        –ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–∞–ª–µ—Ä–µ–µ
        """
        try:
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è preview-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            WebDriverWait(self.driver, timeout).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'li[data-marker="image-preview/item"]'))
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)
            
            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except TimeoutException:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return False

    def check_image_quality(self, image_url):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
        """
        try:
            if not image_url:
                return "unknown"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
            if "3x" in image_url or "2x" in image_url:
                return "high"
            elif "1.5x" in image_url:
                return "medium"
            elif "1x" in image_url:
                return "low"
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞, —Å—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–º
                return "medium"
                
        except Exception as e:
            return "unknown"

    def log_photo_extraction_summary(self, photos):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
        """
        try:
            if not photos:
                print("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            print("\nüìä –°–í–û–î–ö–ê –ü–û –§–û–¢–û–ì–†–ê–§–ò–Ø–ú:")
            print("=" * 50)
            
            quality_stats = {"high": 0, "medium": 0, "low": 0, "unknown": 0}
            
            for i, (photo_type, photo_url) in enumerate(photos):
                quality = self.check_image_quality(photo_url)
                quality_stats[quality] += 1
                
                print(f"{i+1:2d}. [{photo_type:8s}] [{quality:6s}] {photo_url}")
            
            print("=" * 50)
            print(f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
            print(f"–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_stats['high']}")
            print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_stats['medium']}")
            print(f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality_stats['low']}")
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ: {quality_stats['unknown']}")
            print("=" * 50)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")

    def extract_photos_with_slider_navigation(self):
        """
        –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ —Å–ª–∞–π–¥–µ—Ä—É.
        –ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.
        """
        try:
            print("üì∏ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if not self.wait_for_image_loading():
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥")
                return self.extract_photo_urls()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥ —Å preview-–∫–ª–∏–∫–∞–º–∏
            photos = self.extract_high_quality_photos()
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–ª–æ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            if len(photos) < 5:
                print("üîÑ –ü–æ–ª—É—á–µ–Ω–æ –º–∞–ª–æ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é...")
                photos = self.navigate_with_arrows(photos)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_photos = []
            seen_urls = set()
            
            for photo_type, photo_url in photos:
                if photo_url and photo_url not in seen_urls:
                    unique_photos.append((photo_type, photo_url))
                    seen_urls.add(photo_url)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            self.log_photo_extraction_summary(unique_photos)
            
            print(f"‚úÖ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(unique_photos)}")
            return unique_photos
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É –º–µ—Ç–æ–¥—É
            return self.extract_photo_urls()

    def extract_apartment_params(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            import time
            time.sleep(5)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            js_script = """
            function extractApartmentParams() {
                const result = {};
                const paramItems = document.querySelectorAll('li.cHzV4');
                
                paramItems.forEach((item, index) => {
                    try {
                        const fullText = item.textContent.trim();
                        if (fullText) {
                            const nameSpan = item.querySelector('span.Lg7Ax');
                            if (nameSpan) {
                                const paramName = nameSpan.textContent.replace(':', '').trim();
                                const paramValue = fullText.replace(nameSpan.textContent, '').trim();
                                
                                if (paramName && paramValue) {
                                    result[paramName] = paramValue;
                                }
                            } else {
                                if (fullText.includes(':')) {
                                    const parts = fullText.split(':', 1);
                                    const paramName = parts[0].trim();
                                    const paramValue = parts[1].trim();
                                    
                                    if (paramName && paramValue) {
                                        result[paramName] = paramValue;
                                    }
                                }
                            }
                        }
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', e);
                    }
                });
                
                return result;
            }
            return extractApartmentParams();
            """
            
            apartment_params = self.driver.execute_script(js_script)
            
            if apartment_params and isinstance(apartment_params, dict):
                return apartment_params
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                apartment_params = {}
                try:
                    param_items = self.driver.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                    
                    for item in param_items:
                        try:
                            full_text = item.text.strip()
                            if not full_text:
                                continue
                            
                            param_name = ""
                            param_value = ""
                            
                            try:
                                param_name_elem = item.find_element(By.CSS_SELECTOR, 'span.Lg7Ax')
                                param_name = param_name_elem.text.replace(':', '').strip()
                                
                                if param_name in full_text:
                                    param_value = full_text.replace(param_name_elem.text, '').strip()
                                    if param_value.startswith(':'):
                                        param_value = param_value[1:].strip()
                            except:
                                if ':' in full_text:
                                    parts = full_text.split(':', 1)
                                    param_name = parts[0].strip()
                                    param_value = parts[1].strip()
                            
                            param_value = param_value.replace('\xa0', ' ').strip()
                            
                            if param_name and param_value:
                                apartment_params[param_name] = param_value
                            
                        except Exception as e:
                            continue
                    
                except Exception as e:
                    pass
                
                return apartment_params
            
        except Exception as e:
            return {}

    def extract_house_params(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞ –∏–∑ –±–ª–æ–∫–∞ '–û –¥–æ–º–µ'"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            import time
            time.sleep(3)
            
            # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫)
            all_params_blocks = self.driver.find_elements(By.CSS_SELECTOR, 'div[id="bx_item-params"], div[data-marker*="params"], div[class*="params"]')
            
            house_params_block = None
            
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–û –¥–æ–º–µ"
            for i, block in enumerate(all_params_blocks):
                try:
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ h2
                    headers = block.find_elements(By.CSS_SELECTOR, 'h2')
                    for header in headers:
                        header_text = header.text.strip().lower()
                        if '–¥–æ–º–µ' in header_text:
                            house_params_block = block
                            break
                    if house_params_block:
                        break
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É HTML
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
                        html_content = block.get_attribute('outerHTML').lower()
                        if '–æ –¥–æ–º–µ' in html_content:
                            house_params_block = block
                            break
                    except Exception as e:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–º–∞
                        param_items = block.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                        if param_items:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –¥–æ–º–µ
                            block_text = block.text.lower()
                            house_keywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂']
                            
                            keyword_count = sum(1 for keyword in house_keywords if keyword in block_text)
                            if keyword_count >= 2:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                                house_params_block = block
                                break
                    except Exception as e:
                        continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞
                        block_text = block.text.strip()
                        if block_text:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –¥–æ–º–µ
                            house_keywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂', '–º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥', '–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç', '–≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç']
                            keyword_count = sum(1 for keyword in house_keywords if keyword.lower() in block_text.lower())
                            
                            if keyword_count >= 2:
                                house_params_block = block
                                break
                    except Exception as e:
                        continue
            
            if not house_params_block:
                return {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–º–∞
            js_script = """
            function extractHouseParams() {
                // –ò—â–µ–º –±–ª–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–º–∞
                const allParamsBlocks = document.querySelectorAll('div[id="bx_item-params"], div[data-marker*="params"], div[class*="params"]');
                let houseParamsBlock = null;
                
                for (let i = 0; i < allParamsBlocks.length; i++) {
                    const block = allParamsBlocks[i];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    const header = block.querySelector('h2');
                    if (header && header.textContent.toLowerCase().includes('–¥–æ–º–µ')) {
                        houseParamsBlock = block;
                        break;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    const blockText = block.textContent.toLowerCase();
                    const houseKeywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂', '–º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥', '–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç', '–≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç'];
                    const keywordCount = houseKeywords.filter(keyword => blockText.includes(keyword)).length;
                    
                    if (keywordCount >= 2) {
                        houseParamsBlock = block;
                        break;
                    }
                }
                
                if (!houseParamsBlock) return {};
                
                const result = {};
                
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                const paramItems = houseParamsBlock.querySelectorAll('li.cHzV4');
                
                paramItems.forEach((item, index) => {
                    try {
                        const fullText = item.textContent.trim();
                        if (fullText) {
                            // –ò—â–µ–º span —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            const nameSpan = item.querySelector('span.Lg7Ax');
                            if (nameSpan) {
                                const paramName = nameSpan.textContent.replace(':', '').trim();
                                const paramValue = fullText.replace(nameSpan.textContent, '').trim();
                                
                                if (paramName && paramValue) {
                                    result[paramName] = paramValue;
                                }
                            } else {
                                // –ï—Å–ª–∏ span –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
                                if (fullText.includes(':')) {
                                    const parts = fullText.split(':', 1);
                                    const paramName = parts[0].trim();
                                    const paramValue = parts[1].trim();
                                    
                                    if (paramName && paramValue) {
                                        result[paramName] = paramValue;
                                    }
                                }
                            }
                        }
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–º–∞:', e);
                    }
                });
                
                return result;
            }
            return extractHouseParams();
            """
            
            house_params = self.driver.execute_script(js_script)
            
            if house_params and isinstance(house_params, dict):
                return house_params
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é
                house_params = {}
                
                # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                try:
                    param_items = house_params_block.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                    
                    for i, item in enumerate(param_items):
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                            full_text = item.text.strip()
                            
                            if not full_text:
                                continue
                            
                            # –ò—â–µ–º span —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            param_name = ""
                            param_value = ""
                            
                            try:
                                param_name_elem = item.find_element(By.CSS_SELECTOR, 'span.Lg7Ax')
                                param_name = param_name_elem.text.replace(':', '').strip()
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                if param_name in full_text:
                                    param_value = full_text.replace(param_name_elem.text, '').strip()
                                    if param_value.startswith(':'):
                                        param_value = param_value[1:].strip()
                            except:
                                # –ï—Å–ª–∏ span –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
                                if ':' in full_text:
                                    parts = full_text.split(':', 1)
                                    param_name = parts[0].strip()
                                    param_value = parts[1].strip()
                            
                            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            param_value = param_value.replace('\xa0', ' ').strip()
                            
                            if param_name and param_value:
                                house_params[param_name] = param_value
                            
                        except Exception as e:
                            continue
                    
                except Exception as e:
                    pass
                
                return house_params
            
        except Exception as e:
            return {}

    def extract_address_and_metro(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ –∏–∑ —Å–µ–∫—Ü–∏–∏ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            import re
            print("üìç –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ...")
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ" —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
            location_content = None
            
            try:
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ê–≤–∏—Ç–æ
                location_selectors = [
                    '[data-marker*="location"]',
                    '[class*="location"]', 
                    'section:has(*:contains("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"))',
                    'div:has(h2:contains("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"))',
                    'div:has(h3:contains("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"))'
                ]
                
                for selector in location_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for elem in elements:
                            elem_text = elem.text.strip()
                            if elem_text and ('–º.' in elem_text or '–º–∏–Ω' in elem_text or '—É–ª.' in elem_text or '–ø—Ä–æ—Å–ø–µ–∫—Ç' in elem_text):
                                location_content = elem_text
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä {selector}: {elem_text[:50]}...")
                                break
                        if location_content:
                            break
                    except:
                        continue
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                if not location_content:
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    header_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ')]")
                    for header in header_elements:
                        if header.tag_name.lower() in ['h2', 'h3', 'h4', 'span', 'div']:
                            print(f"üîç –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ {header.tag_name}: {header.text.strip()}")
                            
                            # –ò—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                            search_strategies = [
                                # –°–ª–µ–¥—É—é—â–∏–µ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                                ('following-sibling', lambda i: f'./following-sibling::*[{i}]'),
                                # –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞  
                                ('parent-children', lambda i: f'./../*[position()>1][{i}]'),
                                # –≠–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                                ('parent-content', lambda i: f'./..//div[{i}]'),
                            ]
                            
                            for strategy_name, xpath_func in search_strategies:
                                for i in range(1, 6):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                    try:
                                        xpath = xpath_func(i)
                                        candidate = header.find_element(By.XPATH, xpath)
                                        candidate_text = candidate.text.strip()
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å/–º–µ—Ç—Ä–æ
                                        if (candidate_text and len(candidate_text) > 5 and 
                                            (('–º.' in candidate_text and '–º–∏–Ω' in candidate_text) or 
                                             '—É–ª.' in candidate_text or '–ø—Ä–æ—Å–ø–µ–∫—Ç' in candidate_text or
                                             any(word in candidate_text.lower() for word in ['–º–æ—Å–∫–≤–∞', '—Å–∞–Ω–∫—Ç', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥']))):
                                            location_content = candidate_text
                                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç ({strategy_name} #{i}): {candidate_text[:50]}...")
                                            break
                                    except Exception as e:
                                        continue
                                if location_content:
                                    break
                            if location_content:
                                break
                
                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                if not location_content:
                    print("üîç –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
                    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞–¥—Ä–µ—Å
                    all_text_elements = self.driver.find_elements(By.XPATH, "//*[contains(text(), '–º.') and contains(text(), '–º–∏–Ω')]")
                    for elem in all_text_elements:
                        elem_text = elem.text.strip()
                        if len(elem_text) > 10 and len(elem_text) < 200:  # –†–∞–∑—É–º–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞
                            location_content = elem_text
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —à–∏—Ä–æ–∫–∏–º –ø–æ–∏—Å–∫–æ–º: {elem_text[:50]}...")
                            break
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            
            if not location_content:
                print("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("üîç –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                return self._extract_address_old_way()
            
            print(f"üìç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {location_content}")
            return self._parse_location_section_text(location_content)
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ: {e}")
            return {
                'address': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
                'metro_stations': []
            }
    
    def _parse_location_section_text(self, section_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–∫—Ü–∏–∏ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
        try:
            import re
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏, –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            lines = []
            for line in section_text.split('\n'):
                line = line.strip()
                if line:
                    lines.append(line)
            
            print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫: {lines}")
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            filtered_lines = []
            for line in lines:
                if line.lower() not in ['—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'location']:
                    filtered_lines.append(line)
            
            if len(filtered_lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∞–¥—Ä–µ—Å
                address = filtered_lines[0].strip()
                print(f"üìç –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: {address}")
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É)
                metro_line = filtered_lines[1].strip()
                print(f"üöá –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –º–µ—Ç—Ä–æ: {metro_line}")
                
                # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è (—Å—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                metro_name = None
                time_to_metro = None
                
                # –ò—â–µ–º –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
                time_patterns = [
                    r'(\d+)\s*[-‚Äì‚Äî]\s*(\d+)\s*–º–∏–Ω\.?',  # "6‚Äì10 –º–∏–Ω." 
                    r'(\d+)\s*–º–∏–Ω\.?',  # "5 –º–∏–Ω."
                    r'–¥–æ\s*(\d+)\s*–º–∏–Ω\.?',  # "–¥–æ 5 –º–∏–Ω."
                    r'(\d+)\s*–º–∏–Ω—É—Ç',  # "5 –º–∏–Ω—É—Ç"
                ]
                
                # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                for pattern in time_patterns:
                    time_match = re.search(pattern, metro_line)
                    if time_match:
                        if '‚Äì' in pattern or '‚Äî' in pattern:
                            # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
                            min_time = int(time_match.group(1))
                            max_time = int(time_match.group(2))
                            time_to_metro = (min_time + max_time) // 2
                        else:
                            # –û–¥–Ω–æ –≤—Ä–µ–º—è
                            time_to_metro = int(time_match.group(1))
                        break
                
                # –¢–µ–ø–µ—Ä—å –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
                # "–†–∏–º—Å–∫–∞—è6‚Äì10 –º–∏–Ω." -> –Ω–∞–∑–≤–∞–Ω–∏–µ "–†–∏–º—Å–∫–∞—è"
                station_match = re.match(r'([–ê-–Ø–∞-—è—ë–Å\s]+?)(?=\d)', metro_line)
                if station_match:
                    metro_name = station_match.group(1).strip()
                else:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–∫—É, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π
                    if ',' in metro_line:
                        parts = metro_line.split(',')
                        for part in parts:
                            part = part.strip()
                            if part and not re.search(r'\d+\s*–º–∏–Ω', part):
                                # –≠—Ç–æ —á–∞—Å—Ç—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                clean_name = re.sub(r'\b(–¥–æ|–ø–µ—à–∫–æ–º|–º–∏–Ω\.?|–º–∏–Ω—É—Ç)\b', '', part).strip()
                                if clean_name and len(clean_name) > 1:
                                    metro_name = clean_name
                                    break
                
                print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ: —Å—Ç–∞–Ω—Ü–∏—è='{metro_name}', –≤—Ä–µ–º—è={time_to_metro}")
                
                return {
                    'address': address,
                    'metro_station': metro_name,
                    'metro_time': time_to_metro, 
                    'metro_way': '–ø–µ—à–∫–æ–º'
                }
                
            elif len(filtered_lines) == 1:
                # –¢–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å, –º–µ—Ç—Ä–æ –Ω–µ—Ç
                address = filtered_lines[0].strip()
                print(f"üìç –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å: {address}")
                return {
                    'address': address,
                    'metro_station': None,
                    'metro_time': None,
                    'metro_way': None
                }
            else:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                return {
                    'address': "–ù–µ –Ω–∞–π–¥–µ–Ω",
                    'metro_station': None,
                    'metro_time': None,
                    'metro_way': None
                }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–µ–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
            return {
                'address': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_station': None,
                'metro_time': None,
                'metro_way': None
            }
    
    def _extract_address_old_way(self):
        """–°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        try:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∞–¥—Ä–µ—Å–æ–º
            address_block = None
            try:
                address_block = self.driver.find_element(By.CSS_SELECTOR, 'div[itemprop="address"]')
                print("‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∞–¥—Ä–µ—Å–∞ —Å itemprop='address'")
            except Exception as e:
                print(f"‚ùå –ë–ª–æ–∫ –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
                print("üîç –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã...")
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞
                alternative_selectors = [
                    '[data-marker*="address"]',
                    '[class*="address"]',
                    '[class*="Address"]',
                    'div[itemprop*="address"]'
                ]
                
                for selector in alternative_selectors:
                    try:
                        address_block = self.driver.find_element(By.CSS_SELECTOR, selector)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–ª–æ–∫ –∞–¥—Ä–µ—Å–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                    except:
                        continue
                
                if not address_block:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ —Å –∞–¥—Ä–µ—Å–æ–º")
                    return {
                        'address': '–ë–ª–æ–∫ –∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω',
                        'metro_station': None,
                        'metro_time': None,
                        'metro_way': None
                    }
            
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–ª–æ–∫–∞ –∞–¥—Ä–µ—Å–∞
            block_text = address_block.text.strip()
            print(f"üìç –¢–µ–∫—Å—Ç –±–ª–æ–∫–∞ –∞–¥—Ä–µ—Å–∞: {block_text}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            if block_text and len(block_text) > 5:
                parsed_data = self._parse_location_section_text(block_text)
                return parsed_data
            else:
                return {
                    'address': '–¢–µ–∫—Å—Ç –∞–¥—Ä–µ—Å–∞ –ø—É—Å—Ç',
                    'metro_station': None,
                    'metro_time': None,
                    'metro_way': None
                }
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ä–æ–º —Å–ø–æ—Å–æ–±–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
            return {
                'address': '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è',
                'metro_station': None,
                'metro_time': None,
                'metro_way': None
            }
    
    def _extract_walking_time_minutes(self, time_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ '6‚Äì10 –º–∏–Ω.' –∏–ª–∏ '16‚Äì20 –º–∏–Ω.'"""
        try:
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å —á–∏—Å–ª–∞–º–∏ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ –≤—Ä–µ–º–µ–Ω–∏
            time_pattern = r'(\d+)(?:‚Äì(\d+))?\s*–º–∏–Ω'
            match = re.search(time_pattern, time_text)
            
            if match:
                min_time = int(match.group(1))
                max_time = int(match.group(2)) if match.group(2) else min_time
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                return min_time
            
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ '{time_text}': {e}")
            return None


    def parse_address_and_metro_from_text(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–µ—Ç—Ä–æ 10 –º–∏–Ω –ø–µ—à–∫–æ–º')"""
        try:
            address_data = {}
            metro_stations = []
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = [line.strip() for line in address_text.split('\n') if line.strip()]
            
            current_address = ""
            
            for line in lines:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –º–µ—Ç—Ä–æ
                metro_patterns = [
                    r'–ú–µ—Ç—Ä–æ\s+(\d+)\s*–º–∏–Ω\s*–ø–µ—à–∫–æ–º',  # "–ú–µ—Ç—Ä–æ 10 –º–∏–Ω –ø–µ—à–∫–æ–º"
                    r'([A-–Ø–∞-—è\s\d\-‚Ññ—ë–Å]+?)\s*,\s*(\d+)\s*–º–∏–Ω',  # "–£–ª–∏—Ü–∞ 1905 –≥–æ–¥–∞, 10 –º–∏–Ω"
                    r'–º\s*\.\s*([A-–Ø–∞-—è\s\d\-‚Ññ—ë–Å]+?)\s*,\s*(\d+)\s*–º–∏–Ω',  # "–º. –£–ª–∏—Ü–∞ 1905 –≥–æ–¥–∞, 10 –º–∏–Ω"
                    r'([A-–Ø–∞-—è\s\d\-‚Ññ—ë–Å]+?)(\d+)(?:‚Äì\d+)?\s*–º–∏–Ω',  # "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏6‚Äì10 –º–∏–Ω" - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                ]
                
                metro_found = False
                for pattern in metro_patterns:
                    metro_match = re.search(pattern, line, re.IGNORECASE)
                    if metro_match:
                        if len(metro_match.groups()) == 1:  # –ü–µ—Ä–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω - —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
                            minutes = metro_match.group(1)
                            station_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"  # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—Ä–µ–º—è
                            station_name = metro_match.group(1).strip()
                            minutes = metro_match.group(2)
                            
                            # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ "–¢–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏6‚Äì10 –º–∏–Ω" –æ—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
                            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –∏–∑ –∫–æ–Ω—Ü–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏
                            station_name = re.sub(r'\d+$', '', station_name).strip()
                        
                        metro_stations.append({
                            'name': station_name,
                            'walking_time': f"{minutes}‚Äì{minutes} –º–∏–Ω.",
                            'line_colors': []
                        })
                        metro_found = True
                        break
                
                if not metro_found:
                    # –≠—Ç–æ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–∞
                    if current_address:
                        current_address += f", {line}"
                    else:
                        current_address = line
            
            address_data['address'] = current_address if current_address else "–ù–µ –Ω–∞–π–¥–µ–Ω"
            address_data['metro_stations'] = metro_stations
            
            return address_data
            
        except Exception as e:
            return {}

    def extract_description(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            description_block = self.driver.find_element(By.CSS_SELECTOR, 'div[data-marker="item-view/item-description"]')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            js_script = """
            function extractDescription() {
                const descriptionBlock = document.querySelector('div[data-marker="item-view/item-description"]');
                if (!descriptionBlock) return '';
                
                // –ò—â–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                const paragraphs = descriptionBlock.querySelectorAll('p');
                if (paragraphs.length > 0) {
                    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                    const textParts = [];
                    paragraphs.forEach(p => {
                        const text = p.textContent.trim();
                        if (text) {
                            textParts.push(text);
                        }
                    });
                    return textParts.join('\\n\\n');
                } else {
                    // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    return descriptionBlock.textContent.trim();
                }
            }
            return extractDescription();
            """
            
            description_text = self.driver.execute_script(js_script)
            
            if description_text:
                return description_text
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                try:
                    paragraphs = description_block.find_elements(By.CSS_SELECTOR, 'p')
                    if paragraphs:
                        text_parts = []
                        for p in paragraphs:
                            text = p.text.strip()
                            if text:
                                text_parts.append(text)
                        return '\n\n'.join(text_parts)
                    else:
                        return description_block.text.strip()
                except:
                    return description_block.text.strip()
            
        except Exception as e:
            return ""

    def extract_publication_info(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            js_script = """
            function extractPublicationInfo() {
                const result = {};
                
                // –ò—â–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                const dateElement = document.querySelector('span[data-marker="item-view/item-date"]');
                if (dateElement) {
                    const dateText = dateElement.textContent.trim();
                    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                    result.publication_date = dateText.replace(/^[¬∑\\s]+/, '').trim();
                }
                
                // –ò—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                const viewSelectors = [
                    'span[data-marker="item-view/today-views"]',
                    'span[data-marker="item-view/views"]',
                    'span[class*="today-views"]',
                    'span[class*="views-today"]',
                    'div[data-marker="item-view/today-views"]',
                    '[data-testid="today-views"]'
                ];
                
                let todayViews = null;
                for (const selector of viewSelectors) {
                    const element = document.querySelector(selector);
                    if (element) {
                        const text = element.textContent.trim();
                        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                        const patterns = [
                            /\+(\d+)/,           // "+20"
                            /(\d+)\s*—Å–µ–≥–æ–¥–Ω—è/i,   // "20 —Å–µ–≥–æ–¥–Ω—è"
                            /(\d+)\s*–ø—Ä–æ—Å–º–æ—Ç—Ä/i, // "20 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
                            /—Å–µ–≥–æ–¥–Ω—è\s+(\d+)/i,  // "—Å–µ–≥–æ–¥–Ω—è 20"
                            /(\d+)/              // –ª—é–±–æ–µ —á–∏—Å–ª–æ
                        ];
                        
                        for (const pattern of patterns) {
                            const match = text.match(pattern);
                            if (match) {
                                todayViews = parseInt(match[1]);
                                break;
                            }
                        }
                        
                        if (todayViews !== null) {
                            result.today_views = todayViews;
                            break;
                        }
                    }
                }
                
                return result;
            }
            return extractPublicationInfo();
            """
            
            publication_info = self.driver.execute_script(js_script)
            
            if publication_info and isinstance(publication_info, dict):
                return publication_info
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                publication_info = {}
                try:
                    # –ò—â–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    date_selectors = [
                        'span[data-marker="item-view/item-date"]',
                        'span[class*="item-date"]',
                        'div[data-marker="item-view/item-date"]',
                        '[data-testid="item-date"]'
                    ]
                    
                    for selector in date_selectors:
                        try:
                            date_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                            if date_element:
                                date_text = date_element.text.strip()
                                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                                publication_info['publication_date'] = date_text.replace('¬∑', '').strip()
                                break
                        except:
                            continue
                    
                    # –ò—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                    today_views_selectors = [
                        'span[data-marker="item-view/today-views"]',
                        'span[data-marker="item-view/views"]',
                        'span[class*="today-views"]',
                        'span[class*="views-today"]',
                        'div[data-marker="item-view/today-views"]',
                        '[data-testid="today-views"]'
                    ]
                    
                    found_views = False
                    for selector in today_views_selectors:
                        try:
                            today_views_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                            if today_views_element:
                                today_views_text = today_views_element.text.strip()
                                print(f"üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: '{today_views_text}' (—Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                                
                                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞
                                patterns = [
                                    r'\+(\d+)',           # "+20"
                                    r'(\d+)\s*—Å–µ–≥–æ–¥–Ω—è',    # "20 —Å–µ–≥–æ–¥–Ω—è"
                                    r'(\d+)\s*–ø—Ä–æ—Å–º–æ—Ç—Ä',  # "20 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"
                                    r'—Å–µ–≥–æ–¥–Ω—è\s+(\d+)',   # "—Å–µ–≥–æ–¥–Ω—è 20"
                                    r'(\d+)'              # –ª—é–±–æ–µ —á–∏—Å–ª–æ
                                ]
                                
                                for pattern in patterns:
                                    today_views_match = re.search(pattern, today_views_text, re.IGNORECASE)
                                    if today_views_match:
                                        publication_info['today_views'] = int(today_views_match.group(1))
                                        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {publication_info['today_views']}")
                                        found_views = True
                                        break
                                
                                if found_views:
                                    break
                        except:
                            continue
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤–æ –≤—Å–µ–º —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if not found_views:
                        try:
                            page_text = self.driver.find_element(By.TAG_NAME, 'body').text
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            view_patterns = [
                                r'\+(\d+)\s*—Å–µ–≥–æ–¥–Ω—è',
                                r'(\d+)\s*–ø—Ä–æ—Å–º–æ—Ç—Ä.*—Å–µ–≥–æ–¥–Ω—è',
                                r'—Å–µ–≥–æ–¥–Ω—è.*?(\d+).*?–ø—Ä–æ—Å–º–æ—Ç—Ä'
                            ]
                            
                            for pattern in view_patterns:
                                match = re.search(pattern, page_text, re.IGNORECASE)
                                if match:
                                    publication_info['today_views'] = int(match.group(1))
                                    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {publication_info['today_views']}")
                                    found_views = True
                                    break
                        except:
                            pass
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã—Å—Ç–∞–≤–ª—è–µ–º 0 —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
                    if not found_views:
                        publication_info['today_views'] = 0
                        print("‚ö†Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {e}")
                    publication_info['today_views'] = 0
                
                return publication_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return {'today_views': 0}

    def quick_status_check(self):
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                page_title = self.driver.title.lower()
                if any(marker in page_title for marker in ['–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', '–æ—à–∏–±–∫–∞']):
                    return {'status': 'inactive', 'reason': f'–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}'}
            except Exception:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                title_selectors = [
                    'h1[data-marker="item-view/title-info"]',
                    'h1[class*="title"]',
                    'h1'
                ]
                
                title_found = False
                for selector in title_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        if elements and any(el.is_displayed() and el.text.strip() for el in elements):
                            title_found = True
                            break
                    except Exception:
                        continue
                
                if not title_found:
                    return {'status': 'inactive', 'reason': '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            except Exception:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
            try:
                page_source = self.driver.page_source.lower()
                error_phrases = ['–æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ', '—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', '–æ—à–∏–±–∫–∞ 404']
                for phrase in error_phrases:
                    if phrase in page_source:
                        return {'status': 'inactive', 'reason': f'–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: {phrase}'}
            except Exception:
                pass
            
            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ–π
            return {'status': 'active', 'reason': '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞'}
            
        except Exception as e:
            return {'status': 'unknown', 'reason': f'–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}

    def extract_listing_status(self, title_components=None):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        Args:
            title_components: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (rooms, floor, etc.)
            
        Returns:
            dict: {'status': 'active'/'inactive', 'reason': '–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã'}
        """
        try:
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫–æ–º–Ω–∞—Ç—ã, —ç—Ç–∞–∂), —Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
            if title_components:
                rooms = title_components.get('rooms')
                floor = title_components.get('floor')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                has_rooms_data = rooms is not None
                has_floor_data = floor is not None
                
                if has_rooms_data and has_floor_data:
                    return {
                        'status': 'active',
                        'reason': f'‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {rooms} –∫–æ–º–Ω., {floor} —ç—Ç–∞–∂'
                    }
                elif has_rooms_data or has_floor_data:
                    return {
                        'status': 'active', 
                        'reason': f'‚úÖ –ù–∞–π–¥–µ–Ω—ã —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –∫–æ–º–Ω–∞—Ç—ã={rooms}, —ç—Ç–∞–∂={floor}'
                    }
                else:
                    return {
                        'status': 'inactive',
                        'reason': '‚ùå –ù–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫–æ–º–Ω–∞—Ç—ã, —ç—Ç–∞–∂)'
                    }
            
            # –ï—Å–ª–∏ title_components –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
            try:
                title_element = self.driver.find_element(By.CSS_SELECTOR, 'h1[data-marker="item-view/title-info"]')
                title_text = title_element.text.strip()
                
                if title_text and title_text != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                    # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    components = self.parse_title(title_text)
                    return self.extract_listing_status(components)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
                else:
                    return {
                        'status': 'inactive',
                        'reason': '‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π'
                    }
                    
            except Exception as e:
                return {
                    'status': 'inactive',
                    'reason': f'‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {str(e)}'
                }
                
        except Exception as e:
            return {
                'status': 'unknown',
                'reason': f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'
            }

    def parse_avito_page(self, url):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito"""
        try:
            print(f"üîÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito: {url}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Selenium
            if not self.setup_selenium():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Selenium")
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies")
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookies")
                return None
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self.driver.set_page_load_timeout(30)  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            
            try:
                self.driver.get(url)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
                print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            except Exception as e:
                print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                return {
                    'url': url,
                    'title': '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                    'price': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'status_info': {'status': 'inactive', 'reason': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}'}
                }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
            print("‚è≥ –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DOM...")
            time.sleep(3)
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
            print("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É...")
            time.sleep(2)
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ–¥ –ø–æ–ª–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            quick_status = self.quick_status_check()
            if quick_status['status'] == 'inactive':
                print(f"üö´ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ: {quick_status['reason']}")
                return {
                    'url': url,
                    'title': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ',
                    'price': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'status_info': quick_status
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_element = self.driver.find_element(By.CSS_SELECTOR, 'h1[data-marker="item-view/title-info"]')
                title_text = title_element.text.strip()
                print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title_text}")
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                title_components = self.parse_title(title_text)
                print(f"üè† –ö–æ–º–Ω–∞—Ç—ã: {title_components.get('rooms')}")
                print(f"üìè –ü–ª–æ—â–∞–¥—å: {title_components.get('total_area')} –º¬≤")
                print(f"üè¢ –≠—Ç–∞–∂: {title_components.get('floor')}/{title_components.get('total_floors')}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
                title_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                title_components = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
                price_selectors = [
                    'span[data-marker="price-value"]',
                    'span[data-marker="item-price"]',
                    'span[class*="price-value"]',
                    'span[class*="price"]',
                    'div[data-marker="price-value"]',
                    'div[data-marker="item-price"]',
                    'div[class*="price-value"]',
                    'div[class*="price"]',
                    'span[itemprop="price"]',
                    'span[class*="amount"]'
                ]
                
                price_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                for selector in price_selectors:
                    try:
                        price_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in price_elements:
                            text = element.text.strip()
                            if text and text != "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã" and len(text) > 3:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã)
                                if any(char.isdigit() for char in text) and any(char in '‚ÇΩ$‚Ç¨' for char in text):
                                    price_text = text
                                    break
                        if price_text != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                            break
                    except:
                        continue
                
                print(f"üí∞ –¶–µ–Ω–∞: {price_text}")
            except:
                price_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                print("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
            if self.skip_photos:
                print("üì∏ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (skip_photos=True)")
                photos = []
            else:
                print("üì∏ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ...")
                photos = self.extract_photos_with_slider_navigation()
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {len(photos)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
            print("üè† –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã...")
            apartment_params = self.extract_apartment_params()
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {len(apartment_params)}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
            time.sleep(2)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞
            print("üè¢ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞...")
            house_params = self.extract_house_params()
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–º–∞: {len(house_params)}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
            time.sleep(2)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ
            print("üìç –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ...")
            address_data = self.extract_address_and_metro()
            print(f"‚úÖ –ê–¥—Ä–µ—Å: {address_data.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"‚úÖ –°—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ: {len(address_data.get('metro_stations', []))}")
            
            # –ï—Å–ª–∏ –º–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –º—ã –Ω–µ –¥–ª—è Excel, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
            if len(address_data.get('metro_stations', [])) == 0 and not self.skip_photos:
                print("üîÑ –ú–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(2)
                address_data = self.extract_address_and_metro()
                print(f"‚úÖ –°—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): {len(address_data.get('metro_stations', []))}")
            
            # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
            status_info = self.extract_listing_status(title_components)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {status_info.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {status_info.get('reason', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            
            # –î–ª—è Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if self.skip_photos:
                print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –¥–ª—è Excel: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ")
                description = ""
                publication_info = {}
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                print("üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...")
                description = self.extract_description()
                print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                print("üìÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                publication_info = self.extract_publication_info()
                print(f"‚úÖ –î–∞—Ç–∞: {publication_info.get('publication_date', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')}")
                print(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {publication_info.get('today_views', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            result = {
                'url': url,
                'title': title_text,
                'price': price_text,
                'photos': photos,
                'apartment_params': apartment_params,
                'house_params': house_params,
                'address_data': address_data,
                'description': description,
                'publication_info': publication_info,
                'status_info': status_info,
                **title_components  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
            }
            
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            self.cleanup()
