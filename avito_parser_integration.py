#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä Avito –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å listings_processor

–§—É–Ω–∫—Ü–∏–∏:
- –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î –∏ Excel
"""

import json
import os
import time
import re
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException

class AvitoCardParser:
    """–ü–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π Avito –¥–ª—è listings_processor"""
    
    def __init__(self):
        self.driver = None
        self.cookies_file = "avito_cookies.json"
        
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –¥–ª—è Avito"""
        try:
            if not os.path.exists(self.cookies_file):
                print(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            if 'cookies' not in cookies_data:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ cookies")
                return False
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies: {len(cookies_data['cookies'])}")
            return cookies_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver"""
        try:
            options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            
            # Headless —Ä–µ–∂–∏–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
            options.add_argument("--headless")
            
            # User-Agent
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--window-size=1920,1080")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            print("üîß –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ –¥—Ä–∞–π–≤–µ—Ä—É"""
        try:
            if not cookies_data or 'cookies' not in cookies_data:
                print("‚ùå –î–∞–Ω–Ω—ã–µ cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                return False
            
            print(f"üìä –ü—Ä–∏–º–µ–Ω—è–µ–º cookies: {len(cookies_data['cookies'])}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AVITO...")
            self.driver.get("https://avito.ru")
            time.sleep(3)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            applied_count = 0
            for cookie in cookies_data['cookies']:
                try:
                    if 'name' in cookie and 'value' in cookie:
                        cookie_dict = {
                            'name': cookie['name'],
                            'value': cookie['value'],
                            'domain': cookie.get('domain', ''),
                            'path': cookie.get('path', '/')
                        }
                        
                        if cookie.get('expiry'):
                            cookie_dict['expiry'] = cookie['expiry']
                        if cookie.get('secure'):
                            cookie_dict['secure'] = cookie['secure']
                        if cookie.get('httpOnly'):
                            cookie_dict['httpOnly'] = cookie['httpOnly']
                        
                        self.driver.add_cookie(cookie_dict)
                        applied_count += 1
                        
                except Exception as e:
                    continue
            
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {applied_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ cookies
            self.driver.refresh()
            time.sleep(3)
            
            return applied_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def parse_card(self, url):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito"""
        return self.parse_avito_page(url)
    
    def parse_title(self, title_text):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            title_data = {}
            
            # 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
            # –ò—â–µ–º "4-–∫." –∏–ª–∏ "—Å—Ç—É–¥–∏—è"
            rooms_match = re.search(r'(\d+)-–∫\.', title_text)
            if rooms_match:
                title_data['rooms'] = int(rooms_match.group(1))
            elif '—Å—Ç—É–¥–∏—è' in title_text.lower():
                title_data['rooms'] = 0
            else:
                title_data['rooms'] = None
            
            # 2. –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å
            # –ò—â–µ–º "95 –º¬≤" –∏–ª–∏ "95–º¬≤"
            area_match = re.search(r'(\d+(?:[.,]\d+)?)\s*–º¬≤', title_text)
            if area_match:
                title_data['total_area'] = float(area_match.group(1).replace(',', '.'))
            else:
                title_data['total_area'] = None
            
            # 3. –≠—Ç–∞–∂ –∏ –≤—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π
            # –ò—â–µ–º "5/14 —ç—Ç." –∏–ª–∏ "5 –∏–∑ 14"
            floor_match = re.search(r'(\d+)\s*[\/–∏–∑]\s*(\d+)\s*—ç—Ç', title_text)
            if floor_match:
                title_data['floor'] = int(floor_match.group(1))
                title_data['total_floors'] = int(floor_match.group(2))
            else:
                title_data['floor'] = None
                title_data['total_floors'] = None
            
            return title_data
            
        except Exception as e:
            return {
                'rooms': None,
                'total_area': None,
                'floor': None,
                'total_floors': None
            }
    
    def parse_address(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            address_data = {}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = address_text.strip().split('\n')
            
            if len(lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ª–∏—Ü–∞ –∏ –¥–æ–º
                street_line = lines[0].strip()
                street_parts = street_line.split(',')
                if len(street_parts) >= 2:
                    street = street_parts[0].strip()
                    house = street_parts[1].strip()
                    address_data['street_house'] = f"{street}, {house}"
                else:
                    address_data['street_house'] = street_line
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                metro_line = lines[1].strip()
                metro_parts = metro_line.split(',')
                metro_name = None
                time_to_metro = None
                
                for part in metro_parts:
                    part = part.strip()
                    if part:
                        # –ò—â–µ–º –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
                        time_match = re.search(r'(\d+)\s*–º–∏–Ω', part)
                        if time_match:
                            time_to_metro = int(time_match.group(1))
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è, —Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
                            if not metro_name and not re.search(r'\d+', part):
                                metro_name = part
                
                address_data['metro_name'] = metro_name if metro_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = str(time_to_metro) if time_to_metro else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                
            else:
                address_data['street_house'] = address_text.strip()
                address_data['metro_name'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            return address_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return {
                'street_house': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_name': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'time_to_metro': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_tags_from_params(self, params_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–≥–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            if not params_text or params_text == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                return []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = params_text.strip().split('\n')
            tags = []
            
            # –ò—â–µ–º —Ç–µ–≥–∏ - –æ–Ω–∏ –∏–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ü–µ–Ω—ã "–∑–∞ –º¬≤"
            found_price_line = False
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π "–∑–∞ –º¬≤"
                if '–∑–∞ –º¬≤' in line:
                    found_price_line = True
                    continue
                
                # –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–æ–π –∏—â–µ–º —Ç–µ–≥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                if found_price_line:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–≥–æ–º
                    if len(line) < 50 and not self.is_address_line(line):
                        tags.append(line)
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ —Ç–µ–≥–æ–≤
                        break
            
            return tags
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤: {e}")
            return []
    
    def is_address_line(self, line):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–æ–º"""
        try:
            line_lower = line.lower()
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∞–¥—Ä–µ—Å–∞
            street_indicators = ['—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.']
            time_pattern = r'\d+\s*–º–∏–Ω'
            
            has_street = any(indicator in line_lower for indicator in street_indicators)
            has_time = bool(re.search(time_pattern, line_lower))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –ø—Ä–∏–∑–Ω–∞–∫–∞ –∞–¥—Ä–µ—Å–∞, —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–æ–º
            if has_street or has_time:
                return True
            
            return False
            
        except Exception as e:
            return False
    
    def parse_seller_info(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ"""
        try:
            seller_data = {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                if params_elem:
                    params_text = params_elem.text.strip()
                    seller_data['full_text'] = params_text
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–µ–≥–∞–º
                    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in params_text.lower():
                        seller_data['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in params_text.lower() or '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in params_text.lower():
                        seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    else:
                        seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    
                else:
                    seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    
            except:
                seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            
            return seller_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return {
                'type': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'full_text': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def clean_url_path(self, url_path: str) -> str:
        """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—É—Ç—å"""
        if not url_path:
            return ""
        if "?" in url_path:
            url_path = url_path.split("?")[0]
        return url_path
    
    def prepare_data_for_db(self, parsed_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"""
        try:
            if not parsed_data:
                return None
            
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            db_data = {
                'url': parsed_data.get('url', ''),
                'title': parsed_data.get('title', ''),
                'price': parsed_data.get('price', ''),
                'description': parsed_data.get('description', ''),
                'source': 1,  # Avito
            }
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if 'rooms' in parsed_data:
                db_data['rooms'] = parsed_data['rooms']
            if 'total_area' in parsed_data:
                db_data['total_area'] = parsed_data['total_area']
            if 'floor' in parsed_data:
                db_data['floor'] = parsed_data['floor']
            if 'total_floors' in parsed_data:
                db_data['total_floors'] = parsed_data['total_floors']
            
            # –ê–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ
            address_data = parsed_data.get('address_data', {})
            if address_data:
                db_data['address'] = address_data.get('address', '')
                
                # –ú–µ—Ç—Ä–æ
                metro_stations = address_data.get('metro_stations', [])
                if metro_stations:
                    metro_names = []
                    metro_times = []
                    for station in metro_stations:
                        if station.get('name'):
                            metro_names.append(station['name'])
                        if station.get('walking_time'):
                            metro_times.append(station['walking_time'])
                    
                    db_data['metro_stations'] = ', '.join(metro_names) if metro_names else ''
                    db_data['metro_times'] = ', '.join(metro_times) if metro_times else ''
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Ç—Ä–æ –¥–ª—è Excel
                    if metro_times and metro_names:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Ç—Ä–æ (–æ–±—ã—á–Ω–æ —Å–∞–º–æ–µ –±–ª–∏–∑–∫–æ–µ)
                        first_time = metro_times[0]
                        first_station = metro_names[0]
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –∏–∑ "6‚Äì10 –º–∏–Ω." –∏–ª–∏ "16‚Äì20 –º–∏–Ω."
                        time_match = re.search(r'(\d+)', first_time)
                        if time_match:
                            minutes = int(time_match.group(1))
                            db_data['metro_time'] = f"{minutes} {first_station}"
                        else:
                            db_data['metro_time'] = f"0 {first_station}"
                    else:
                        db_data['metro_time'] = None
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
            apartment_params = parsed_data.get('apartment_params', {})
            if apartment_params:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç' in apartment_params:
                    db_data['rooms_from_params'] = apartment_params['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç']
                if '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å' in apartment_params:
                    area_text = apartment_params['–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å']
                    if '–º¬≤' in area_text:
                        area_match = re.search(r'(\d+(?:[.,]\d+)?)', area_text)
                        if area_match:
                            db_data['total_area_from_params'] = float(area_match.group(1).replace(',', '.'))
                if '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏' in apartment_params:
                    kitchen_text = apartment_params['–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏']
                    if '–º¬≤' in kitchen_text:
                        kitchen_match = re.search(r'(\d+(?:[.,]\d+)?)', kitchen_text)
                        if kitchen_match:
                            db_data['kitchen_area'] = float(kitchen_match.group(1).replace(',', '.'))
                if '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å' in apartment_params:
                    living_text = apartment_params['–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å']
                    if '–º¬≤' in living_text:
                        living_match = re.search(r'(\d+(?:[.,]\d+)?)', living_text)
                        if living_match:
                            db_data['living_area'] = float(living_match.group(1).replace(',', '.'))
                if '–≠—Ç–∞–∂' in apartment_params:
                    floor_text = apartment_params['–≠—Ç–∞–∂']
                    floor_match = re.search(r'(\d+)\s*–∏–∑\s*(\d+)', floor_text)
                    if floor_match:
                        db_data['floor_from_params'] = int(floor_match.group(1))
                        db_data['total_floors_from_params'] = int(floor_match.group(2))
                if '–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤' in apartment_params:
                    ceiling_text = apartment_params['–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤']
                    ceiling_match = re.search(r'(\d+(?:[.,]\d+)?)', ceiling_text)
                    if ceiling_match:
                        db_data['ceiling_height'] = float(ceiling_match.group(1).replace(',', '.'))
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if '–ë–∞–ª–∫–æ–Ω –∏–ª–∏ –ª–æ–¥–∂–∏—è' in apartment_params:
                    db_data['balcony'] = apartment_params['–ë–∞–ª–∫–æ–Ω –∏–ª–∏ –ª–æ–¥–∂–∏—è']
                if '–¢–∏–ø –∫–æ–º–Ω–∞—Ç' in apartment_params:
                    db_data['room_type'] = apartment_params['–¢–∏–ø –∫–æ–º–Ω–∞—Ç']
                if '–°–∞–Ω—É–∑–µ–ª' in apartment_params:
                    db_data['bathroom'] = apartment_params['–°–∞–Ω—É–∑–µ–ª']
                if '–û–∫–Ω–∞' in apartment_params:
                    db_data['windows'] = apartment_params['–û–∫–Ω–∞']
                if '–†–µ–º–æ–Ω—Ç' in apartment_params:
                    db_data['renovation'] = apartment_params['–†–µ–º–æ–Ω—Ç']
                if '–ú–µ–±–µ–ª—å' in apartment_params:
                    db_data['furniture'] = apartment_params['–ú–µ–±–µ–ª—å']
                if '–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏' in apartment_params:
                    db_data['sale_type'] = apartment_params['–°–ø–æ—Å–æ–± –ø—Ä–æ–¥–∞–∂–∏']
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞
            house_params = parsed_data.get('house_params', {})
            if house_params:
                if '–¢–∏–ø –¥–æ–º–∞' in house_params:
                    db_data['house_type'] = house_params['–¢–∏–ø –¥–æ–º–∞']
                if '–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏' in house_params:
                    year_text = house_params['–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏']
                    year_match = re.search(r'(\d{4})', year_text)
                    if year_match:
                        db_data['construction_year'] = int(year_match.group(1))
                if '–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ' in house_params:
                    floors_text = house_params['–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ']
                    floors_match = re.search(r'(\d+)', floors_text)
                    if floors_match:
                        db_data['house_floors'] = int(floors_match.group(1))
                if '–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç' in house_params:
                    db_data['passenger_elevator'] = house_params['–ü–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç']
                if '–ì—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç' in house_params:
                    db_data['cargo_elevator'] = house_params['–ì—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç']
                if '–í –¥–æ–º–µ' in house_params:
                    db_data['house_amenities'] = house_params['–í –¥–æ–º–µ']
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–∑–µ –∏–∑ "–í –¥–æ–º–µ"
                    house_amenities_text = house_params['–í –¥–æ–º–µ'].lower()
                    if '–≥–∞–∑' in house_amenities_text:
                        db_data['gas_supply'] = '–ï—Å—Ç—å'
                    else:
                        db_data['gas_supply'] = '–ù–µ—Ç'
                if '–î–≤–æ—Ä' in house_params:
                    db_data['yard_amenities'] = house_params['–î–≤–æ—Ä']
                if '–ü–∞—Ä–∫–æ–≤–∫–∞' in house_params:
                    db_data['parking'] = house_params['–ü–∞—Ä–∫–æ–≤–∫–∞']
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            publication_info = parsed_data.get('publication_info', {})
            if publication_info:
                if 'publication_date' in publication_info:
                    db_data['publication_date'] = publication_info['publication_date']
                if 'today_views' in publication_info:
                    db_data['today_views'] = publication_info['today_views']
            
            # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è HTML –≥–∞–ª–µ—Ä–µ–∏
            photos = parsed_data.get('photos', [])
            if photos:
                photo_urls = [photo[1] for photo in photos if photo[1]]
                db_data['photo_urls'] = photo_urls
                print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(photo_urls)} URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è HTML")
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)
            tags = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö Excel
            if apartment_params:
                # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã
                unique_apartment_fields = {
                    '–¢–∏–ø –∫–æ–º–Ω–∞—Ç'  # –≠—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã
                }
                
                for key, value in apartment_params.items():
                    if (key in unique_apartment_fields and 
                        value and value not in ['–Ω–µ—Ç', '–ù–µ—Ç']):
                        tags.append(f"{key}: {value}")
            
            if house_params:
                # –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–º–∞
                unique_house_fields = {
                    '–í –¥–æ–º–µ', '–î–≤–æ—Ä'  # –≠—Ç–∏ –ø–æ–ª—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –¥–æ–º–∞
                }
                
                for key, value in house_params.items():
                    if (key in unique_house_fields and 
                        value and value not in ['–Ω–µ—Ç', '–ù–µ—Ç']):
                        tags.append(f"{key}: {value}")
            
            if tags:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ë–î
                db_data['tags'] = ', '.join(tags)
            
            return db_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î: {e}")
            return None
    
    def convert_relative_time_to_date(self, relative_time):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞—Ç—É"""
        try:
            if not relative_time:
                return None
                
            now = datetime.now()
            relative_time_lower = relative_time.lower().strip()
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if '—Å–µ–≥–æ–¥–Ω—è' in relative_time_lower:
                return now
            elif '–≤—á–µ—Ä–∞' in relative_time_lower:
                return now - timedelta(days=1)
            elif '–ø–æ–∑–∞–≤—á–µ—Ä–∞' in relative_time_lower:
                return now - timedelta(days=2)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
            time_patterns = [
                (r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s*–Ω–∞–∑–∞–¥', 'hours'),
                (r'(\d+)\s*(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)\s*–Ω–∞–∑–∞–¥', 'days'),
                (r'(\d+)\s*(–Ω–µ–¥–µ–ª|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é)\s*–Ω–∞–∑–∞–¥', 'weeks'),
                (r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü)\s*–Ω–∞–∑–∞–¥', 'months')
            ]
            
            for pattern, unit in time_patterns:
                match = re.search(pattern, relative_time_lower)
                if match:
                    count = int(match.group(1))
                    
                    if unit == 'hours':
                        return now - timedelta(hours=count)
                    elif unit == 'days':
                        return now - timedelta(days=count)
                    elif unit == 'weeks':
                        return now - timedelta(weeks=count)
                    elif unit == 'months':
                        return now - timedelta(days=count * 30)
            
            return now
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return datetime.now()
    
    def cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.driver:
                print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
                self.driver.quit()
                self.driver = None
                print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        self.cleanup()

    def extract_photo_urls(self):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –≥–∞–ª–µ—Ä–µ–∏ Avito.
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview-–≤–µ—Ä—Å–∏–∏ (1.5x –∏–∑ srcset),
        –∏—Å–∫–ª—é—á–∞—è –º–µ–ª–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã (1x –≤–µ—Ä—Å–∏–∏).
        """
        try:
            photos = []
            
            # –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ preview)
            try:
                main_photo_wrapper = self.driver.find_element(By.CSS_SELECTOR, 'div[data-marker="image-frame/image-wrapper"]')
                if main_photo_wrapper:
                    # –ë–µ—Ä–µ–º src –∏–∑ img (—ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ preview)
                    main_img = main_photo_wrapper.find_element(By.TAG_NAME, 'img')
                    if main_img:
                        main_url = main_img.get_attribute('src')
                        if main_url and main_url.startswith('http'):
                            photos.append(('main', main_url))
                            print(f"üì∏ –ì–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ (—Å—Ä–µ–¥–Ω–µ–µ preview): {main_url}")
            except:
                pass
            
            # –ò—â–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≥–∞–ª–µ—Ä–µ–µ - —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview (1.5x)
            gallery_items = self.driver.find_elements(By.CSS_SELECTOR, 'li[data-marker="image-preview/item"]')
            for i, item in enumerate(gallery_items):
                try:
                    img = item.find_element(By.TAG_NAME, 'img')
                    if img:
                        # –ò—â–µ–º —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é (1.5x) –≤ srcset
                        srcset = img.get_attribute('srcset')
                        medium_url = None
                        
                        if srcset:
                            # –†–∞–∑–±–∏—Ä–∞–µ–º srcset –∏ –∏—â–µ–º –≤–µ—Ä—Å–∏—é 1.5x (—Å—Ä–µ–¥–Ω—è—è)
                            srcset_parts = srcset.split(', ')
                            for part in srcset_parts:
                                if ' ' in part:
                                    url = part.split(' ')[0]
                                    size_indicator = part.split(' ')[1]
                                    
                                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 1.5x –≤–µ—Ä—Å–∏–∏ (—Å—Ä–µ–¥–Ω–∏–µ preview)
                                    if size_indicator == '1.5x':
                                        medium_url = url
                                        print(f"üì∏ –§–æ—Ç–æ {i+1} (—Å—Ä–µ–¥–Ω–µ–µ 1.5x): {medium_url}")
                                        break
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ 1.5x, –ù–ï –±–µ—Ä–µ–º –æ–±—ã—á–Ω—ã–π src (—ç—Ç–æ –º–µ–ª–∫–∏–π –¥—É–±–ª–∏–∫–∞—Ç)
                        # medium_url –æ—Å—Ç–∞–µ—Ç—Å—è None
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
                        if medium_url and medium_url not in [p[1] for p in photos]:
                            photos.append(('gallery', medium_url))
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ç–æ {i+1}: {e}")
                    continue
            
            print(f"üì∏ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–Ω–∏—Ö preview-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
            print("‚ÑπÔ∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–µ preview (1.5x), –∏—Å–∫–ª—é—á–∞—è –º–µ–ª–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã")
            
            return photos
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            return []

    def extract_apartment_params(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
        try:
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            import time
            time.sleep(5)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            js_script = """
            function extractApartmentParams() {
                const result = {};
                const paramItems = document.querySelectorAll('li.cHzV4');
                
                paramItems.forEach((item, index) => {
                    try {
                        const fullText = item.textContent.trim();
                        if (fullText) {
                            const nameSpan = item.querySelector('span.Lg7Ax');
                            if (nameSpan) {
                                const paramName = nameSpan.textContent.replace(':', '').trim();
                                const paramValue = fullText.replace(nameSpan.textContent, '').trim();
                                
                                if (paramName && paramValue) {
                                    result[paramName] = paramValue;
                                }
                            } else {
                                if (fullText.includes(':')) {
                                    const parts = fullText.split(':', 1);
                                    const paramName = parts[0].trim();
                                    const paramValue = parts[1].trim();
                                    
                                    if (paramName && paramValue) {
                                        result[paramName] = paramValue;
                                    }
                                }
                            }
                        }
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', e);
                    }
                });
                
                return result;
            }
            return extractApartmentParams();
            """
            
            apartment_params = self.driver.execute_script(js_script)
            
            if apartment_params and isinstance(apartment_params, dict):
                return apartment_params
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                apartment_params = {}
                try:
                    param_items = self.driver.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                    
                    for item in param_items:
                        try:
                            full_text = item.text.strip()
                            if not full_text:
                                continue
                            
                            param_name = ""
                            param_value = ""
                            
                            try:
                                param_name_elem = item.find_element(By.CSS_SELECTOR, 'span.Lg7Ax')
                                param_name = param_name_elem.text.replace(':', '').strip()
                                
                                if param_name in full_text:
                                    param_value = full_text.replace(param_name_elem.text, '').strip()
                                    if param_value.startswith(':'):
                                        param_value = param_value[1:].strip()
                            except:
                                if ':' in full_text:
                                    parts = full_text.split(':', 1)
                                    param_name = parts[0].strip()
                                    param_value = parts[1].strip()
                            
                            param_value = param_value.replace('\xa0', ' ').strip()
                            
                            if param_name and param_value:
                                apartment_params[param_name] = param_value
                            
                        except Exception as e:
                            continue
                    
                except Exception as e:
                    pass
                
                return apartment_params
            
        except Exception as e:
            return {}

    def extract_house_params(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞ –∏–∑ –±–ª–æ–∫–∞ '–û –¥–æ–º–µ'"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            import time
            time.sleep(3)
            
            # –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–ª–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫)
            all_params_blocks = self.driver.find_elements(By.CSS_SELECTOR, 'div[id="bx_item-params"], div[data-marker*="params"], div[class*="params"]')
            
            house_params_block = None
            
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–û –¥–æ–º–µ"
            for i, block in enumerate(all_params_blocks):
                try:
                    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ h2
                    headers = block.find_elements(By.CSS_SELECTOR, 'h2')
                    for header in headers:
                        header_text = header.text.strip().lower()
                        if '–¥–æ–º–µ' in header_text:
                            house_params_block = block
                            break
                    if house_params_block:
                        break
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É HTML
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
                        html_content = block.get_attribute('outerHTML').lower()
                        if '–æ –¥–æ–º–µ' in html_content:
                            house_params_block = block
                            break
                    except Exception as e:
                        continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–º–∞
                        param_items = block.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                        if param_items:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –¥–æ–º–µ
                            block_text = block.text.lower()
                            house_keywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂']
                            
                            keyword_count = sum(1 for keyword in house_keywords if keyword in block_text)
                            if keyword_count >= 2:  # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
                                house_params_block = block
                                break
                    except Exception as e:
                        continue
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if not house_params_block:
                for i, block in enumerate(all_params_blocks):
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞
                        block_text = block.text.strip()
                        if block_text:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –¥–æ–º–µ
                            house_keywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂', '–º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥', '–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç', '–≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç']
                            keyword_count = sum(1 for keyword in house_keywords if keyword.lower() in block_text.lower())
                            
                            if keyword_count >= 2:
                                house_params_block = block
                                break
                    except Exception as e:
                        continue
            
            if not house_params_block:
                return {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–º–∞
            js_script = """
            function extractHouseParams() {
                // –ò—â–µ–º –±–ª–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–æ–º–∞
                const allParamsBlocks = document.querySelectorAll('div[id="bx_item-params"], div[data-marker*="params"], div[class*="params"]');
                let houseParamsBlock = null;
                
                for (let i = 0; i < allParamsBlocks.length; i++) {
                    const block = allParamsBlocks[i];
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    const header = block.querySelector('h2');
                    if (header && header.textContent.toLowerCase().includes('–¥–æ–º–µ')) {
                        houseParamsBlock = block;
                        break;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                    const blockText = block.textContent.toLowerCase();
                    const houseKeywords = ['—Ç–∏–ø –¥–æ–º–∞', '–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏', '—ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ', '–ª–∏—Ñ—Ç', '–∫–æ–Ω—Å—å–µ—Ä–∂', '–º—É—Å–æ—Ä–æ–ø—Ä–æ–≤–æ–¥', '–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π –ª–∏—Ñ—Ç', '–≥—Ä—É–∑–æ–≤–æ–π –ª–∏—Ñ—Ç'];
                    const keywordCount = houseKeywords.filter(keyword => blockText.includes(keyword)).length;
                    
                    if (keywordCount >= 2) {
                        houseParamsBlock = block;
                        break;
                    }
                }
                
                if (!houseParamsBlock) return {};
                
                const result = {};
                
                // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                const paramItems = houseParamsBlock.querySelectorAll('li.cHzV4');
                
                paramItems.forEach((item, index) => {
                    try {
                        const fullText = item.textContent.trim();
                        if (fullText) {
                            // –ò—â–µ–º span —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            const nameSpan = item.querySelector('span.Lg7Ax');
                            if (nameSpan) {
                                const paramName = nameSpan.textContent.replace(':', '').trim();
                                const paramValue = fullText.replace(nameSpan.textContent, '').trim();
                                
                                if (paramName && paramValue) {
                                    result[paramName] = paramValue;
                                }
                            } else {
                                // –ï—Å–ª–∏ span –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
                                if (fullText.includes(':')) {
                                    const parts = fullText.split(':', 1);
                                    const paramName = parts[0].trim();
                                    const paramValue = parts[1].trim();
                                    
                                    if (paramName && paramValue) {
                                        result[paramName] = paramValue;
                                    }
                                }
                            }
                        }
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–º–∞:', e);
                    }
                });
                
                return result;
            }
            return extractHouseParams();
            """
            
            house_params = self.driver.execute_script(js_script)
            
            if house_params and isinstance(house_params, dict):
                return house_params
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é
                house_params = {}
                
                # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                try:
                    param_items = house_params_block.find_elements(By.CSS_SELECTOR, 'li.cHzV4')
                    
                    for i, item in enumerate(param_items):
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                            full_text = item.text.strip()
                            
                            if not full_text:
                                continue
                            
                            # –ò—â–µ–º span —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                            param_name = ""
                            param_value = ""
                            
                            try:
                                param_name_elem = item.find_element(By.CSS_SELECTOR, 'span.Lg7Ax')
                                param_name = param_name_elem.text.replace(':', '').strip()
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                                if param_name in full_text:
                                    param_value = full_text.replace(param_name_elem.text, '').strip()
                                    if param_value.startswith(':'):
                                        param_value = param_value[1:].strip()
                            except:
                                # –ï—Å–ª–∏ span –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–±–∏—Ä–∞–µ–º –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é
                                if ':' in full_text:
                                    parts = full_text.split(':', 1)
                                    param_name = parts[0].strip()
                                    param_value = parts[1].strip()
                            
                            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                            param_value = param_value.replace('\xa0', ' ').strip()
                            
                            if param_name and param_value:
                                house_params[param_name] = param_value
                            
                        except Exception as e:
                            continue
                    
                except Exception as e:
                    pass
                
                return house_params
            
        except Exception as e:
            return {}

    def extract_address_and_metro(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞–¥—Ä–µ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ"""
        try:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∞–¥—Ä–µ—Å–æ–º
            address_block = self.driver.find_element(By.CSS_SELECTOR, 'div[itemprop="address"]')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ
            js_script = """
            function extractAddressAndMetro() {
                const addressBlock = document.querySelector('div[itemprop="address"]');
                if (!addressBlock) return {};
                
                const result = {};
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å
                const addressSpan = addressBlock.querySelector('span.xLPJ6');
                if (addressSpan) {
                    result.address = addressSpan.textContent.trim();
                }
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ
                const metroStations = [];
                const metroSpans = addressBlock.querySelectorAll('span.tAdYM');
                
                metroSpans.forEach((metroSpan, index) => {
                    try {
                        const stationName = '';
                        const walkingTime = '';
                        const lineColors = [];
                        
                        // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏)
                        const allElements = metroSpan.querySelectorAll('*');
                        for (let elem of allElements) {
                            if (!elem.classList.contains('KIhHC') && 
                                !elem.classList.contains('LHPFZ') && 
                                !elem.classList.contains('dt6FF') &&
                                elem.textContent.trim() &&
                                !elem.textContent.includes('–º–∏–Ω') &&
                                !elem.textContent.includes('‚Äì')) {
                                stationName = elem.textContent.trim();
                                break;
                            }
                        }
                        
                        // –ò—â–µ–º —Ü–≤–µ—Ç–∞ –ª–∏–Ω–∏–π
                        const colorElements = metroSpan.querySelectorAll('i.dJYsT');
                        colorElements.forEach(colorElem => {
                            const style = colorElem.getAttribute('style');
                            if (style && style.includes('background-color:')) {
                                const colorMatch = style.match(/#[0-9A-Fa-f]{6}/);
                                if (colorMatch) {
                                    lineColors.push(colorMatch[0]);
                                }
                            }
                        });
                        
                        // –ò—â–µ–º –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
                        for (let elem of allElements) {
                            const text = elem.textContent.trim();
                            if (text.includes('–º–∏–Ω') || text.includes('‚Äì')) {
                                walkingTime = text;
                                break;
                            }
                        }
                        
                        if (stationName) {
                            metroStations.push({
                                name: stationName,
                                walking_time: walkingTime,
                                line_colors: lineColors
                            });
                        }
                    } catch (e) {
                        console.log('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ:', e);
                    }
                });
                
                result.metro_stations = metroStations;
                return result;
            }
            return extractAddressAndMetro();
            """
            
            address_data = self.driver.execute_script(js_script)
            
            if address_data and isinstance(address_data, dict):
                return address_data
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                address_data = {}
                try:
                    address_span = address_block.find_element(By.CSS_SELECTOR, 'span.xLPJ6')
                    if address_span:
                        address_data['address'] = address_span.text.strip()
                    
                    metro_stations = []
                    metro_spans = address_block.find_elements(By.CSS_SELECTOR, 'span.tAdYM')
                    
                    for metro_span in metro_spans:
                        try:
                            station_name = ""
                            walking_time = ""
                            line_colors = []
                            
                            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
                            all_elements = metro_span.find_elements(By.CSS_SELECTOR, '*')
                            for elem in all_elements:
                                elem_text = elem.text.strip()
                                if (elem_text and 
                                    '–º–∏–Ω' not in elem_text and 
                                    '‚Äì' not in elem_text and
                                    not elem.get_attribute('class') in ['KIhHC', 'LHPFZ', 'dt6FF']):
                                    station_name = elem_text
                                    break
                            
                            # –ò—â–µ–º —Ü–≤–µ—Ç–∞ –ª–∏–Ω–∏–π
                            color_elements = metro_span.find_elements(By.CSS_SELECTOR, 'i.dJYsT')
                            for color_elem in color_elements:
                                style = color_elem.get_attribute('style')
                                if style and 'background-color:' in style:
                                    import re
                                    color_match = re.search(r'#[0-9A-Fa-f]{6}', style)
                                    if color_match:
                                        line_colors.append(color_match.group(0))
                            
                            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏
                            for elem in all_elements:
                                elem_text = elem.text.strip()
                                if '–º–∏–Ω' in elem_text or '‚Äì' in elem_text:
                                    walking_time = elem_text
                                    break
                            
                            if station_name:
                                metro_stations.append({
                                    'name': station_name,
                                    'walking_time': walking_time,
                                    'line_colors': line_colors
                                })
                        
                        except Exception as e:
                            continue
                    
                    address_data['metro_stations'] = metro_stations
                    
                except Exception as e:
                    pass
                
                return address_data
            
        except Exception as e:
            return {}

    def extract_description(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –±–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            description_block = self.driver.find_element(By.CSS_SELECTOR, 'div[data-marker="item-view/item-description"]')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            js_script = """
            function extractDescription() {
                const descriptionBlock = document.querySelector('div[data-marker="item-view/item-description"]');
                if (!descriptionBlock) return '';
                
                // –ò—â–µ–º –≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                const paragraphs = descriptionBlock.querySelectorAll('p');
                if (paragraphs.length > 0) {
                    // –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                    const textParts = [];
                    paragraphs.forEach(p => {
                        const text = p.textContent.trim();
                        if (text) {
                            textParts.push(text);
                        }
                    });
                    return textParts.join('\\n\\n');
                } else {
                    // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    return descriptionBlock.textContent.trim();
                }
            }
            return extractDescription();
            """
            
            description_text = self.driver.execute_script(js_script)
            
            if description_text:
                return description_text
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                try:
                    paragraphs = description_block.find_elements(By.CSS_SELECTOR, 'p')
                    if paragraphs:
                        text_parts = []
                        for p in paragraphs:
                            text = p.text.strip()
                            if text:
                                text_parts.append(text)
                        return '\n\n'.join(text_parts)
                    else:
                        return description_block.text.strip()
                except:
                    return description_block.text.strip()
            
        except Exception as e:
            return ""

    def extract_publication_info(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            js_script = """
            function extractPublicationInfo() {
                const result = {};
                
                // –ò—â–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                const dateElement = document.querySelector('span[data-marker="item-view/item-date"]');
                if (dateElement) {
                    const dateText = dateElement.textContent.trim();
                    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                    result.publication_date = dateText.replace(/^[¬∑\\s]+/, '').trim();
                }
                
                // –ò—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                const todayViewsElement = document.querySelector('span[data-marker="item-view/today-views"]');
                if (todayViewsElement) {
                    const todayViewsText = todayViewsElement.textContent.trim();
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ "(+20 —Å–µ–≥–æ–¥–Ω—è)"
                    const todayViewsMatch = todayViewsText.match(/\\+(\\d+)/);
                    if (todayViewsMatch) {
                        result.today_views = parseInt(todayViewsMatch[1]);
                    }
                }
                
                return result;
            }
            return extractPublicationInfo();
            """
            
            publication_info = self.driver.execute_script(js_script)
            
            if publication_info and isinstance(publication_info, dict):
                return publication_info
            else:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ä—É—á–Ω—É—é
                publication_info = {}
                try:
                    # –ò—â–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    date_element = self.driver.find_element(By.CSS_SELECTOR, 'span[data-marker="item-view/item-date"]')
                    if date_element:
                        date_text = date_element.text.strip()
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                        publication_info['publication_date'] = date_text.replace('¬∑', '').strip()
                    
                    # –ò—â–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                    today_views_element = self.driver.find_element(By.CSS_SELECTOR, 'span[data-marker="item-view/today-views"]')
                    if today_views_element:
                        today_views_text = today_views_element.text.strip()
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                        today_views_match = re.search(r'\+(\d+)', today_views_text)
                        if today_views_match:
                            publication_info['today_views'] = int(today_views_match.group(1))
                    
                except Exception as e:
                    pass
                
                return publication_info
            
        except Exception as e:
            return {}

    def parse_avito_page(self, url):
        """–ü–∞—Ä—Å–∏—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito"""
        try:
            print(f"üîÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito: {url}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Selenium
            if not self.setup_selenium():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Selenium")
                return None
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies")
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookies")
                return None
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            self.driver.get(url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            import time
            time.sleep(5)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_element = self.driver.find_element(By.CSS_SELECTOR, 'h1[data-marker="item-view/title-info"]')
                title_text = title_element.text.strip()
                print(f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title_text}")
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                title_components = self.parse_title(title_text)
                print(f"üè† –ö–æ–º–Ω–∞—Ç—ã: {title_components.get('rooms')}")
                print(f"üìè –ü–ª–æ—â–∞–¥—å: {title_components.get('total_area')} –º¬≤")
                print(f"üè¢ –≠—Ç–∞–∂: {title_components.get('floor')}/{title_components.get('total_floors')}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
                title_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                title_components = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
                price_selectors = [
                    'span[data-marker="price-value"]',
                    'span[data-marker="item-price"]',
                    'span[class*="price-value"]',
                    'span[class*="price"]',
                    'div[data-marker="price-value"]',
                    'div[data-marker="item-price"]',
                    'div[class*="price-value"]',
                    'div[class*="price"]',
                    'span[itemprop="price"]',
                    'span[class*="amount"]'
                ]
                
                price_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                for selector in price_selectors:
                    try:
                        price_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for element in price_elements:
                            text = element.text.strip()
                            if text and text != "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω—ã" and len(text) > 3:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–∞ (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã)
                                if any(char.isdigit() for char in text) and any(char in '‚ÇΩ$‚Ç¨' for char in text):
                                    price_text = text
                                    break
                        if price_text != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                            break
                    except:
                        continue
                
                print(f"üí∞ –¶–µ–Ω–∞: {price_text}")
            except:
                price_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                print("‚ùå –¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            print("üì∏ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
            photos = self.extract_photo_urls()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã
            print("üè† –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã...")
            apartment_params = self.extract_apartment_params()
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {len(apartment_params)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞
            print("üè¢ –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–º–∞...")
            house_params = self.extract_house_params()
            print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–º–∞: {len(house_params)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ
            print("üìç –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ...")
            time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            address_data = self.extract_address_and_metro()
            print(f"‚úÖ –ê–¥—Ä–µ—Å: {address_data.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"‚úÖ –°—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ: {len(address_data.get('metro_stations', []))}")
            
            # –ï—Å–ª–∏ –º–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if len(address_data.get('metro_stations', [])) == 0:
                print("üîÑ –ú–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                time.sleep(3)
                address_data = self.extract_address_and_metro()
                print(f"‚úÖ –°—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞): {len(address_data.get('metro_stations', []))}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            print("üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...")
            description = self.extract_description()
            print(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            print("üìÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
            publication_info = self.extract_publication_info()
            print(f"‚úÖ –î–∞—Ç–∞: {publication_info.get('publication_date', '–ù–µ –Ω–∞–π–¥–µ–Ω–∞')}")
            print(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {publication_info.get('today_views', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            result = {
                'url': url,
                'title': title_text,
                'price': price_text,
                'photos': photos,
                'apartment_params': apartment_params,
                'house_params': house_params,
                'address_data': address_data,
                'description': description,
                'publication_info': publication_info,
                **title_components  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–∞
            }
            
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
        finally:
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            self.cleanup()
