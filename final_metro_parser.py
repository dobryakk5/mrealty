#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º metro.avito_id
"""

import json
import os
import time
import asyncio
import asyncpg
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import re

class FinalMetroParser:
    def __init__(self):
        self.cookies_file = "avito_cookies_fixed.json"
        self.driver = None
        self.database_url = None
        self.max_cards = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.metro_id = 1  # ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro
        self.metro_avito_id = None  # avito_id –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç—Ä–æ
        
    async def get_metro_avito_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç avito_id –¥–ª—è –º–µ—Ç—Ä–æ –∏–∑ –ë–î"""
        try:
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            result = await conn.fetchrow("""
                SELECT id, name, avito_id 
                FROM metro 
                WHERE id = $1
            """, self.metro_id)
            
            await conn.close()
            
            if result:
                self.metro_avito_id = result['avito_id']
                metro_name = result['name']
                print(f"üìç –ú–µ—Ç—Ä–æ: {metro_name} (ID: {self.metro_id}, avito_id: {self.metro_avito_id})")
                return True
            else:
                print(f"‚ùå –ú–µ—Ç—Ä–æ —Å ID {self.metro_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è avito_id –¥–ª—è –º–µ—Ç—Ä–æ: {e}")
            return False
    
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ cookies"""
        try:
            if not os.path.exists(self.cookies_file):
                print(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {cookies_data['timestamp']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data['cookies'])}")
            return cookies_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver"""
        try:
            options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            # options.add_argument("--headless")  # –£–±–∏—Ä–∞–µ–º headless –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            
            # User-Agent
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--window-size=1920,1080")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-features=VizDisplayCompositor")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            print("üîß –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ –¥—Ä–∞–π–≤–µ—Ä—É"""
        try:
            if not cookies_data or 'cookies' not in cookies_data:
                return False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AVITO...")
            self.driver.get("https://avito.ru")
            time.sleep(3)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            applied_count = 0
            for cookie in cookies_data['cookies']:
                try:
                    cookie_dict = {
                        'name': cookie['name'],
                        'value': cookie['value'],
                        'domain': cookie.get('domain', ''),
                        'path': cookie.get('path', '/')
                    }
                    
                    if cookie.get('expiry'):
                        cookie_dict['expiry'] = cookie['expiry']
                    if cookie.get('secure'):
                        cookie_dict['secure'] = cookie['secure']
                    if cookie.get('httpOnly'):
                        cookie_dict['httpOnly'] = cookie['httpOnly']
                    
                    self.driver.add_cookie(cookie_dict)
                    applied_count += 1
                    
                except Exception as e:
                    continue
            
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {applied_count}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ cookies
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å cookies...")
            self.driver.refresh()
            time.sleep(5)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def get_metro_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –º–µ—Ç—Ä–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id"""
        if not self.metro_avito_id:
            print("‚ùå avito_id –¥–ª—è –º–µ—Ç—Ä–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        # URL –¥–ª—è –≤—Ç–æ—Ä–∏—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id
        base_url = "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg"
        metro_url = f"{base_url}?metro={self.metro_avito_id}"
        return metro_url
    
    def wait_for_cards_load(self, timeout=30):
        """–ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            wait = WebDriverWait(self.driver, timeout)
            cards = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '[data-marker="item"]')))
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            return True
            
        except TimeoutException:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False
    
    def parse_title(self, title_text):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            title_data = {}
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            rooms_pattern = r'(\d+)-–∫\.|(\d+)\s*–∫–æ–º–Ω–∞—Ç|—Å—Ç—É–¥–∏—è|–°—Ç—É–¥–∏—è'
            rooms_match = re.search(rooms_pattern, title_text)
            if rooms_match:
                if '—Å—Ç—É–¥–∏—è' in rooms_match.group(0).lower():
                    title_data['rooms'] = '—Å—Ç—É–¥–∏—è'
                else:
                    title_data['rooms'] = rooms_match.group(1) if rooms_match.group(1) else rooms_match.group(2)
            else:
                title_data['rooms'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            area_pattern = r'(\d+(?:[,\d]+)?)\s*–º¬≤'
            area_match = re.search(area_pattern, title_text)
            if area_match:
                title_data['area'] = area_match.group(1).replace(',', '.')
            else:
                title_data['area'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç—Ç–∞–∂–∞ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
            floor_pattern = r'(\d+)/(\d+)\s*—ç—Ç'
            floor_match = re.search(floor_pattern, title_text)
            if floor_match:
                title_data['floor'] = floor_match.group(1)
                title_data['total_floors'] = floor_match.group(2)
            else:
                title_data['floor'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                title_data['total_floors'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            return title_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return {
                'rooms': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'area': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'floor': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'total_floors': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_address(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            address_data = {}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = address_text.strip().split('\n')
            
            if len(lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ª–∏—Ü–∞ –∏ –¥–æ–º (–±–µ—Ä–µ–º –∫–∞–∫ –µ—Å—Ç—å)
                street_line = lines[0].strip()
                address_data['street_house'] = street_line
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                metro_line = lines[1].strip()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –∏—â–µ–º –º–∏–Ω—É—Ç—ã
                parts = [p.strip() for p in metro_line.split(',') if p.strip()]
                
                minutes = None
                metro = None
                minutes_idx = None
                
                # –ò—â–µ–º —á–∞—Å—Ç—å —Å –º–∏–Ω—É—Ç–∞–º–∏ (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –¥–æ —Å–ª–æ–≤–∞ "–º–∏–Ω")
                for i, p in enumerate(parts):
                    if re.search(r"–º–∏–Ω\.?", p, re.IGNORECASE):
                        nums = re.findall(r"\d+", p)
                        if nums:
                            minutes = int(nums[0])
                            minutes_idx = i
                            break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∏–Ω—É—Ç—ã, –º–µ—Ç—Ä–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–µ–≥–º–µ–Ω—Ç–µ
                if minutes_idx is not None and minutes_idx > 0:
                    # –≤—Å—ë, —á—Ç–æ –î–û —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –º–∏–Ω—É—Ç–∞–º–∏ ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å–Ω–∞—è —á–∞—Å—Ç—å
                    address_candidates = parts[:minutes_idx]
                else:
                    address_candidates = parts
                
                # –ê–¥—Ä–µ—Å ‚Äî –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—É–ª–∏—Ü–∞, –¥–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
                if address_candidates:
                    street = address_candidates[0]
                    house = None
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—á–ª–µ–Ω–∏—Ç—å –¥–æ–º –∫–∞–∫ –≤–µ–¥—É—â—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é —á–∞—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ,
                    # –∞ –º–µ—Ç—Ä–æ ‚Äî –∫–∞–∫ —Ñ—Ä–∞–∑—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –±—É–∫–≤ (–ó–∞–≥–ª–∞–≤–Ω–∞—è+—Å—Ç—Ä–æ—á–Ω–∞—è)
                    if len(address_candidates) >= 2:
                        seg2 = address_candidates[1]
                        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–≥–ª–∞–≤–Ω–æ–π –∫–∏—Ä–∏–ª. –±—É–∫–≤—ã, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç —Å—Ç—Ä–æ—á–Ω–∞—è ‚Äî –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–æ
                        m_cap = re.search(r"[–ê-–Ø–Å][–∞-—è—ë]", seg2)
                        if m_cap and m_cap.start() > 0:
                            split_idx = m_cap.start()
                            head = seg2[:split_idx].strip()
                            tail = seg2[split_idx:].strip()
                            if head:
                                house = head
                            if not metro and tail:
                                metro = tail
                        else:
                            # fallback: –±–µ—Ä—ë–º —Å–µ–≥–º–µ–Ω—Ç –∫–∞–∫ –¥–æ–º
                            house = seg2
                    
                    # –°–±–æ—Ä –∞–¥—Ä–µ—Å–∞
                    if street and house:
                        address_data['street_house'] = f"{street}, {house}"
                    else:
                        address_data['street_house'] = street
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–æ –∏ –º–∏–Ω—É—Ç—ã
                if metro:
                    address_data['metro_name'] = metro
                else:
                    # –ï—Å–ª–∏ –º–µ—Ç—Ä–æ –Ω–µ –≤—ã–¥–µ–ª–∏–ª–∏, –±–µ—Ä—ë–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
                    address_data['metro_name'] = metro_line
                
                if minutes:
                    address_data['time_to_metro'] = str(minutes)
                else:
                    address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                    
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
                address_data['street_house'] = address_text.strip()
                address_data['metro_name'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            return address_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return {
                'street_house': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_name': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'time_to_metro': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_seller_info(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            seller_data = {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ data-marker –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                if params_elem:
                    params_text = params_elem.text.strip()
                    
                    # –ò—â–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                    if '—á–∞—Å—Ç–Ω' in params_text.lower():
                        seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤' in params_text.lower():
                        seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in params_text.lower():
                        seller_data['type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                    else:
                        seller_data['type'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    
                    seller_data['full_text'] = params_text
                else:
                    seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    
            except:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ data-marker, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                try:
                    # –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                    all_text = card_element.text.lower()
                    if '—á–∞—Å—Ç–Ω' in all_text:
                        seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤' in all_text:
                        seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in all_text:
                        seller_data['type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                    else:
                        seller_data['type'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    
                    seller_data['full_text'] = '–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ'
                except:
                    seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            
            return seller_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return {
                'type': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'full_text': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_card(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É"""
        try:
            card_data = {}
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            try:
                item_id = card_element.get_attribute('data-item-id')
                if item_id:
                    card_data['item_id'] = item_id
            except:
                pass
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-title"]')
                title_text = title_elem.text.strip()
                card_data['title'] = title_text
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                title_components = self.parse_title(title_text)
                card_data.update(title_components)
                
            except:
                card_data['title'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                card_data.update({
                    'rooms': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'area': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'floor': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'total_floors': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                })
            
            # –¶–µ–Ω–∞
            try:
                price_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                card_data['price'] = price_elem.text.strip()
            except:
                card_data['price'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ê–¥—Ä–µ—Å/–º–µ—Ç—Ä–æ
            try:
                address_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-address"]')
                address_text = address_elem.text.strip()
                card_data['address'] = address_text
                
                # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                address_components = self.parse_address(address_text)
                card_data.update(address_components)
                
            except:
                card_data['address'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                card_data.update({
                    'street_house': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'metro_name': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'time_to_metro': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                })
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            try:
                params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                card_data['params'] = params_elem.text.strip()
            except:
                card_data['params'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            try:
                description_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-description"]')
                card_data['description'] = description_elem.text.strip()
            except:
                card_data['description'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                link_elem = card_element.find_element(By.CSS_SELECTOR, 'a[data-marker="item-title"]')
                card_data['url'] = link_elem.get_attribute('href')
            except:
                card_data['url'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                time_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-date"]')
                card_data['published_time'] = time_elem.text.strip()
            except:
                card_data['published_time'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            seller_info = self.parse_seller_info(card_element)
            card_data.update(seller_info)
            
            return card_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
    
    def parse_metro_page(self):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ"""
        try:
            print(f"üéØ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ ID = {self.metro_id} (avito_id = {self.metro_avito_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º URL
            metro_url = self.get_metro_url()
            if not metro_url:
                return []
                
            print(f"üåê URL: {metro_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(metro_url)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
            current_url = self.driver.current_url
            print(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not self.wait_for_cards_load():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫
            parsed_cards = []
            for i, card in enumerate(cards[:self.max_cards]):
                print(f"\nüîç –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫—É {i+1}/{min(self.max_cards, len(cards))}...")
                
                card_data = self.parse_card(card)
                if card_data:
                    card_data['card_number'] = i + 1
                    parsed_cards.append(card_data)
                    print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} —Å–ø–∞—Ä—Å–µ–Ω–∞")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
            
            return parsed_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    def save_results(self, parsed_cards):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            result_data = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'metro_id': self.metro_id,
                'metro_avito_id': self.metro_avito_id,
                'url': self.get_metro_url(),
                'total_cards_found': len(parsed_cards),
                'parsed_cards': parsed_cards
            }
            
            filename = f"final_metro_{self.metro_id}_cards_{time.strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –ú–µ—Ç—Ä–æ ID: {self.metro_id}")
            print(f"   –ú–µ—Ç—Ä–æ avito_id: {self.metro_avito_id}")
            print(f"   –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_cards)}")
            print(f"   –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    async def run_parser(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            if not await self.get_metro_avito_id():
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            if not self.setup_selenium():
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                return False
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            parsed_cards = self.parse_metro_page()
            
            if parsed_cards:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.save_results(parsed_cards)
                
                # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
                print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–†–¢–û–ß–ö–ê–•:")
                for i, card in enumerate(parsed_cards):
                    print(f"\n   üè† –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1}:")
                    print(f"     ID: {card.get('item_id', '–ù/–î')}")
                    print(f"     –ó–∞–≥–æ–ª–æ–≤–æ–∫: {card.get('title', '–ù/–î')}")
                    print(f"     –ö–æ–º–Ω–∞—Ç—ã: {card.get('rooms', '–ù/–î')}")
                    print(f"     –ü–ª–æ—â–∞–¥—å: {card.get('area', '–ù/–î')} –º¬≤")
                    print(f"     –≠—Ç–∞–∂: {card.get('floor', '–ù/–î')}/{card.get('total_floors', '–ù/–î')}")
                    print(f"     –¶–µ–Ω–∞: {card.get('price', '–ù/–î')}")
                    print(f"     –£–ª–∏—Ü–∞/–¥–æ–º: {card.get('street_house', '–ù/–î')}")
                    print(f"     –ú–µ—Ç—Ä–æ: {card.get('metro_name', '–ù/–î')}")
                    print(f"     –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ: {card.get('time_to_metro', '–ù/–î')}")
                    print(f"     –ü—Ä–æ–¥–∞–≤–µ—Ü: {card.get('type', '–ù/–î')}")
                    print(f"     –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {card.get('published_time', '–ù/–î')}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                    print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = FinalMetroParser()
    parser.database_url = database_url
    
    success = await parser.run_parser()
    
    if success:
        print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main())
