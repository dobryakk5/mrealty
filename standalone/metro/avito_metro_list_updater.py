#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º–µ—Ç—Ä–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω "–∂–∏–ª—å–µ —É –º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ]" –¥–ª—è –ø–æ–∏—Å–∫–∞
"""

import json
import os
import time
import asyncio
import asyncpg
import re
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By

class CompleteGroupsUpdater:
    def __init__(self):
        self.cookies_file = "avito_cookies_fixed.json"
        self.driver = None
        self.database_url = None
        self.results = []
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ –∏–∑ URL-–æ–≤ AVITO
        self.target_groups = {
            "–ì—Ä—É–ø–ø–∞ 1": [1, 2, 3, 4, 5, 54, 55, 56, 57, 58, 59, 93, 94, 95, 96, 97, 98, 99, 148, 151, 2135, 2136, 2142, 2174, 2187, 2213, 2227, 2238, 2250, 2257, 2271, 2288, 2315, 2319, 2330, 2336],
            "–ì—Ä—É–ø–ø–∞ 2": [6, 7, 8, 9, 10, 11, 12, 60, 100, 101, 102, 103, 104, 2144, 2149, 2150, 2158, 2159, 2165, 2177, 2179, 2180, 2186, 2204, 2209, 2222, 2235, 2239, 2240, 2254, 2299, 2311, 2318],
            "–ì—Ä—É–ø–ø–∞ 3": [13, 14, 15, 16, 18, 61, 62, 63, 64, 65, 105, 106, 107, 108, 215, 2002, 2145, 2150, 2191, 2207, 2246, 2247, 2251, 2268, 2275, 2279, 2299, 2303, 2316, 2321, 2323, 2333],
            "–ì—Ä—É–ø–ø–∞ 4": [19, 20, 66, 109, 110, 111, 127, 149, 1001, 1004, 1005, 1010, 1012, 2147, 2155, 2181, 2185, 2201, 2202, 2205, 2224, 2253, 2276, 2286, 2292, 2293, 2305, 2325, 2326, 2328],
            "–ì—Ä—É–ø–ø–∞ 5": [21, 22, 23, 24, 25, 67, 68, 69, 112, 113, 114, 115, 120, 214, 1002, 1007, 2160, 2163, 2168, 2190, 2221, 2223, 2234, 2243, 2266, 2272, 2283, 2290, 2296, 2329],
            "–ì—Ä—É–ø–ø–∞ 6": [26, 27, 28, 29, 70, 71, 72, 116, 117, 118, 119, 121, 122, 1003, 2133, 2152, 2173, 2200, 2208, 2225, 2226, 2228, 2229, 2245, 2249, 2252, 2256, 2264, 2289, 2301, 2317, 2331, 2339],
            "–ì—Ä—É–ø–ø–∞ 7": [17, 30, 31, 32, 33, 34, 73, 74, 123, 124, 125, 126, 128, 152, 1006, 2001, 2148, 2157, 2171, 2172, 2199, 2203, 2215, 2244, 2248, 2255, 2262, 2269, 2285, 2304, 2309, 2337, 2340],
            "–ì—Ä—É–ø–ø–∞ 8": [35, 75, 76, 77, 129, 130, 217, 1008, 1009, 1011, 2143, 2169, 2176, 2184, 2210, 2214, 2220, 2230, 2237, 2258, 2278, 2281, 2291, 2298, 2306, 2307, 2310, 2313, 2314, 2338],
            "–ì—Ä—É–ø–ø–∞ 9": [36, 37, 38, 39, 40, 41, 42, 43, 78, 79, 80, 81, 82, 131, 132, 133, 2154, 2161, 2183, 2188, 2193, 2212, 2233, 2242, 2260, 2261, 2267, 2282, 2287, 2300, 2312, 2324, 2332],
            "–ì—Ä—É–ø–ø–∞ 10": [44, 45, 46, 83, 84, 85, 86, 87, 88, 133, 134, 135, 136, 137, 138, 139, 140, 2151, 2162, 2166, 2182, 2194, 2195, 2241, 2261, 2270, 2297, 2302, 2320, 2327, 2334, 2343, 2344],
            "–ì—Ä—É–ø–ø–∞ 11": [47, 48, 49, 50, 51, 52, 53, 89, 90, 91, 92, 141, 142, 143, 144, 145, 146, 147, 216, 2219, 2236, 2259, 2263, 2265, 2273, 2274, 2277, 2280, 2284, 2295, 2308, 2322, 2335, 2167, 2342]
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ avito_id
        self.all_target_ids = []
        for group_name, ids in self.target_groups.items():
            self.all_target_ids.extend(ids)
        
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º–µ—Ç—Ä–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏")
        print(f"üìä –í—Å–µ–≥–æ —Ü–µ–ª–µ–≤—ã—Ö avito_id: {len(self.all_target_ids)}")
        print(f"üìã –ì—Ä—É–ø–ø—ã: {', '.join(self.target_groups.keys())}")
    
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ cookies"""
        try:
            if not os.path.exists(self.cookies_file):
                print(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {cookies_data['timestamp']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data['cookies'])}")
            return cookies_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver"""
        try:
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
            
            options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            options.add_argument("--headless")  # Headless –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
            # User-Agent
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--window-size=1920,1080")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-features=VizDisplayCompositor")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            self.driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            print("‚úÖ Selenium WebDriver –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Selenium: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ WebDriver"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω
            self.driver.get("https://www.avito.ru")
            time.sleep(2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            for cookie in cookies_data['cookies']:
                try:
                    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
                    if 'expiry' in cookie:
                        del cookie['expiry']
                    if 'sameSite' in cookie:
                        del cookie['sameSite']
                    
                    self.driver.add_cookie(cookie)
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookie: {e}")
            
            print("‚úÖ Cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def detect_metro_station(self, avito_id):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ –ø–æ avito_id"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            base_url = "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg"
            target_url = f"{base_url}?metro={avito_id}"
            
            print(f"   üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: {target_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(target_url)
            time.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ HTML
            page_title = self.driver.title
            page_source = self.driver.page_source
            
            print(f"   üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {page_title}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
            metro_name = self.extract_metro_from_title(page_title, page_source)
            
            if metro_name:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–æ: {metro_name}")
                return metro_name
            else:
                print(f"   ‚ùå –ú–µ—Ç—Ä–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
                return None
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–æ: {e}")
            return None
    
    def extract_metro_from_title(self, page_title, page_source):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '–∂–∏–ª—å–µ —É –º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ]'"""
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω 1: "–∂–∏–ª—å–µ —É –º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏]"
            metro_pattern1 = r'–∂–∏–ª—å–µ\s+—É\s+–º–µ—Ç—Ä–æ\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+?)(?:\s*[:\|]|\s*-\s*–ê–≤–∏—Ç–æ|\s*$)'
            match1 = re.search(metro_pattern1, page_title, re.IGNORECASE)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 2: "—É –º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏]" - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π
            metro_pattern2 = r'—É\s+–º–µ—Ç—Ä–æ\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+?)(?:\s*[:\|]|\s*-\s*–ê–≤–∏—Ç–æ|\s*$)'
            match2 = re.search(metro_pattern2, page_title, re.IGNORECASE)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 3: "–º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏]"
            metro_pattern3 = r'–º–µ—Ç—Ä–æ\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+?)(?:\s*[:\|]|\s*-\s*–ê–≤–∏—Ç–æ|\s*$)'
            match3 = re.search(metro_pattern3, page_title, re.IGNORECASE)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 4: "–ö—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É —É –º–µ—Ç—Ä–æ [–ù–∞–∑–≤–∞–Ω–∏–µ]"
            metro_pattern4 = r'–ö—É–ø–∏—Ç—å\s+–∫–≤–∞—Ä—Ç–∏—Ä—É\s+—É\s+–º–µ—Ç—Ä–æ\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+?)(?:\s*[:\|]|\s*-\s*–ê–≤–∏—Ç–æ|\s*$)'
            match4 = re.search(metro_pattern4, page_title, re.IGNORECASE)
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω 5: –ø–æ–∏—Å–∫ –≤ HTML-–∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            metro_pattern5 = r'—É\s+–º–µ—Ç—Ä–æ\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+?)(?:\s*[:\|]|\s*-\s*–ê–≤–∏—Ç–æ|\s*$)'
            match5 = re.search(metro_pattern5, page_source, re.IGNORECASE)
            
            metro_name = None
            if match1:
                metro_name = match1.group(1).strip()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 1: {metro_name}")
            elif match2:
                metro_name = match2.group(1).strip()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 2: {metro_name}")
            elif match3:
                metro_name = match3.group(1).strip()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 3: {metro_name}")
            elif match4:
                metro_name = match4.group(1).strip()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 4: {metro_name}")
            elif match5:
                metro_name = match5.group(1).strip()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 5: {metro_name}")
            
            if not metro_name:
                return None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            metro_name = re.sub(r'\s+', ' ', metro_name).strip()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–∏ —Ç–∏–ø–∞ "—É–ª–∏—Ü–∞ 1905 –≥–æ–¥–∞"
            if re.search(r'—É–ª–∏—Ü–∞.*\d+$', metro_name, re.IGNORECASE):
                return None
            
            # –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –Ω–∞–∑–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            metro_name = re.sub(r'\d+$', '', metro_name).strip()
            
            # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ
            metro_name = re.sub(r'[,\-\.\s]+$', '', metro_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ
            if len(metro_name) < 2:
                return None
            
            return metro_name
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç—Ä–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return None
    
    async def find_matching_station(self, metro_name):
        """–ò—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é –≤ –ë–î"""
        try:
            conn = await asyncpg.connect(self.database_url)
            
            # –ò—â–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            result = await conn.fetchrow("""
                SELECT id, name, line_id 
                FROM metro 
                WHERE name ILIKE $1 AND is_msk IS NOT FALSE
                ORDER BY id
                LIMIT 1
            """, metro_name)
            
            if result:
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –≤ –ë–î: {result['name']} (ID: {result['id']})")
                await conn.close()
                return result
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
            result = await conn.fetchrow("""
                SELECT id, name, line_id 
                FROM metro 
                WHERE name ILIKE $1 AND is_msk IS NOT FALSE
                ORDER BY id
                LIMIT 1
            """, f"%{metro_name}%")
            
            if result:
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –≤ –ë–î (—á–∞—Å—Ç–∏—á–Ω–æ–µ): {result['name']} (ID: {result['id']})")
                await conn.close()
                return result
            
            await conn.close()
            print(f"   ‚ùå –°—Ç–∞–Ω—Ü–∏—è '{metro_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return None
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏ {metro_name}: {e}")
            return None
    
    async def get_existing_avito_ids(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ avito_id –∏–∑ –ë–î"""
        try:
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ avito_id
            result = await conn.fetch("""
                SELECT avito_id 
                FROM metro 
                WHERE avito_id IS NOT NULL
                ORDER BY avito_id
            """)
            
            await conn.close()
            
            existing_ids = [row['avito_id'] for row in result]
            return set(existing_ids)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö avito_id: {e}")
            return set()
    
    async def update_metro_avito_id(self, metro_id, avito_id):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç avito_id –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ"""
        try:
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π avito_id –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            current = await conn.fetchrow("""
                SELECT avito_id FROM metro WHERE id = $1
            """, metro_id)
            
            old_avito_id = current['avito_id'] if current else None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º avito_id
            result = await conn.execute("""
                UPDATE metro 
                SET avito_id = $1 
                WHERE id = $2
            """, avito_id, metro_id)
            
            await conn.close()
            
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {old_avito_id} ‚Üí {avito_id}")
            return True, old_avito_id
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è avito_id –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {metro_id}: {e}")
            return False, None
    
    async def process_target_groups(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã"""
        try:
            print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º–µ—Ç—Ä–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏")
            print("=" * 80)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            if not self.setup_selenium():
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ avito_id –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            existing_avito_ids = await self.get_existing_avito_ids()
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö avito_id –≤ –ë–î: {len(existing_avito_ids)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
            for group_name, avito_ids in self.target_groups.items():
                print(f"\nüìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {group_name} ({len(avito_ids)} avito_id)...")
                
                group_results = []
                
                for avito_id in avito_ids:
                    print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º avito_id={avito_id}...")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ avito_id –≤ –ë–î
                    if avito_id in existing_avito_ids:
                        print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î)")
                        result = {
                            'avito_id': avito_id,
                            'metro_name': None,
                            'db_id': None,
                            'db_name': None,
                            'line_id': None,
                            'old_avito_id': avito_id,
                            'new_avito_id': avito_id,
                            'status': 'already_exists'
                        }
                        group_results.append(result)
                        self.results.append(result)
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏—é –ø–æ avito_id
                    metro_info = self.detect_metro_station(avito_id)
                    
                    if not metro_info:
                        print(f"   ‚ùå –°—Ç–∞–Ω—Ü–∏—è —Å avito_id={avito_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ")
                        result = {
                            'avito_id': avito_id,
                            'metro_name': None,
                            'db_id': None,
                            'db_name': None,
                            'line_id': None,
                            'old_avito_id': None,
                            'new_avito_id': avito_id,
                            'status': 'not_found_on_avito'
                        }
                        group_results.append(result)
                        self.results.append(result)
                        continue
                    
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é –≤ –ë–î
                    db_station = await self.find_matching_station(metro_info)
                    
                    if not db_station:
                        print(f"   ‚ùå –°—Ç–∞–Ω—Ü–∏—è '{metro_info}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                        result = {
                            'avito_id': avito_id,
                            'metro_name': metro_info,
                            'db_id': None,
                            'db_name': None,
                            'line_id': None,
                            'old_avito_id': None,
                            'new_avito_id': avito_id,
                            'status': 'not_found_in_db'
                        }
                        group_results.append(result)
                        self.results.append(result)
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º avito_id –≤ –ë–î
                    success, old_avito_id = await self.update_metro_avito_id(db_station['id'], avito_id)
                    
                    if success:
                        result = {
                            'avito_id': avito_id,
                            'metro_name': metro_info,
                            'db_id': db_station['id'],
                            'db_name': db_station['name'],
                            'line_id': db_station['line_id'],
                            'old_avito_id': old_avito_id,
                            'new_avito_id': avito_id,
                            'status': 'updated'
                        }
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ avito_id={avito_id} –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ '{metro_info}'")
                    else:
                        result = {
                            'avito_id': avito_id,
                            'metro_name': metro_info,
                            'db_id': db_station['id'],
                            'db_name': db_station['name'],
                            'line_id': db_station['line_id'],
                            'old_avito_id': old_avito_id,
                            'new_avito_id': avito_id,
                            'status': 'update_failed'
                        }
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è avito_id={avito_id}")
                    
                    group_results.append(result)
                    self.results.append(result)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    time.sleep(2)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ
                updated = len([r for r in group_results if r['status'] == 'updated'])
                skipped = len([r for r in group_results if r['status'] == 'already_exists'])
                print(f"\nüìä {group_name} - –†–µ–∑—É–ª—å—Ç–∞—Ç: {updated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_results()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return False
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                    print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except:
                    pass
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            result_data = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'total_target_ids': len(self.all_target_ids),
                'total_processed': len(self.results),
                'target_groups': self.target_groups,
                'results': self.results
            }
            
            filename = f"complete_groups_results_{time.strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updated = len([r for r in self.results if r['status'] == 'updated'])
            skipped = len([r for r in self.results if r['status'] == 'already_exists'])
            not_found_db = len([r for r in self.results if r['status'] == 'not_found_in_db'])
            not_found_avito = len([r for r in self.results if r['status'] == 'not_found_on_avito'])
            update_failed = len([r for r in self.results if r['status'] == 'update_failed'])
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ avito_id: {len(self.all_target_ids)}")
            print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î: {updated}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {skipped}")
            print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {not_found_db}")
            print(f"   –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ AVITO: {not_found_avito}")
            print(f"   –û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_failed}")
            print(f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.results)}")
            
            # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            if updated > 0:
                print(f"\n‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–¢–ê–ù–¶–ò–ò:")
                for result in self.results:
                    if result['status'] == 'updated':
                        print(f"   {result['avito_id']:4d} - {result['metro_name']} (–ë–î: {result['db_name']})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return
    
    updater = CompleteGroupsUpdater()
    updater.database_url = database_url
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    await updater.process_target_groups()

if __name__ == "__main__":
    asyncio.run(main())
