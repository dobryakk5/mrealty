#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è metro_id –≤ —Ç–∞–±–ª–∏—Ü–µ ads_cian
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É metro –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

async def migrate_metro_id():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è metro_id"""
    if not DATABASE_URL:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã metro
        metro_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'metro'
            );
        """)
        
        if not metro_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ metro –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ metro_mapping.py")
            return
        
        metro_count = await conn.fetchval("SELECT COUNT(*) FROM metro")
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ metro –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç {metro_count} —Å—Ç–∞–Ω—Ü–∏–π")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ metro_id
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'ads_cian' 
                AND column_name = 'metro_id'
            );
        """)
        
        if not column_exists:
            print("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É metro_id...")
            await conn.execute("""
                ALTER TABLE ads_cian 
                ADD COLUMN metro_id INTEGER;
            """)
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ metro_id –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_ads_cian_metro_id ON ads_cian(metro_id);
            """)
            print("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è metro_id —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ metro_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –®–∞–≥ 3: –ó–∞–ø–æ–ª–Ω—è–µ–º metro_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        print("\nüìù –ó–∞–ø–æ–ª–Ω—è–µ–º metro_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç—Ä–æ, –Ω–æ –±–µ–∑ metro_id
        records = await conn.fetch("""
            SELECT id, metro, metro_id
            FROM ads_cian
            WHERE metro IS NOT NULL AND metro != '' AND metro_id IS NULL
            ORDER BY id
        """)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        if records:
            updated_count = 0
            not_found_count = 0
            
            for record in records:
                metro_name = record['metro']
                record_id = record['id']
                
                # –ò—â–µ–º metro_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞–Ω—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ metro
                metro_id = await conn.fetchval("""
                    SELECT id FROM metro 
                    WHERE LOWER(name) = LOWER($1)
                    LIMIT 1
                """, metro_name)
                
                if metro_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    await conn.execute("""
                        UPDATE ads_cian 
                        SET metro_id = $1 
                        WHERE id = $2
                    """, metro_id, record_id)
                    updated_count += 1
                    
                    if updated_count % 10 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                        print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {updated_count}/{len(records)}")
                else:
                    not_found_count += 1
                    print(f"  ‚ùå ID {record_id}: '{metro_name}' ‚Üí metro_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            print(f"\nüìä –ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
            print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count}")
        else:
            print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç metro_id")
        
        # –®–∞–≥ 4: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 50)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_count = await conn.fetchval("SELECT COUNT(*) FROM ads_cian")
        metro_records = await conn.fetchval("SELECT COUNT(*) FROM ads_cian WHERE metro IS NOT NULL AND metro != ''")
        with_metro_id = await conn.fetchval("SELECT COUNT(*) FROM ads_cian WHERE metro_id IS NOT NULL")
        
        print(f"–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_count}")
        print(f"–° —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Ç—Ä–æ: {metro_records}")
        print(f"–° metro_id: {with_metro_id}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è metro_id: {with_metro_id/metro_records*100:.1f}%" if metro_records > 0 else "0%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç–∞–Ω—Ü–∏—è–º
        top_stations = await conn.fetch("""
            SELECT m.name, COUNT(*) as count
            FROM ads_cian a
            JOIN metro m ON a.metro_id = m.id
            GROUP BY m.id, m.name
            ORDER BY count DESC
            LIMIT 10
        """)
        
        if top_stations:
            print(f"\nüèÜ –¢–æ–ø-10 —Å—Ç–∞–Ω—Ü–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
            print("-" * 50)
            for i, station in enumerate(top_stations, 1):
                print(f"{i:2}. {station['name']:<25} - {station['count']:>4} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        await conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(migrate_metro_id())
