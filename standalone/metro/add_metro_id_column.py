#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ metro_id –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É ads_cian
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

async def add_metro_id_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É metro_id –≤ —Ç–∞–±–ª–∏—Ü—É ads_cian"""
    if not DATABASE_URL:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ metro_id
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'ads_cian' 
                AND column_name = 'metro_id'
            );
        """)
        
        if column_exists:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ metro_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É metro_id
            await conn.execute("""
                ALTER TABLE ads_cian 
                ADD COLUMN metro_id INTEGER;
            """)
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ metro_id –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è metro_id
            await conn.execute("""
                CREATE INDEX IF NOT EXISTS idx_ads_cian_metro_id ON ads_cian(metro_id);
            """)
            print("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è metro_id —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        columns = await conn.fetch("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns
            WHERE table_name = 'ads_cian'
            ORDER BY ordinal_position
        """)
        
        print("\nüìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ads_cian:")
        print("-" * 60)
        for col in columns:
            nullable = "NULL" if col['is_nullable'] == 'YES' else "NOT NULL"
            print(f"{col['column_name']:<20} {col['data_type']:<15} {nullable}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ metro_id
        if column_exists:
            metro_stats = await conn.fetch("""
                SELECT 
                    CASE 
                        WHEN metro_id IS NULL THEN '–ë–µ–∑ metro_id'
                        ELSE '–° metro_id'
                    END as status,
                    COUNT(*) as count
                FROM ads_cian
                GROUP BY status
                ORDER BY status
            """)
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ metro_id:")
            print("-" * 40)
            for row in metro_stats:
                print(f"{row['status']}: {row['count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        await conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(add_metro_id_column())
