#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è metro_id –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö —Ç–∞–±–ª–∏—Ü—ã ads_cian
–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv
from typing import Optional

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

async def fill_metro_ids():
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç metro_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ ads_cian"""
    if not DATABASE_URL:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        return
    
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ metro_id
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1 FROM information_schema.columns 
                WHERE table_name = 'ads_cian' 
                AND column_name = 'metro_id'
            );
        """)
        
        if not column_exists:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ metro_id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ add_metro_id_column.py")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –º–µ—Ç—Ä–æ, –Ω–æ –±–µ–∑ metro_id
        records = await conn.fetch("""
            SELECT id, metro, metro_id
            FROM ads_cian
            WHERE metro IS NOT NULL AND metro != ''
            ORDER BY id
            LIMIT 100
        """)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π —Å –º–µ—Ç—Ä–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        if not records:
            print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç metro_id")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        updated_count = 0
        not_found_count = 0
        
        for record in records:
            metro_name = record['metro']
            record_id = record['id']
            
            # –ò—â–µ–º metro_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞–Ω—Ü–∏–∏
            metro_id = await find_metro_id_by_name(conn, metro_name)
            
            if metro_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                await conn.execute("""
                    UPDATE ads_cian 
                    SET metro_id = $1 
                    WHERE id = $2
                """, metro_id, record_id)
                updated_count += 1
                print(f"  ‚úÖ ID {record_id}: '{metro_name}' ‚Üí metro_id = {metro_id}")
            else:
                not_found_count += 1
                print(f"  ‚ùå ID {record_id}: '{metro_name}' ‚Üí metro_id –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"\nüìä –ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await conn.fetch("""
            SELECT 
                CASE 
                    WHEN metro_id IS NULL THEN '–ë–µ–∑ metro_id'
                    ELSE '–° metro_id'
                END as status,
                COUNT(*) as count
            FROM ads_cian
            WHERE metro IS NOT NULL AND metro != ''
            GROUP BY status
            ORDER BY status
        """)
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ metro_id:")
        print("-" * 40)
        for row in stats:
            print(f"{row['status']}: {row['count']} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        
        await conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def find_metro_id_by_name(conn: asyncpg.Connection, metro_name: str) -> Optional[int]:
    """–ù–∞—Ö–æ–¥–∏—Ç ID —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro"""
    if not metro_name:
        return None
    
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        normalized_name = metro_name.lower().strip()
        
        # –£–±–∏—Ä–∞–µ–º "–º." –≤ –Ω–∞—á–∞–ª–µ
        if normalized_name.startswith('–º.'):
            normalized_name = normalized_name[2:].strip()
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        metro_id = await conn.fetchval("""
            SELECT id FROM metro 
            WHERE LOWER(name) = $1
            LIMIT 1
        """, normalized_name)
        
        if metro_id:
            return metro_id
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ
        metro_id = await conn.fetchval("""
            SELECT id FROM metro 
            WHERE LOWER(name) LIKE $1
            LIMIT 1
        """, f"%{normalized_name}%")
        
        return metro_id
        
    except Exception as e:
        print(f"[DB] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ metro_id –¥–ª—è '{metro_name}': {e}")
        return None

if __name__ == '__main__':
    asyncio.run(fill_metro_ids())
