# handlers_common.py
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_file import BufferedInputFile
from aiogram import Bot, Dispatcher
#from db_handler import update_dictionary, get_today_purchases, get_user_purchases, update_last_purchase_field, get_last_purchase, delete_last_purchase
from start_handlers import on_start
import pandas as pd
import textwrap
#import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime
import asyncpg
from asyncpg.exceptions import UniqueViolationError
import logging
#import uuid
#import redis
import os
from dotenv import load_dotenv


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv()
BOT_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


async def process_user_input(
    raw_text: str, 
    message: Message,
    handle_new_expense_func
):
    lower = raw_text.lower().strip()

    # –ö–Ω–æ–ø–∫–∞ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª
    if lower == "üìò –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        await message.answer(
        textwrap.dedent("""\
            üí∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–ø–ª–∞—Ç—É: –Ω–∞–ø–∏—à–∏ ¬´–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–µ–Ω–∞¬ª.
            üßæ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —á–µ–∫–∞: –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ QR-–∫–æ–¥–∞ —Å —á–µ–∫–∞
            üéôÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≥–æ–ª–æ—Å–æ–º: –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ.
            üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏: –≤–≤–µ–¥–∏ "—É–¥–∞–ª–∏" –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
              ‚Äì ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
              ‚Äì ¬´–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
              ‚Äì ¬´–¶–µ–Ω–∞ –ù–æ–≤–æ–µ–ó–Ω–∞—á–µ–Ω–∏–µ¬ª
            üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –æ–ø–ª–∞—Ç: –º–µ–Ω—é ¬´–°–ø–∏—Å–æ–∫¬ª 
            üî¢ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –æ–ø–ª–∞—Ç—ã –≤ Excel: –º–µ–Ω—é ¬´–¢–∞–±–ª–∏—Ü–∞¬ª 
            üí∞ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã: –Ω–∞–ø–∏—à–∏ "–¥–æ—Ö–æ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è 49505"
             - —Å–ª–æ–≤–æ "–¥–æ—Ö–æ–¥" –≤ –Ω–∞—á–∞–ª–µ –≥–æ–≤–æ—Ä–∏—Ç –±–æ—Ç—É –ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –¥–æ—Ö–æ–¥—ã.

            –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ üîÑ: –Ω–∞–ø–∏—à–∏ /start 
        """)
        )
        return

    if lower == "üìà –≥—Ä–∞—Ñ–∏–∫–∏":
        await message.answer(
            "üìä –ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üîò –ö—Ä—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")],
                    [KeyboardButton(text="üìä –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å")],
                    [KeyboardButton(text="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å")],
                    [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        return

    if lower == "üí∞ –¥–æ—Ö–æ–¥—ã":
        from db_handler import get_user_incomes_days
        rows = await get_user_incomes_days(message.from_user.id, 30)
        if not rows:
            return await message.answer("–î–æ—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç.")
        lines = [
            f"{r['source'][:25]:<25} {int(r['amount']):>10,}".replace(",", ".")
            for r in rows
        ]
        total = sum(int(r['amount']) for r in rows)
        lines.append("")
        lines.append(f"{'–ò—Ç–æ–≥–æ –∑–∞ 30 –¥–Ω–µ–π:':<25} {total:>10,}".replace(",", "."))
        await message.answer(f"<pre>{chr(10).join(lines)}</pre>", parse_mode="HTML")
        return

    if lower == "üîò –∫—Ä—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await show_pie_chart(message.from_user.id, message)
        return

    if lower == "üìä –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å":
        await show_bar_chart_by_day(message.from_user.id, message)
        return

    if lower == "üìä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–¥–µ–Ω—å":
        await show_daily_bar_chart(message.from_user.id, message)
        return

    if lower == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await on_start(message)
        return
    
    if lower in ("üö™ –∫–∞–±–∏–Ω–µ—Ç", "–∫–∞–±–∏–Ω–µ—Ç"):
        user_id = str(message.from_user.id)
        token = str(uuid.uuid4())

        r.setex(f"dash_token:{token}", 300, user_id)
        dash_url = f"https://ai5.space/auth?token={token}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîì –í–æ–π—Ç–∏ –≤ –∫–∞–±–∏–Ω–µ—Ç", url=dash_url)]
        ])

        await message.answer(
            "üîí –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç):\n\n",
            reply_markup=keyboard,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        return

    if lower == "üìÑ —Å–ø–∏—Å–æ–∫":
        await show_today_purchases(message.from_user.id, message)
        return
    
    if lower == "—É–¥–∞–ª–∏":
        success = await delete_last_purchase(message.from_user.id)
        if success:
            await message.answer("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return


    if lower == "üî¢ —Ç–∞–±–ª–∏—Ü–∞":
        import os
        filename = "Fin_a_bot.xlsx"
        await export_purchases_to_excel(message.from_user.id, filename)
        with open(filename, 'rb') as f:
            file_data = f.read()
        await message.answer_document(BufferedInputFile(file_data, filename))
        os.remove(filename)
        return

    correction_commands = {
        "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "category",
        "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "subcategory",
        "—Ü–µ–Ω–∞": "price"
    }

    for prefix, field in correction_commands.items():
        if lower.startswith(prefix):
            parts = raw_text.split(maxsplit=1)
            if len(parts) < 2 or not parts[1].strip():
                return await message.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ ¬´{prefix.capitalize()}¬ª")
            return await handle_correction(field, parts[1].strip(), message)

    await handle_new_expense_func(raw_text, message)

