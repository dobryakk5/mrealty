#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from watermark_remover import watermark_remover
from photo_processor import photo_processor

def test_watermark_removal():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏ –¶–ò–ê–ù
    test_urls = [
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≤–æ–¥—è–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏
        "https://images.cdn-cian.ru/images/2504097329-1.jpg",
        "https://images.cdn-cian.ru/images/2504097383-1.jpg"
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
    print("-" * 50)
    
    for i, url in enumerate(test_urls):
        print(f"\nüì∏ –¢–µ—Å—Ç–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {url}")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            import requests
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            image_data = response.content
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            import cv2
            import numpy as np
            nparr = np.frombuffer(image_data, np.uint8)
            image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
            
            if image is not None:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
                watermark_region = watermark_remover.detect_watermark_region(image)
                
                if watermark_region:
                    x1, y1, x2, y2 = watermark_region
                    print(f"‚úÖ –û–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ({x1}, {y1}) - ({x2}, {y2})")
                    print(f"   –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏: {x2-x1} x {y2-y1} –ø–∏–∫—Å–µ–ª–µ–π")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
    print("\n\n2Ô∏è‚É£ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
    print("-" * 50)
    
    methods = ['auto', 'inpainting', 'blur']
    
    for method in methods:
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É—é –º–µ—Ç–æ–¥: {method}")
        print("-" * 30)
        
        for i, url in enumerate(test_urls):
            print(f"üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –º–µ—Ç–æ–¥–æ–º {method}")
            
            try:
                result = watermark_remover.process_image_from_url(url, method)
                
                if result:
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç–æ–¥–æ–º {method}")
                    print(f"   –†–∞–∑–º–µ—Ä: {result['size']}")
                    print(f"   –§–æ—Ä–º–∞—Ç: {result['format']}")
                    print(f"   –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª–µ–Ω: {result.get('watermark_removed', False)}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–æ–º {method}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç–æ–¥–æ–º {method}: {e}")
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å photo_processor
    print("\n\n3Ô∏è‚É£ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å photo_processor")
    print("-" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        processed_photos = photo_processor.process_photos_for_embedded_html(
            test_urls, 
            remove_watermarks=False, 
            auto_remove_cian=True, 
            watermark_method='auto'
        )
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(processed_photos)}")
        
        for i, photo in enumerate(processed_photos):
            print(f"\nüì∏ –§–æ—Ç–æ {i+1}:")
            print(f"   URL: {photo['url']}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {photo.get('processed', False)}")
            print(f"   –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª–µ–Ω: {photo.get('watermark_removed', False)}")
            print(f"   –ú–µ—Ç–æ–¥: {photo.get('method', 'unknown')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å photo_processor: {e}")

def test_with_local_image(image_path: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ —Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return
    
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {image_path}")
    print("=" * 60)
    
    try:
        # –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import cv2
        image = cv2.imread(image_path)
        
        if image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        print(f"üì∏ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape[1]} x {image.shape[0]}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        watermark_region = watermark_remover.detect_watermark_region(image)
        
        if watermark_region:
            x1, y1, x2, y2 = watermark_region
            print(f"‚úÖ –û–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ({x1}, {y1}) - ({x2}, {y2})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            print("\nüîß –¢–µ—Å—Ç–∏—Ä—É—é —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞...")
            
            # –ú–µ—Ç–æ–¥ inpainting
            result_inpainting = watermark_remover.remove_watermark_inpainting(image, watermark_region)
            if result_inpainting is not None:
                print("‚úÖ Inpainting –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_path = image_path.replace('.', '_no_watermark_inpainting.')
                cv2.imwrite(output_path, result_inpainting)
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            # –ú–µ—Ç–æ–¥ blur + —Ç–µ–∫—Å—Ç
            result_blur = watermark_remover.remove_watermark_blur(image, watermark_region)
            if result_blur is not None:
                print("‚úÖ Blur + —Ç–µ–∫—Å—Ç –º–µ—Ç–æ–¥ —É—Å–ø–µ—à–µ–Ω")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_path = image_path.replace('.', '_no_watermark_blur.')
                cv2.imwrite(output_path, result_blur)
                print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∏–º
        image_path = sys.argv[1]
        test_with_local_image(image_path)
    else:
        # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–µ —Ç–µ—Å—Ç—ã
        test_watermark_removal()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
