#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
"""

import sys
from parse_cian_to_db import parse_arguments, parse_params_string, convert_time_period

def test_arguments():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:")
    sys.argv = ['test_args.py']
    args = parse_arguments()
    print(f"   args.params: {args.params}")
    print(f"   args.proxy: {args.proxy}")
    print(f"   args.no_proxy: {args.no_proxy}")
    
    # –¢–µ—Å—Ç 2: –° –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    sys.argv = ['test_args.py', '2d']
    args = parse_arguments()
    print(f"   args.params: {args.params}")
    print(f"   args.proxy: {args.proxy}")
    print(f"   args.no_proxy: {args.no_proxy}")
    
    # –¢–µ—Å—Ç 3: –° –ø—Ä–æ–∫—Å–∏
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏:")
    sys.argv = ['test_args.py', '1w', '--proxy']
    args = parse_arguments()
    print(f"   args.params: {args.params}")
    print(f"   args.proxy: {args.proxy}")
    print(f"   args.no_proxy: {args.no_proxy}")
    
    # –¢–µ—Å—Ç 4: –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏:")
    sys.argv = ['test_args.py', '2none', '--no-proxy']
    args = parse_arguments()
    print(f"   args.params: {args.params}")
    print(f"   args.proxy: {args.proxy}")
    print(f"   args.no_proxy: {args.no_proxy}")

def test_param_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("=" * 50)
    
    test_cases = [
        None,           # –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        "1d",           # –≤—Ç–æ—Ä–∏—á–∫–∞ –∑–∞ –¥–µ–Ω—å
        "2w",           # –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
        "1h",           # –≤—Ç–æ—Ä–∏—á–∫–∞ –∑–∞ —á–∞—Å
        "2none",        # –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        "1",            # —Ç–æ–ª—å–∫–æ —Ç–∏–ø
        "d",            # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥
        "invalid",      # –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    ]
    
    for params in test_cases:
        print(f"\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        try:
            property_type, time_period = parse_params_string(params)
            time_period_seconds = convert_time_period(time_period)
            print(f"   –¢–∏–ø: {property_type} ({'–≤—Ç–æ—Ä–∏—á–∫–∞' if property_type == 1 else '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏'})")
            print(f"   –ü–µ—Ä–∏–æ–¥: {time_period} -> {time_period_seconds}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    test_arguments()
    test_param_parsing()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
