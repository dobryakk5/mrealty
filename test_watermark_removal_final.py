#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import os
from watermark_remover import watermark_remover

def test_watermark_removal_with_save():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    print("üß™ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_urls = [
        "https://images.cdn-cian.ru/images/2504097329-1.jpg",
        "https://images.cdn-cian.ru/images/2504097383-1.jpg"
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = "final_watermark_removal_results"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")
    
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {output_dir}")
    
    for i, url in enumerate(test_urls):
        print(f"\nüì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}: {url}")
        print("-" * 50)
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            import requests
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            image_data = response.content
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            original_filename = f"{output_dir}/original_{i+1}.jpg"
            with open(original_filename, 'wb') as f:
                f.write(image_data)
            print(f"üíæ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {original_filename}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
            methods = ['inpainting', 'blur']
            
            for method in methods:
                print(f"üîß –¢–µ—Å—Ç–∏—Ä—É—é –º–µ—Ç–æ–¥: {method}")
                
                try:
                    result = watermark_remover.process_image_from_url(url, method)
                    
                    if result:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        output_filename = f"{output_dir}/result_{i+1}_{method}.jpg"
                        
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        import base64
                        img_data = base64.b64decode(result['base64'])
                        
                        with open(output_filename, 'wb') as f:
                            f.write(img_data)
                        
                        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_filename}")
                        print(f"   –†–∞–∑–º–µ—Ä: {result['size']}")
                        print(f"   –ú–µ—Ç–æ–¥: {result.get('method', 'unknown')}")
                        print(f"   –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ —É–¥–∞–ª–µ–Ω: {result.get('watermark_removed', False)}")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –º–µ—Ç–æ–¥–æ–º {method}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç–æ–¥–æ–º {method}: {e}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
    
    print(f"\nüìä –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
    print("üîç –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    print("\nüìã –§–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    for filename in sorted(os.listdir(output_dir)):
        file_path = os.path.join(output_dir, filename)
        file_size = os.path.getsize(file_path)
        print(f"   üìÑ {filename} ({file_size:,} –±–∞–π—Ç)")

def test_single_image(url: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    print(f"üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {url}")
    print("=" * 60)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import requests
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        image_data = response.content
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        import cv2
        import numpy as np
        nparr = np.frombuffer(image_data, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return
        
        height, width = image.shape[:2]
        print(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {width} x {height}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        watermark_region = watermark_remover.detect_cian_watermark_region(image)
        
        if watermark_region:
            x1, y1, x2, y2 = watermark_region
            region_width = x2 - x1
            region_height = y2 - y1
            
            print(f"\nüéØ –û–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞:")
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x1}, {y1}) - ({x2}, {y2})")
            print(f"   –†–∞–∑–º–µ—Ä: {region_width} x {region_height} –ø–∏–∫—Å–µ–ª–µ–π")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: –ø—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            right_quarter = width * 0.75
            bottom_quarter = height * 0.75
            
            if x1 > right_quarter and y1 > bottom_quarter:
                print("‚úÖ –û–±–ª–∞—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤ –ø—Ä–∞–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏")
            else:
                print("‚ö†Ô∏è –û–±–ª–∞—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–µ –≤ —Ç–æ–º –º–µ—Å—Ç–µ")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            vis_image = image.copy()
            cv2.rectangle(vis_image, (x1, y1), (x2, y2), (0, 255, 0), 3)
            cv2.putText(vis_image, f"Watermark: ({x1},{y1})-({x2},{y2})", 
                       (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            vis_filename = "watermark_region_visualization.jpg"
            cv2.imwrite(vis_filename, vis_image)
            print(f"üíæ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {vis_filename}")
            
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")

if __name__ == "__main__":
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥—É–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –¶–ò–ê–ù")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    test_watermark_removal_with_save()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ
    print("\n" + "=" * 60)
    test_single_image("https://images.cdn-cian.ru/images/2504097329-1.jpg")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É 'final_watermark_removal_results' –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
