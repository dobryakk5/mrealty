#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º metro.avito_id
"""

import json  # –ù—É–∂–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ cookies
import os
import time
import asyncio
import asyncpg
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import re
from datetime import datetime, timedelta
import base64
import gzip
import random

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
try:
    from parse_todb_avito import create_ads_avito_table, save_avito_ad
    DB_AVAILABLE = True
except ImportError:
    DB_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å parse_todb_avito –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config_parser import *
    CONFIG_LOADED = True
except ImportError:
    CONFIG_LOADED = False
    print("‚ö†Ô∏è –§–∞–π–ª config_parser.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

class EnhancedMetroParser:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if CONFIG_LOADED:
            self.max_cards = MAX_CARDS_PER_PAGE
            self.max_pages = MAX_PAGES
            self.metro_id = METRO_ID
            self.page_delay = PAGE_DELAY
            self.page_load_delay = PAGE_LOAD_DELAY
            self.cards_load_timeout = CARDS_LOAD_TIMEOUT
            self.headless_mode = HEADLESS_MODE
            self.cookies_file = COOKIES_FILE
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            self.enable_smooth_scroll = ENABLE_SMOOTH_SCROLL
            self.scroll_pause = SCROLL_PAUSE
            self.max_scroll_attempts = MAX_SCROLL_ATTEMPTS
            self.target_cards_on_scroll = TARGET_CARDS_ON_SCROLL
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.enable_db_save = ENABLE_DB_SAVE
            
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config_parser.py")
        else:
            self.max_cards = 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            self.max_pages = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            self.metro_id = 1   # ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro
            self.page_delay = 5
            self.page_load_delay = 5
            self.cards_load_timeout = 30
            self.headless_mode = False
            self.cookies_file = "avito_cookies.json"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.enable_smooth_scroll = True
            self.scroll_pause = 1.5
            self.max_scroll_attempts = 10
            self.target_cards_on_scroll = 50
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.enable_db_save = True
        
        self.driver = None
        self.database_url = None
        self.metro_avito_id = None  # avito_id –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç—Ä–æ
        
    def convert_relative_time_to_date(self, relative_time):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞—Ç—É"""
        try:
            if not relative_time:
                return None
                
            now = datetime.now()
            relative_time_lower = relative_time.lower().strip()
            
            print(f"üïê –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è: '{relative_time}' -> '{relative_time_lower}'")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if '—Å–µ–≥–æ–¥–Ω—è' in relative_time_lower:
                result = now.date()
                print(f"‚úÖ –°–µ–≥–æ–¥–Ω—è -> {result}")
                return result
            elif '–≤—á–µ—Ä–∞' in relative_time_lower:
                yesterday = now - timedelta(days=1)
                result = yesterday.date()
                print(f"‚úÖ –í—á–µ—Ä–∞ -> {result}")
                return result
            elif '–ø–æ–∑–∞–≤—á–µ—Ä–∞' in relative_time_lower:
                day_before_yesterday = now - timedelta(days=2)
                result = day_before_yesterday.date()
                print(f"‚úÖ –ü–æ–∑–∞–≤—á–µ—Ä–∞ -> {result}")
                return result
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
            time_patterns = [
                (r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s*–Ω–∞–∑–∞–¥', 'hours'),
                (r'(\d+)\s*(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)\s*–Ω–∞–∑–∞–¥', 'days'),
                (r'(\d+)\s*(–Ω–µ–¥–µ–ª|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é)\s*–Ω–∞–∑–∞–¥', 'weeks'),
                (r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü)\s*–Ω–∞–∑–∞–¥', 'months')
            ]
            
            for pattern, unit in time_patterns:
                match = re.search(pattern, relative_time_lower)
                if match:
                    count = int(match.group(1))
                    
                    if unit == 'hours':
                        target_time = now - timedelta(hours=count)
                    elif unit == 'days':
                        target_time = now - timedelta(days=count)
                    elif unit == 'weeks':
                        target_time = now - timedelta(weeks=count)
                    elif unit == 'months':
                        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ, –º–µ—Å—è—Ü = 30 –¥–Ω–µ–π
                        target_time = now - timedelta(days=count * 30)
                    
                    result = target_time.date()
                    print(f"‚úÖ {count} {unit} –Ω–∞–∑–∞–¥ -> {result}")
                    return result
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "12 –∏—é–ª—è 13:35")
            month_names = {
                '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
                '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
                '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
            }
            
            # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç "12 –∏—é–ª—è"
            for month_name, month_num in month_names.items():
                if month_name in relative_time_lower:
                    # –ò—â–µ–º –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞
                    day_match = re.search(r'(\d{1,2})\s+' + month_name, relative_time_lower)
                    if day_match:
                        day = int(day_match.group(1))
                        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                        year = now.year
                        
                        # –õ–û–ì–ò–ö–ê –ì–û–î–ê: –µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Ç–æ —ç—Ç–æ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
                        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–π—á–∞—Å –∞–≤–≥—É—Å—Ç 2025, –ø–∞—Ä—Å–∏—Ç—Å—è "12 –∏—é–ª—è" ‚Üí —ç—Ç–æ –∏—é–ª—å 2025 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                        # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏—Ç—Å—è "12 —è–Ω–≤–∞—Ä—è" ‚Üí —ç—Ç–æ —è–Ω–≤–∞—Ä—å 2025 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
                        
                        result = datetime(year, month_num, day).date()
                        print(f"‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ {day} {month_name} -> {result}")
                        return result
            
            # –ò—â–µ–º —Ñ–æ—Ä–º–∞—Ç "12.07" –∏–ª–∏ "12.07.2024"
            date_dot_patterns = [
                r'(\d{1,2})\.(\d{1,2})\.(\d{4})',  # 12.07.2024
                r'(\d{1,2})\.(\d{1,2})'            # 12.07
            ]
            
            for pattern in date_dot_patterns:
                match = re.search(pattern, relative_time_lower)
                if match:
                    if len(match.groups()) == 2:
                        # –§–æ—Ä–º–∞—Ç "12.07"
                        day = int(match.group(1))
                        month = int(match.group(2))
                        year = now.year
                        
                        # –õ–û–ì–ò–ö–ê –ì–û–î–ê: –µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, —Ç–æ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                        # –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–π—á–∞—Å –∞–≤–≥—É—Å—Ç 2025, –ø–∞—Ä—Å–∏—Ç—Å—è "12.07" ‚Üí —ç—Ç–æ –∏—é–ª—å 2025 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
                        # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –Ω–∞ –≥–æ–¥ –≤–ø–µ—Ä–µ–¥
                        
                        result = datetime(year, month, day).date()
                        print(f"‚úÖ –§–æ—Ä–º–∞—Ç DD.MM -> {result}")
                        return result
                    
                    elif len(match.groups()) == 3:
                        # –§–æ—Ä–º–∞—Ç "12.07.2024"
                        day = int(match.group(1))
                        month = int(match.group(2))
                        year = int(match.group(3))
                        result = datetime(year, month, day).date()
                        print(f"‚úÖ –§–æ—Ä–º–∞—Ç DD.MM.YYYY -> {result}")
                        return result
            
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è: '{relative_time}', –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            return datetime.now().date()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –¥–∞—Ç—É '{relative_time}': {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            return datetime.now().date()
    
    async def get_metro_avito_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç avito_id –¥–ª—è –º–µ—Ç—Ä–æ –∏–∑ –ë–î"""
        try:
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            result = await conn.fetchrow("""
                SELECT id, name, avito_id 
                FROM metro 
                WHERE id = $1
            """, self.metro_id)
            
            await conn.close()
            
            if result:
                self.metro_avito_id = result['avito_id']
                metro_name = result['name']
                print(f"üìç –ú–µ—Ç—Ä–æ: {metro_name} (ID: {self.metro_id}, avito_id: {self.metro_avito_id})")
                return True
            else:
                print(f"‚ùå –ú–µ—Ç—Ä–æ —Å ID {self.metro_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è avito_id –¥–ª—è –º–µ—Ç—Ä–æ: {e}")
            return False
    
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ cookies"""
        try:
            if not os.path.exists(self.cookies_file):
                print(f"‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.cookies_file}")
                return False
            
            with open(self.cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if 'cookies' not in cookies_data or 'timestamp' not in cookies_data:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ cookies")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies
            if len(cookies_data['cookies']) < 10:
                print(f"‚ö†Ô∏è –ú–∞–ª–æ cookies: {len(cookies_data['cookies'])} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 10)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º timestamp
            from datetime import datetime
            try:
                timestamp_str = cookies_data['timestamp']
                timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
                now = datetime.now()
                age_hours = (now - timestamp).total_seconds() / 3600
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {timestamp_str}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data['cookies'])}")
                print(f"‚è∞ –í–æ–∑—Ä–∞—Å—Ç cookies: {age_hours:.1f} —á–∞—Å–æ–≤")
                
                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ cookies —Å—Ç–∞—Ä—ã–µ
                if age_hours > 24:
                    print("‚ö†Ô∏è Cookies —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤, –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã")
                if age_hours > 72:
                    print("üö® Cookies —Å—Ç–∞—Ä—à–µ 72 —á–∞—Å–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç cookies: {e}")
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {cookies_data['timestamp']}")
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data['cookies'])}")
            
            return cookies_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver"""
        try:
            options = Options()
            
            # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            
            # Headless —Ä–µ–∂–∏–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if hasattr(self, 'headless_mode') and self.headless_mode:
                options.add_argument("--headless")
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ headless —Ä–µ–∂–∏–º–µ")
            else:
                print("üñ•Ô∏è –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
            
            # User-Agent
            options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
            
            # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
            options.add_argument("--window-size=1920,1080")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-features=VizDisplayCompositor")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_argument("--disable-extensions-except")
            options.add_argument("--disable-plugins-discovery")
            options.add_argument("--no-first-run")
            options.add_argument("--no-default-browser-check")
            options.add_argument("--disable-default-apps")
            options.add_argument("--disable-sync")
            options.add_argument("--disable-translate")
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
            options.add_argument("--disable-features=TranslateUI")
            options.add_argument("--disable-ipc-flooding-protection")
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            options.add_experimental_option("prefs", {
                "profile.default_content_setting_values.notifications": 2,
                "profile.default_content_settings.popups": 0,
                "profile.managed_default_content_settings.images": 2
            })
            
            print("üîß –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
            self.driver = webdriver.Chrome(options=options)
            
            # –£–±–∏—Ä–∞–µ–º webdriver
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'plugins', {
                    get: () => [1, 2, 3, 4, 5]
                });
            """)
            
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'languages', {
                    get: () => ['ru-RU', 'ru', 'en-US', 'en']
                });
            """)
            
            self.driver.execute_script("""
                Object.defineProperty(navigator, 'permissions', {
                    get: () => ({
                        query: () => Promise.resolve({ state: 'granted' })
                    })
                });
            """)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ –¥—Ä–∞–π–≤–µ—Ä—É"""
        try:
            if not cookies_data or 'cookies' not in cookies_data:
                print("‚ùå –î–∞–Ω–Ω—ã–µ cookies –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                return False
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ cookies –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {len(cookies_data['cookies'])}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AVITO...")
            self.driver.get("https://avito.ru")
            time.sleep(5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ –∑–∞–≥—Ä—É–∑–∫—É
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ AVITO –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ AVITO –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å —á–∞—Å—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            applied_count = 0
            failed_count = 0
            
            for i, cookie in enumerate(cookies_data['cookies']):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if 'name' not in cookie or 'value' not in cookie:
                        print(f"‚ö†Ô∏è Cookie {i+1} –ø—Ä–æ–ø—É—â–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                        failed_count += 1
                        continue
                    
                    cookie_dict = {
                        'name': cookie['name'],
                        'value': cookie['value'],
                        'domain': cookie.get('domain', ''),
                        'path': cookie.get('path', '/')
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if cookie.get('expiry'):
                        cookie_dict['expiry'] = cookie['expiry']
                    if cookie.get('secure'):
                        cookie_dict['secure'] = cookie['secure']
                    if cookie.get('httpOnly'):
                        cookie_dict['httpOnly'] = cookie['httpOnly']
                    if cookie.get('sameSite'):
                        cookie_dict['sameSite'] = cookie['sameSite']
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º cookie
                    self.driver.add_cookie(cookie_dict)
                    applied_count += 1
                    
                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∂–Ω—ã—Ö cookies
                    if cookie['name'] in ['_avisc', 'srv_id', 'buyer_location_id']:
                        print(f"üîê –ü—Ä–∏–º–µ–Ω–µ–Ω –≤–∞–∂–Ω—ã–π cookie: {cookie['name']}")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookie {i+1} ({cookie.get('name', 'unknown')}): {e}")
                    failed_count += 1
                    continue
            
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {applied_count}")
            if failed_count > 0:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å: {failed_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cookies –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
            current_cookies = self.driver.get_cookies()
            print(f"üìä –¢–µ–∫—É—â–∏—Ö cookies –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {len(current_cookies)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º–∏ cookies
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å cookies...")
            self.driver.refresh()
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ AVITO
            current_url = self.driver.current_url
            if 'avito.ru' in current_url:
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Ç–µ–∫—É—â–∏–π URL: {current_url}")
            else:
                print(f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞: {current_url}")
            
            return applied_count > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def get_metro_url(self):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –º–µ—Ç—Ä–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id"""
        if not self.metro_avito_id:
            print("‚ùå avito_id –¥–ª—è –º–µ—Ç—Ä–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        # URL –¥–ª—è –≤—Ç–æ—Ä–∏—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id
        base_url = "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg"
        metro_url = f"{base_url}?metro={self.metro_avito_id}"
        return metro_url
    
    def generate_search_context(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π context –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        import base64
        import gzip
        import json
        import random
        
        context_data = {
            "fromPage": "catalog",
            "timestamp": random.randint(1000000000, 9999999999),
            "sessionId": random.randint(100000, 999999)
        }
        try:
            json_str = json.dumps(context_data, separators=(',', ':'))
            compressed = gzip.compress(json_str.encode('utf-8'))
            encoded = base64.b64encode(compressed).decode('utf-8')
            return f"H4sIAAAAAAAA_{encoded}"
        except Exception as e:
            print(f"[CONTEXT] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return "H4sIAAAAAAAA_wE-AMH_YToxOntzOjg6ImZyb21QYWdlIjtzOjc6ImNhdGFsb2ciO312FITcIwAAAA"
    
    def clean_url_path(self, url_path: str) -> str:
        """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø—É—Ç—å"""
        if not url_path:
            return ""
        if "?" in url_path:
            url_path = url_path.split("?")[0]
        return url_path
    
    def get_metro_url_with_page(self, page=1):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –º–µ—Ç—Ä–æ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ context"""
        if not self.metro_avito_id:
            print("‚ùå avito_id –¥–ª—è –º–µ—Ç—Ä–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        # URL –¥–ª—è –≤—Ç–æ—Ä–∏—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        base_url = "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg"
        metro_url = f"{base_url}?metro={self.metro_avito_id}&s=104"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é (Avito –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä p)
        if page > 1:
            metro_url += f"&p={page}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π context –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context = self.generate_search_context()
        metro_url += f"&context={context}"
        
        print(f"[CONTEXT] –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π context")
        return metro_url
    
    def wait_for_cards_load(self, timeout=30):
        """–ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            actual_timeout = self.cards_load_timeout if hasattr(self, 'cards_load_timeout') else timeout
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            wait = WebDriverWait(self.driver, actual_timeout)
            cards = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '[data-marker="item"]')))
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            return True
            
        except TimeoutException:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False
    
    def smooth_scroll_and_load_cards(self, target_cards=20, scroll_pause=1.5):
        """–ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
            if not self.enable_smooth_scroll:
                print("‚è≠Ô∏è –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                return target_cards
            
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–ª–∞–≤–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            actual_scroll_pause = self.scroll_pause if hasattr(self, 'scroll_pause') else scroll_pause
            max_attempts = self.max_scroll_attempts if hasattr(self, 'max_scroll_attempts') else 10
            
            initial_cards = 0
            current_cards = 0
            scroll_attempts = 0
            
            while current_cards < target_cards and scroll_attempts < max_attempts:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫
                cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
                current_cards = len(cards)
                
                if current_cards > initial_cards:
                    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {current_cards} (—Ü–µ–ª—å: {target_cards})")
                    initial_cards = current_cards
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if current_cards >= target_cards:
                    print(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å: {current_cards} –∫–∞—Ä—Ç–æ—á–µ–∫")
                    break
                
                # –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                print(f"‚¨áÔ∏è –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ {scroll_attempts + 1}/{max_attempts}...")
                self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                time.sleep(actual_scroll_pause)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                new_cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
                if len(new_cards) <= current_cards:
                    print("‚è∏Ô∏è –ù–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
                    time.sleep(actual_scroll_pause * 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                
                scroll_attempts += 1
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            final_cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {len(final_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
            if scroll_attempts >= max_attempts:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏")
            
            return len(final_cards)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            try:
                cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
                return len(cards)
            except:
                return 0
    
    def parse_card_with_schema(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏—Å–ø–æ–ª—å–∑—É—è Schema.org —Ä–∞–∑–º–µ—Ç–∫—É"""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Schema.org —Ä–∞–∑–º–µ—Ç–∫–∏
            try:
                itemtype = card_element.get_attribute('itemtype')
                if itemtype and 'schema.org/Product' in itemtype:
                    pass  # Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞
            except:
                pass  # –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Schema.org —Ä–∞–∑–º–µ—Ç–∫—É
            
            # 2. –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ Schema.org
            try:
                title_elem = card_element.find_element(By.CSS_SELECTOR, 'a.snippet-link')
                title = title_elem.get_attribute('title')
            except:
                title = None
            
            # 3. –ò—â–µ–º —Ü–µ–Ω—É –ø–æ Schema.org
            try:
                price_elem = card_element.find_element(By.CSS_SELECTOR, 'span[data-marker="item-price"]')
                price = price_elem.text.strip()
            except:
                price = None
            
            # 4. –ò—â–µ–º —Å—Å—ã–ª–∫—É –ø–æ Schema.org
            try:
                link_elem = card_element.find_element(By.CSS_SELECTOR, 'a.snippet-link')
                link = link_elem.get_attribute('href')
            except:
                link = None
            
            # 5. –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å Schema.org –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            try:
                schema_elements = card_element.find_elements(By.CSS_SELECTOR, '[itemprop]')
                if schema_elements:
                    pass  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å itemprop –Ω–∞–π–¥–µ–Ω—ã
            except:
                pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Schema.org —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            # 6. –ò—â–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON-LD)
            try:
                json_ld_scripts = card_element.find_elements(By.CSS_SELECTOR, 'script[type="application/ld+json"]')
                if json_ld_scripts:
                    pass  # JSON-LD —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
                else:
                    # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                    try:
                        parent = card_element.find_element(By.XPATH, './..')
                        json_ld_scripts = parent.find_elements(By.CSS_SELECTOR, 'script[type="application/ld+json"]')
                        if json_ld_scripts:
                            pass  # JSON-LD —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    except:
                        pass
            except:
                pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ JSON-LD
            
            # 7. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                # –ò—â–µ–º –≤—Å–µ div —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏
                divs = card_element.find_elements(By.CSS_SELECTOR, 'div[class*="item"]')
                item_divs = []
                for div in divs:
                    try:
                        class_name = div.get_attribute('class')
                        if 'item' in class_name:
                            item_divs.append((class_name, div.text.strip()[:100]))
                    except:
                        continue
                
                if item_divs:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(item_divs)} div —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å 'item' –≤ –∫–ª–∞—Å—Å–µ:")
                    for class_name, text in item_divs[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        print(f"   ‚Ä¢ {class_name}: {text}...")
                else:
                    print(f"‚ùå Div —ç–ª–µ–º–µ–Ω—Ç—ã —Å 'item' –≤ –∫–ª–∞—Å—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            
            # 8. –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Avito
            try:
                # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å data-marker
                data_markers = card_element.find_elements(By.CSS_SELECTOR, '[data-marker]')
                if data_markers:
                    pass  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å data-marker –Ω–∞–π–¥–µ–Ω—ã
                else:
                    pass  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å data-marker –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            except:
                pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ data-marker
            
            print("=" * 60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å Schema.org: {e}")

    def prepare_data_for_db(self, card_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î ads_avito"""
        try:
            from datetime import datetime
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
            db_data = {}
            
            # URL
            db_data['URL'] = card_data.get('url', '')
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            db_data['avitoid'] = card_data.get('item_id', '')
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è avitoid
            if db_data['avitoid']:
                print(f"üîç –ù–∞–π–¥–µ–Ω avitoid: {db_data['avitoid']}")
            else:
                print(f"‚ö†Ô∏è avitoid –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ card_data: {card_data.get('item_id', '–ù–ï–¢')}")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            db_data['title'] = card_data.get('title', '')
            
            # –¶–µ–Ω–∞
            price = card_data.get('price', '')
            if price and price != '–ù–µ –Ω–∞–π–¥–µ–Ω–æ':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ü–µ–Ω—ã "19 500 000 ‚ÇΩ"
                price_match = re.search(r'([\d\s]+)', price)
                if price_match:
                    price_str = price_match.group(1).replace(' ', '')
                    try:
                        db_data['price'] = int(price_str)
                    except:
                        db_data['price'] = None
                else:
                    db_data['price'] = None
            else:
                db_data['price'] = None
            
            # –ö–æ–º–Ω–∞—Ç—ã
            rooms = card_data.get('rooms', '')
            if rooms == '—Å—Ç—É–¥–∏—è':
                db_data['rooms'] = 0
            elif isinstance(rooms, str) and rooms.isdigit():
                db_data['rooms'] = int(rooms)
            else:
                db_data['rooms'] = None
            
            # –ü–ª–æ—â–∞–¥—å
            area = card_data.get('area', '')
            if area and area != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['area_m2'] = float(area)
                except:
                    db_data['area_m2'] = None
            else:
                db_data['area_m2'] = None
            
            # –≠—Ç–∞–∂
            floor = card_data.get('floor', '')
            if floor and floor != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['floor'] = int(floor)
                except:
                    db_data['floor'] = None
            else:
                db_data['floor'] = None
            
            # –í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π
            total_floors = card_data.get('total_floors', '')
            if total_floors and total_floors != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['floor_total'] = int(total_floors)
                except:
                    db_data['floor_total'] = None
            else:
                db_data['floor_total'] = None
            
            # –ö–æ–º–ø–ª–µ–∫—Å (–±–µ—Ä–µ–º –∏–∑ complex_name –µ—Å–ª–∏ –µ—Å—Ç—å)
            db_data['complex'] = card_data.get('complex_name', '')
            
            # –ú–µ—Ç—Ä–æ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π
            metro_name = card_data.get('metro_name', '')
            if metro_name and ',' in metro_name:
                db_data['metro'] = metro_name.split(',')[0].strip()
            else:
                db_data['metro'] = metro_name
            
            # ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro (–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–≤—è–∑–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π metro)
            db_data['metro_id'] = self.metro_id
            
            # –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
            time_to_metro = card_data.get('time_to_metro', '')
            if time_to_metro and time_to_metro != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                try:
                    db_data['walk_minutes'] = int(time_to_metro)
                except:
                    db_data['walk_minutes'] = None
            else:
                db_data['walk_minutes'] = None
            
            # –ê–¥—Ä–µ—Å
            db_data['address'] = card_data.get('street_house', '')
            
            # –¢–µ–≥–∏ - –ø–∞—Ä—Å–∏–º –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
            tags = card_data.get('tags', [])
            if tags:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–≥–∏ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                db_data['tags'] = ', '.join(tags)
            else:
                db_data['tags'] = ''
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            seller_info = self.extract_seller_info_from_params(card_data.get('params', ''))
            if seller_info:
                db_data['seller'] = seller_info
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                seller_type = card_data.get('type', '')
                if seller_type == '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                    db_data['seller'] = {'type': 'owner'}
                elif seller_type == '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ':
                    db_data['seller'] = {'type': 'agency'}
                else:
                    db_data['seller'] = {'type': 'unknown'}
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ —Ç–µ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'seller_info' in card_data and card_data['seller_info']:
                seller_info_from_tags = card_data['seller_info']
                
                # –ï—Å–ª–∏ –≤ —Ç–µ–≥–∞—Ö –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                if seller_info_from_tags.get('name'):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Ç–µ–≥–∞–º
                    tags = card_data.get('tags', [])
                    tags_text = ' '.join(tags).lower()
                    
                    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in tags_text:
                        seller_info_from_tags['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    elif '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in tags_text:
                        seller_info_from_tags['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    elif '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in tags_text or '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' in tags_text:
                        seller_info_from_tags['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in tags_text:
                        seller_info_from_tags['type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                    else:
                        seller_info_from_tags['type'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                    
                    # –ï—Å–ª–∏ —Ç–∏–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ —Ç–µ–≥–∞–º, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º
                    if seller_info_from_tags['type'] != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                        if seller_info_from_tags['type'] == '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' and '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in tags_text:
                            seller_info_from_tags['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                        elif seller_info_from_tags['type'] == '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                            seller_info_from_tags['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                        elif seller_info_from_tags['type'] == '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫':
                            seller_info_from_tags['type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                        elif seller_info_from_tags['type'] == '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ':
                            seller_info_from_tags['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                    db_data['seller'] = seller_info_from_tags
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ (Person) - –≤—Å—ë —á—Ç–æ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            seller_info = card_data.get('seller_info', {})
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º clean_person –∏–∑ seller_info, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if seller_info and seller_info.get('clean_person'):
                db_data['person'] = seller_info['clean_person']
                
                # –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ person_type
                if seller_info.get('type'):
                    db_data['person_type'] = seller_info['type']
                
            # –ü–†–ò–û–†–ò–¢–ï–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ person –∏–∑ card_data, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            elif 'person' in card_data and card_data['person']:
                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ person –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                person_text = card_data['person']
                
                # –£–±–∏—Ä–∞–µ–º "–¢–∏–ø: ...", "–û–±—ä—è–≤–ª–µ–Ω–∏–π: ...", –¥–∞—Ç—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                lines = person_text.split(' | ')
                filtered_lines = []
                
                for line in lines:
                    line = line.strip()
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                    if (line.startswith('–¢–∏–ø:') or 
                        line.startswith('–û–±—ä—è–≤–ª–µ–Ω–∏–π:') or
                        line.startswith('–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:') or
                        '–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π' in line or
                        '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π' in line or
                        re.match(r'\d+\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)', line) or
                        re.match(r'\d{1,2}\s+[–∞-—è—ë]+', line)):  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "18 –∏—é–ª—è"
                        continue
                    
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ
                    if line and len(line) > 2:
                        filtered_lines.append(line)
                
                if filtered_lines:
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ)
                    clean_person = filtered_lines[0]
                    db_data['person'] = clean_person
                else:
                    db_data['person'] = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                
                # –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ person_type
                if 'seller_info' in card_data and card_data['seller_info'].get('type'):
                    db_data['person_type'] = card_data['seller_info']['type']
                
            elif seller_info:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –¥–ª—è –ø–æ–ª—è person (–ë–ï–ó —Ç–∏–ø–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
                person_info_parts = []
                
                # –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                if 'name' in seller_info:
                    person_info_parts.append(f"–ò–º—è: {seller_info['name']}")
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
                if 'agency_name' in seller_info:
                    person_info_parts.append(f"–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ: {seller_info['agency_name']}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if seller_info.get('reliable_partner'):
                    person_info_parts.append("–ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä")
                
                if seller_info.get('verified_rosreestr'):
                    person_info_parts.append("–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ")
                
                if seller_info.get('verified_requisites'):
                    person_info_parts.append("–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if 'all_text_after_time' in seller_info and seller_info['all_text_after_time']:
                    all_text = ' | '.join(seller_info['all_text_after_time'])
                    
                    # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ person_info_parts –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    person_info_parts.append(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {all_text}")
                elif 'raw_lines' in seller_info and seller_info['raw_lines']:
                    raw_text = ' | '.join(seller_info['raw_lines'])
                    person_info_parts.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {raw_text}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–æ–ª–µ person
                if person_info_parts:
                    db_data['person'] = ' | '.join(person_info_parts)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if 'type' in seller_info:
                    db_data['person_type'] = seller_info['type']
                else:
                    db_data['person_type'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                
                # –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ç–µ–≥–∞–º
                if db_data['person_type'] == '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                    tags = card_data.get('tags', [])
                    tags_text = ' '.join(tags).lower()
                    
                    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in tags_text:
                        db_data['person_type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    elif '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in tags_text:
                        db_data['person_type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    elif '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in tags_text or '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' in tags_text:
                        db_data['person_type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in tags_text:
                        db_data['person_type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                    else:
                        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        db_data['person_type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
            
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            published_time = card_data.get('published_time', '')
            if published_time and published_time != '–ù–µ –Ω–∞–π–¥–µ–Ω–æ':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –¥–∞—Ç—É
                source_created = self.convert_relative_time_to_date(published_time)
                db_data['source_created'] = source_created
                print(f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: '{published_time}' -> {source_created}")
            else:
                print(f"‚ÑπÔ∏è –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
                db_data['source_created'] = datetime.now().date()
            
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            db_data['updated_at'] = datetime.now()
            
            # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (1 - –∫–≤–∞—Ä—Ç–∏—Ä–∞, 2 - –∫–æ–º–Ω–∞—Ç–∞)
            db_data['object_type_id'] = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–≤–∞—Ä—Ç–∏—Ä–∞
            
            return db_data
            
        except Exception as e:
            return None
    
    def parse_tags_from_params(self, params_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–≥–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            if not params_text or params_text == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                return [], {}
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º —Ç–µ–≥–∏
            lines = params_text.strip().split('\n')
            tags = []
            seller_info = {}
            
            # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤
            stop_parsing = False
            
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å–∞)
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏:
                # 1. –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã/–¥–æ–º–∞
                # 2. –ê–¥—Ä–µ—Å (—Å–æ–¥–µ—Ä–∂–∏—Ç —É–ª–∏—Ü—É, –¥–æ–º, –º–µ—Ç—Ä–æ)
                # 3. –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
                if any(stop_word in line.lower() for stop_word in [
                    '–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '–∑–∞–º–µ–Ω–µ–Ω–∞', '–æ—á–∏—â–µ–Ω–∞', '–ø—Ä–æ–º—ã—Ç–∞',
                    '–±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥', '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑—ã', '–∂–¥—ë–º –≤–∞—à–µ–≥–æ –∑–≤–æ–Ω–∫–∞',
                    '–∑–≤–æ–Ω–∏—Ç–µ', '–ø—Ä–∏–µ–∑–∂–∞–π—Ç–µ', '–ø–æ–∑–≤–æ–Ω–∏—Ç–µ', '–Ω–∞–ø–∏—à–∏—Ç–µ'
                ]):
                    stop_parsing = True
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–æ–º
                # –ê–¥—Ä–µ—Å –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç: —É–ª–∏—Ü–∞, –¥–æ–º, –º–µ—Ç—Ä–æ, –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
                if self.is_address_line(line):
                    # print(f"üìç –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤ - –Ω–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: {line}")
                    stop_parsing = True
                    break
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
                line_tags = [tag.strip() for tag in line.split(',') if tag.strip()]
                
                for tag in line_tags:
                    # –û—á–∏—â–∞–µ–º —Ç–µ–≥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    clean_tag = tag.strip()
                    if clean_tag and len(clean_tag) > 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–≥–∞
                        # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏
                        known_tags = [
                            '–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ',
                            '–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã',
                            '–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞',
                            '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫',
                            '–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã',
                            '–î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã',
                            '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏',
                            '–°—Ç—É–¥–∏—è',
                            '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ',
                            '–ó–∞—Å—Ç—Ä–æ–π—â–∏–∫',
                            '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
                            '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞',
                            '–í—Ç–æ—Ä–∏—á–∫–∞',
                            '–° –º–µ–±–µ–ª—å—é',
                            '–ë–µ–∑ –º–µ–±–µ–ª–∏',
                            '–ï–≤—Ä–æ—Ä–µ–º–æ–Ω—Ç',
                            '–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–º–æ–Ω—Ç',
                            '–ö–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç',
                            '–¢—Ä–µ–±—É–µ—Ç —Ä–µ–º–æ–Ω—Ç–∞',
                            '–° –æ—Ç–¥–µ–ª–∫–æ–π',
                            '–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏',
                            '–° –≤–∏–¥–æ–º',
                            '–ë–∞–ª–∫–æ–Ω',
                            '–õ–æ–¥–∂–∏—è',
                            '–û–∫–Ω–∞ –≤–æ –¥–≤–æ—Ä',
                            '–û–∫–Ω–∞ –Ω–∞ —É–ª–∏—Ü—É',
                            '–ü–∞—Ä–∫–æ–≤–∫–∞',
                            '–õ–∏—Ñ—Ç',
                            '–ö–æ–Ω—Å—å–µ—Ä–∂',
                            '–û—Ö—Ä–∞–Ω–∞',
                            '–î–≤–æ—Ä',
                            '–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
                            '–ú–∞–≥–∞–∑–∏–Ω—ã —Ä—è–¥–æ–º',
                            '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ä—è–¥–æ–º',
                            '–ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä',
                            '–°–≤–æ–±–æ–¥–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
                            '–°—Ä–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞',
                            '–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'
                        ]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–≥ –∏–∑–≤–µ—Å—Ç–Ω—ã–º
                        is_known = False
                        for known in known_tags:
                            if known.lower() in clean_tag.lower() or clean_tag.lower() in known.lower():
                                tags.append(known)  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                is_known = True
                                break
                        
                        # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                        if not is_known and not any(char in clean_tag for char in ['‚ÇΩ', '–º¬≤', '–º–∏–Ω', '—ç—Ç']):
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            exclude_words = [
                                '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã', '–¥–æ–º', '—ç—Ç–∞–∂', '—ç—Ç–∞–∂–µ–π',
                                '–º¬≤', '–∫–≤.–º', '–∫–≤ –º', '–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π',
                                '–¥–Ω–µ–π', '–Ω–µ–¥–µ–ª—å', '–º–µ—Å—è—Ü–µ–≤', '–Ω–∞–∑–∞–¥', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞',
                                '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–¥', '–æ–±—ä–µ–∫—Ç–∞',
                                '—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.',
                                '–ø–ª–æ—â–∞–¥—å', '–ø–ª.', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä', '—à–æ—Å—Å–µ', '—à.',
                                '—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—Å—Ç—Ä.', '–∫–æ—Ä–ø—É—Å', '–∫.', '–¥–æ–º', '–¥.',
                                '–ø—Ä–∏—Ö–æ–∂–∞—è', '—Å–∞–Ω—É–∑–µ–ª', '—Å–ø–∞–ª—å–Ω–∏', '–≤–∞–Ω–Ω—ã–µ', '–∫–æ–º–Ω–∞—Ç—ã',
                                '—Å–∏—Å—Ç–µ–º–∞', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', '–∑–∞–º–µ–Ω–µ–Ω–∞', '–æ—á–∏—â–µ–Ω–∞', '–ø—Ä–æ–º—ã—Ç–∞'
                            ]
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–≥ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å–ª–æ–≤
                            if not any(exclude_word in clean_tag.lower() for exclude_word in exclude_words):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è)
                                if len(clean_tag) < 30:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–¥—Ä–µ—Å (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä –∏ —É–ª–∏—Ü)
                                    if not re.search(r'\d+', clean_tag) or len(clean_tag) > 5:
                                        tags.append(clean_tag)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
            for i in range(len(lines) - 1, -1, -1):
                line = lines[i].strip()
                if not line:
                    continue
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
                if '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in line.lower():
                    parts = [p.strip() for p in line.split(',')]
                    
                    # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ "–†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
                    for j, part in enumerate(parts):
                        if '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in part.lower():
                            # –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
                            if j > 0:
                                agency_name = parts[j-1].strip()
                                if agency_name and len(agency_name) > 2:
                                    seller_info['agency_name'] = agency_name
                                    seller_info['type'] = 'agency'
                                    print(f"üè¢ –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ: {agency_name}")
                                    break
                    
                    if seller_info:
                        break
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                # –ü—Ä–∏–º–µ—Ä: "–í–ª–∞–¥–∏—Å, 1930 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
                elif ',' in line and any(word in line.lower() for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                    parts = [p.strip() for p in line.split(',')]
                    
                    if len(parts) >= 3:
                        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                        seller_name = parts[0].strip()
                        if seller_name and len(seller_name) > 2:
                            seller_info['name'] = seller_name
                            print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller_name}")
                        
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
                        last_part = parts[-1].strip()
                        if '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in last_part.lower():
                            seller_info['type'] = 'agency'  # –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ
                        elif '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ —Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ' in last_part.lower():
                            seller_info['type'] = 'owner'   # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫
                        else:
                            seller_info['type'] = 'unknown'
                        
                        break
            
            return tags, seller_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤: {e}")
            return [], {}
    
    def is_address_line(self, line):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–æ–º"""
        try:
            line_lower = line.lower()
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∞–¥—Ä–µ—Å–∞:
            # 1. –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü
            street_indicators = ['—É–ª.', '—É–ª–∏—Ü–∞', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä.', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä.', 
                               '–ø–ª–æ—â–∞–¥—å', '–ø–ª.', '–±—É–ª—å–≤–∞—Ä', '–±-—Ä', '—à–æ—Å—Å–µ', '—à.']
            
            # 2. –°–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–æ (–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏)
            metro_stations = ['—é–≥–æ-–∑–∞–ø–∞–¥–Ω–∞—è', '–∫—Ä–∞—Å–Ω–æ—Å–µ–ª—å—Å–∫–∞—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è', '–∫—Ä–∞—Å–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞',
                            '—á–∫–∞–ª–æ–≤—Å–∫–∞—è', '—Ç–∞–≥–∞–Ω—Å–∫–∞—è', '–º–∞—Ä–∫—Å–∏—Å—Ç—Å–∫–∞—è', '–ø–ª–æ—â–∞–¥—å –∏–ª—å–∏—á–∞',
                            '—Ä–∏–º—Å–∫–∞—è', '–∫—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –∑–∞—Å—Ç–∞–≤–∞', '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–≤–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç',
                            '—Ç–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏', '–∫—É–∑—å–º–∏–Ω–∫–∏', '—Ä—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç', '–≤—ã—Ö–∏–Ω–æ',
                            '–Ω–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ', '–ø–µ—Ä–æ–≤–æ', '—à–æ—Å—Å–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤', '–∞–≤–∏–∞–º–æ—Ç–æ—Ä–Ω–∞—è',
                            '–ø–ª–æ—â–∞–¥—å –∏–ª—å–∏—á–∞', '–º–∞—Ä–∫—Å–∏—Å—Ç—Å–∫–∞—è', '—Ç–∞–≥–∞–Ω—Å–∫–∞—è', '–≤–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç',
                            '–ø—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è', '–∫—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –∑–∞—Å—Ç–∞–≤–∞', '—Ä–∏–º—Å–∫–∞—è', '—Ç–µ–∫—Å—Ç–∏–ª—å—â–∏–∫–∏',
                            '–∫—É–∑—å–º–∏–Ω–∫–∏', '—Ä—è–∑–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç', '–≤—ã—Ö–∏–Ω–æ', '–Ω–æ–≤–æ–≥–∏—Ä–µ–µ–≤–æ',
                            '–ø–µ—Ä–æ–≤–æ', '—à–æ—Å—Å–µ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤', '–∞–≤–∏–∞–º–æ—Ç–æ—Ä–Ω–∞—è']
            
            # 3. –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
            time_pattern = r'\d+\s*–º–∏–Ω'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–¥—Ä–µ—Å–∞
            has_street = any(indicator in line_lower for indicator in street_indicators)
            has_metro = any(station in line_lower for station in metro_stations)
            has_time = bool(re.search(time_pattern, line_lower))
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 2 –ø—Ä–∏–∑–Ω–∞–∫–∞ –∞–¥—Ä–µ—Å–∞, —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –∞–¥—Ä–µ—Å–æ–º
            address_indicators = sum([has_street, has_metro, has_time])
            
            if address_indicators >= 2:
                return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—è—Ç—É—é –∏ —Ü–∏—Ñ—Ä—ã (—É–ª–∏—Ü–∞, –¥–æ–º)
            if ',' in line and re.search(r'\d+', line):
                # –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø: –Ω–µ —Å—á–∏—Ç–∞–µ–º –∞–¥—Ä–µ—Å–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä
                if any(word in line_lower for word in ['–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–æ–º–Ω–∞—Ç–∞', '—Å—Ç—É–¥–∏—è', '–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã']):
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–≥ —Å —Ü–∏—Ñ—Ä–∞–º–∏
                if len(line) < 50:  # –ê–¥—Ä–µ—Å –æ–±—ã—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞: {e}")
            return False
    
    def extract_seller_info_from_params(self, params_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            if not params_text or params_text == "–ù–µ –Ω–∞–π–¥–µ–Ω–æ":
                return None
            
            seller_info = {}
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
            # –û–±—ã—á–Ω–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–µ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º
            lines = params_text.strip().split('\n')
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            for i in range(len(lines) - 1, -1, -1):
                line = lines[i].strip()
                if not line:
                    continue
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                # –ü—Ä–∏–º–µ—Ä: "–í–ª–∞–¥–∏—Å, 1930 –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã"
                if ',' in line and any(word in line.lower() for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                    parts = [p.strip() for p in line.split(',')]
                    
                    if len(parts) >= 3:
                        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                        seller_name = parts[0].strip()
                        if seller_name and len(seller_name) > 2:
                            seller_info['name'] = seller_name
                        
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
                        last_part = parts[-1].strip()
                        if '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in last_part.lower():
                            seller_info['type'] = 'agency'  # –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ
                        elif '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ —Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ' in last_part.lower():
                            seller_info['type'] = 'owner'   # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫
                        else:
                            seller_info['type'] = 'unknown'
                        
                        break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            if not seller_info:
                text_lower = params_text.lower()
                
                # –°–û–ë–°–¢–í–ï–ù–ù–ò–ö –¢–û–õ–¨–ö–û –ï–°–õ–ò –í –¢–ï–ì–ê–• "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"
                if '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in text_lower or '–∞–≥–µ–Ω—Ç' in text_lower:
                    seller_info['type'] = 'agency'
                elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in text_lower:
                    seller_info['type'] = 'developer'
                else:
                    seller_info['type'] = 'unknown'
            
            return seller_info if seller_info else None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: {e}")
            return None
    
    def parse_title(self, title_text):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            title_data = {}
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            rooms_pattern = r'(\d+)-–∫\.|(\d+)\s*–∫–æ–º–Ω–∞—Ç|—Å—Ç—É–¥–∏—è|–°—Ç—É–¥–∏—è'
            rooms_match = re.search(rooms_pattern, title_text)
            if rooms_match:
                if '—Å—Ç—É–¥–∏—è' in rooms_match.group(0).lower():
                    title_data['rooms'] = '—Å—Ç—É–¥–∏—è'
                else:
                    title_data['rooms'] = rooms_match.group(1) if rooms_match.group(1) else rooms_match.group(2)
            else:
                title_data['rooms'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            area_pattern = r'(\d+(?:[,\d]+)?)\s*–º¬≤'
            area_match = re.search(area_pattern, title_text)
            if area_match:
                title_data['area'] = area_match.group(1).replace(',', '.')
            else:
                title_data['area'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç—Ç–∞–∂–∞ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
            floor_pattern = r'(\d+)/(\d+)\s*—ç—Ç'
            floor_match = re.search(floor_pattern, title_text)
            if floor_match:
                title_data['floor'] = floor_match.group(1)
                title_data['total_floors'] = floor_match.group(2)
            else:
                title_data['floor'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                title_data['total_floors'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            return title_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return {
                'rooms': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'area': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'floor': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'total_floors': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_address(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: —É–ª–∏—Ü–∞, –¥–æ–º, –º–µ—Ç—Ä–æ, –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ"""
        try:
            address_data = {}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = address_text.strip().split('\n')
            
            if len(lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ª–∏—Ü–∞ –∏ –¥–æ–º
                street_line = lines[0].strip()
                
                # –ü–∞—Ä—Å–∏–º —É–ª–∏—Ü—É –∏ –¥–æ–º –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                # –ü—Ä–∏–º–µ—Ä: "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è, 1" -> —É–ª–∏—Ü–∞: "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è", –¥–æ–º: "1"
                street_parts = street_line.split(',')
                if len(street_parts) >= 2:
                    street = street_parts[0].strip()
                    house = street_parts[1].strip()
                    address_data['street_house'] = f"{street}, {house}"
                else:
                    address_data['street_house'] = street_line
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                metro_line = lines[1].strip()
                
                # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
                # –ü—Ä–∏–º–µ—Ä: "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è, –æ—Ç 31 –º–∏–Ω." -> –º–µ—Ç—Ä–æ: "–Æ–≥–æ-–ó–∞–ø–∞–¥–Ω–∞—è", –≤—Ä–µ–º—è: 31
                metro_parts = metro_line.split(',')
                metro_name = None
                time_to_metro = None
                
                for part in metro_parts:
                    part = part.strip()
                    if part:
                        # –ò—â–µ–º –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ (—Ü–∏—Ñ—Ä–∞ + "–º–∏–Ω")
                        time_match = re.search(r'(\d+)\s*–º–∏–Ω', part)
                        if time_match:
                            time_to_metro = int(time_match.group(1))
                        else:
                            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è, —Ç–æ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ
                            if not metro_name and not re.search(r'\d+', part):
                                metro_name = part
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                address_data['metro_name'] = metro_name if metro_name else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = str(time_to_metro) if time_to_metro else '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º –µ—ë –∞–¥—Ä–µ—Å–æ–º
                address_data['street_house'] = address_text.strip()
                address_data['metro_name'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            return address_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return {
                'street_house': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_name': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'time_to_metro': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_seller_info(self, card_element, card_data=None):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            seller_data = {}
            
            # –ü–†–ò–û–†–ò–¢–ï–¢: –µ—Å–ª–∏ –≤ —Ç–µ–≥–∞—Ö —É–∂–µ –µ—Å—Ç—å "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
            owner_from_tags = False
            if card_data and 'tags' in card_data and card_data['tags']:
                tags_text = ' '.join(card_data['tags']).lower()
                if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in tags_text:
                    owner_from_tags = True
                    seller_data['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    print(f"üè∑Ô∏è –ó–ê–©–ò–©–ê–ï–ú —Ç–µ–≥ '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' –≤ parse_seller_info")
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ data-marker –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                if params_elem:
                    params_text = params_elem.text.strip()
                    
                    # –ò—â–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –∏–∑ —Ç–µ–≥–æ–≤)
                    if not owner_from_tags:
                        seller_data['type'] = self.determine_seller_type(params_text)
                    seller_data['full_text'] = params_text
                    
                    # –ò—â–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
                    creation_time = self.extract_creation_time(params_text)
                    if creation_time:
                        seller_data['creation_time'] = creation_time
                    
                else:
                    if not owner_from_tags:
                        seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    
            except:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ data-marker, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                try:
                    # –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –∏–∑ —Ç–µ–≥–æ–≤)
                    if not owner_from_tags:
                        all_text = card_element.text.lower()
                        seller_data['type'] = self.determine_seller_type_from_text(all_text)
                    seller_data['full_text'] = '–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ'
                except:
                    if not owner_from_tags:
                        seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                    seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            if 'creation_time' not in seller_data:
                creation_time = self.find_creation_time_in_card(card_element)
                if creation_time:
                    seller_data['creation_time'] = creation_time
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            person_info = self.find_person_info_after_time(card_element, card_data)
            if person_info:
                # –ó–ê–©–ò–©–ê–ï–ú —Ç–∏–ø "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
                if owner_from_tags and person_info.get('type') != '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                    person_info['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                
                seller_data.update(person_info)
            
            return seller_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return {
                'type': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'full_text': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def find_person_info_after_time(self, card_element, card_data=None):
        """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –≤ –∫–æ–Ω—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            person_info = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
            all_text = card_element.text
            lines = all_text.split('\n')
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            time_line_index = -1
            for i, line in enumerate(lines):
                line_lower = line.lower().strip()
                # –ò—â–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if any(word in line_lower for word in ['–Ω–∞–∑–∞–¥', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞', '–ø–æ–∑–∞–≤—á–µ—Ä–∞', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']):
                    time_line_index = i
                    break
            
            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ –∫–æ–Ω—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫)
            end_lines = lines[-10:] if len(lines) > 10 else lines
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ –∫–æ–Ω—Ü–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            seller_lines = []
            seller_name = None
            
            for i, line in enumerate(end_lines):
                line = line.strip()
                if not line:
                    continue
                
                line_lower = line.lower()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                if any(tech_word in line_lower for tech_word in ['–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', '–∏–∑–±—Ä–∞–Ω–Ω–æ–µ', '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è']):
                    continue
                
                # –ò—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—ç—Ç–æ –º–∞—Ä–∫–µ—Ä –∫–æ–Ω—Ü–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ)
                if any(word in line_lower for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Ç–æ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
                    if i > 0:
                        prev_line = end_lines[i-1].strip()
                        if prev_line and len(prev_line) > 2:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            prev_line_lower = prev_line.lower()
                            if not any(word in prev_line_lower for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–¥–≤–æ—Ä', '–æ–∫–Ω–∞', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                                # –ë–µ—Ä–µ–º –ü–û–õ–ù–£–Æ —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)
                                seller_lines.append(line)
                                if not seller_name:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                                    seller_name = line
                                    # print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ü–û–õ–ù–û–ï –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–ø—è—Ç–æ–π: {seller_name}")
                    
                    seller_lines.append(line)
                    continue
                
                # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
                if any(word in line_lower for word in ['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã']):
                    seller_lines.append(line)
                
                # –ò—â–µ–º –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–≤—Ü–µ)
                if (len(line) > 2 and 
                    not any(word in line_lower for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–¥–≤–æ—Ä', '–æ–∫–Ω–∞', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å', '—Ç–µ–ª–µ—Ñ–æ–Ω']) and
                    not re.search(r'\d+', line) and
                    ',' in line):
                    # –ë–µ—Ä–µ–º –ü–û–õ–ù–£–Æ —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)
                    seller_lines.append(line)
                    if not seller_name:  # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                        seller_name = line
                        # print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –ü–û–õ–ù–û–ï –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–ø—è—Ç–æ–π: {seller_name}")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –≤ –∫–æ–Ω—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if seller_lines:
                person_info['all_text_after_time'] = seller_lines
                person_info['raw_lines'] = seller_lines
                
                # –ü–†–ò–û–†–ò–¢–ï–¢: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫"
                if 'tags' in card_data and card_data['tags']:
                    tags_text = ' '.join(card_data['tags']).lower()
                    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in tags_text:
                        owner_from_tags = True
                        # print(f"üè∑Ô∏è –ó–ê–©–ò–©–ê–ï–ú —Ç–µ–≥ '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' –≤ parse_seller_info")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                seller_name = None
                for line in seller_lines:
                    line_lower = line.lower()
                    
                    # –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ (–ü–†–ò–û–†–ò–¢–ï–¢: –µ—Å–ª–∏ –≤ —Ç–µ–≥–∞—Ö –µ—Å—Ç—å "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", —Ç–æ —Ç–∏–ø = "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫")
                    # –ó–ê–©–ò–©–ê–ï–ú —Ç–∏–ø "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ç–µ–≥–æ–≤
                    if person_info.get('type') == '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                        # –ï—Å–ª–∏ —Ç–∏–ø —É–∂–µ "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –∏–∑ —Ç–µ–≥–æ–≤, –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                        pass
                    elif '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in line_lower:
                        person_info['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                    elif '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in line_lower:
                        person_info['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                    elif '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in line_lower or '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' in line_lower:
                        person_info['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                    
                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    if any(word in line_lower for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                        count_match = re.search(r'(\d+)', line)
                        if count_match:
                            person_info['ads_count'] = int(count_match.group(1))
                    
                    # –ò—â–µ–º –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π, –Ω–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è)
                    if (',' in line and 
                        not any(word in line_lower for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã']) and
                        len(line.strip()) > 3):
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π –∫–∞–∫ –∏–º—è/–Ω–∞–∑–≤–∞–Ω–∏–µ
                        parts = [p.strip() for p in line.split(',')]
                        first_part = parts[0]
                        if (len(first_part) > 2 and 
                            not any(word in first_part.lower() for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–¥–≤–æ—Ä', '–æ–∫–Ω–∞']) and
                            not re.search(r'\d+', first_part)):
                            person_info['name'] = first_part
                            # print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {first_part}")
                
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –∏—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –Ω–æ –ø–µ—Ä–µ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                additional_info = []
                if time_line_index != -1:
                    for i in range(time_line_index + 1, len(lines)):
                        line = lines[i].strip()
                        if not line:
                            continue
                        
                        line_lower = line.lower()
                        
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        if any(word in line_lower for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π']):
                            break
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è
                        if (len(line) > 2 and 
                            not any(word in line_lower for word in ['–¥–æ–∫—É–º–µ–Ω—Ç—ã', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–¥–≤–æ—Ä', '–æ–∫–Ω–∞', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∫–∞–∑–∞—Ç—å', '—Ç–µ–ª–µ—Ñ–æ–Ω']) and
                                        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤)
            not any(re.search(rf'\b{word}\b', line_lower) for word in ['–≤—á–µ—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '–ø–æ–∑–∞–≤—á–µ—Ä–∞', '—á–∞—Å', '–¥–µ–Ω—å', '–º–µ—Å—è—Ü', '–Ω–∞–∑–∞–¥']) and
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–µ–ª—è–º–∏ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                            not any(re.search(rf'\b{word}\b', line_lower) for word in ['–Ω–µ–¥–µ–ª—è', '–Ω–µ–¥–µ–ª–∏', '–Ω–µ–¥–µ–ª—å']) and
                                        # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–∏–ø–∞ "1 —á–∞—Å –Ω–∞–∑–∞–¥", "7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥"
            not re.search(r'\d+\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)', line_lower) and
                            not re.search(r'\d+', line)):
                            additional_info.append(line)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–µ Person: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è + –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if additional_info:
                    if seller_name:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        person_info['clean_person'] = ', '.join(additional_info) + ' | ' + seller_name
                    else:
                        # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        person_info['clean_person'] = ', '.join(additional_info)
                else:
                    # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
                    if seller_name:
                        person_info['clean_person'] = seller_name
                        person_info['name'] = seller_name
                    else:
                        # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–µ—Å–ª—É–∂–µ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É
                        clean_lines = []
                        for line in seller_lines:
                            line_lower = line.lower()
                            if not any(word in line_lower for word in ['–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö', '–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö', '–æ–±—ä—è–≤–ª–µ–Ω–∏–π', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ —Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ']):
                                clean_lines.append(line.strip())
                        
                        if clean_lines:
                            person_info['clean_person'] = clean_lines[0]
                        else:
                            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –æ–±–æ–±—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                            if person_info.get('type') == '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ':
                                person_info['clean_person'] = '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
                            elif person_info.get('type') == '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ':
                                person_info['clean_person'] = '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                            elif person_info.get('type') == '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                                person_info['clean_person'] = '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                            else:
                                person_info['clean_person'] = '–ü—Ä–æ–¥–∞–≤–µ—Ü'
                
                # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if line.strip() and line not in person_info.get('raw_lines', []):
                    if 'raw_lines' not in person_info:
                        person_info['raw_lines'] = []
                    person_info['raw_lines'].append(line.strip())
            
            # –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not person_info.get('type') or person_info.get('type') == '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                person_info['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
            
            return person_info
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ: {e}")
            return {}
    
    def determine_seller_type(self, params_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        try:
            if not params_text:
                return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
            
            text_lower = params_text.lower()
            
            # –¢–ò–ü –ü–†–û–î–ê–í–¶–ê –û–ü–†–ï–î–ï–õ–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û –¢–ï–ì–ê–ú, –ù–ï –ü–û –¢–ï–ö–°–¢–£ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–≤–∞ "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if '–∞–≥–µ–Ω—Ç—Å—Ç–≤' in text_lower or '–∞–≥–µ–Ω—Ç' in text_lower:
                return '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
            elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in text_lower:
                return '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
            elif '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in text_lower or '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ' in text_lower:
                return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
            elif '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã' in text_lower:
                return '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'  # –û–±—ã—á–Ω–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
            else:
                return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
            return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
    
    def determine_seller_type_from_text(self, all_text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            text_lower = all_text.lower()
            
            # –¢–ò–ü –ü–†–û–î–ê–í–¶–ê –û–ü–†–ï–î–ï–õ–Ø–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–û –¢–ï–ì–ê–ú, –ù–ï –ü–û –¢–ï–ö–°–¢–£ –ö–ê–†–¢–û–ß–ö–ò
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ–≤–∞ "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫" –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if any(word in text_lower for word in ['–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–∞–≥–µ–Ω—Ç', '—Ä–∏—ç–ª—Ç–æ—Ä', '–∞–≥–µ–Ω—Ç—Å—Ç–≤']):
                return '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
            elif any(word in text_lower for word in ['–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫']):
                return '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
            elif any(word in text_lower for word in ['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã']):
                return '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
            elif any(word in text_lower for word in ['–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ']):
                return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
            elif any(word in text_lower for word in ['–Ω–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä', '—Å—É–ø–µ—Ä–∞–≥–µ–Ω—Ç']):
                return '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
            else:
                return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {e}")
            return '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
    
    def extract_creation_time(self, params_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        try:
            if not params_text:
                return None
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞)
            lines = params_text.strip().split('\n')
            
            # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞, –∏—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º
            for i in range(len(lines) - 1, -1, -1):
                line = lines[i].strip()
                if not line:
                    continue
                
                # –ò—â–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥", "–≤—á–µ—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "3 –¥–Ω—è –Ω–∞–∑–∞–¥" –∏ —Ç.–¥.
                time_patterns = [
                    r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s*–Ω–∞–∑–∞–¥',
                    r'(\d+)\s*(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)\s*–Ω–∞–∑–∞–¥',
                    r'(\d+)\s*(–Ω–µ–¥–µ–ª|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é)\s*–Ω–∞–∑–∞–¥',
                    r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü)\s*–Ω–∞–∑–∞–¥',
                    r'–≤—á–µ—Ä–∞',
                    r'—Å–µ–≥–æ–¥–Ω—è',
                    r'–ø–æ–∑–∞–≤—á–µ—Ä–∞'
                ]
                
                for pattern in time_patterns:
                    match = re.search(pattern, line.lower())
                    if match:
                        if '–≤—á–µ—Ä–∞' in line.lower():
                            return '–≤—á–µ—Ä–∞'
                        elif '—Å–µ–≥–æ–¥–Ω—è' in line.lower():
                            return '—Å–µ–≥–æ–¥–Ω—è'
                        elif '–ø–æ–∑–∞–≤—á–µ—Ä–∞' in line.lower():
                            return '–ø–æ–∑–∞–≤—á–µ—Ä–∞'
                        else:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏
                            count = match.group(1)
                            unit = match.group(2)
                            return f"{count} {unit} –Ω–∞–∑–∞–¥"
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
            return None
    
    def find_creation_time_in_card(self, card_element):
        """–ò—â–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            # –ò—â–µ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å –¥–∞—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                time_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-date"]')
                time_text = time_elem.text.strip()
                if time_text:
                    return time_text
            except:
                pass
            
            # –ò—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                desc_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-description"]')
                desc_text = desc_elem.text.strip()
                if desc_text:
                    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    time_patterns = [
                        r'(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s*–Ω–∞–∑–∞–¥',
                        r'(\d+)\s*(–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π)\s*–Ω–∞–∑–∞–¥',
                        r'(\d+)\s*(–Ω–µ–¥–µ–ª|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–Ω–µ–¥–µ–ª—é)\s*–Ω–∞–∑–∞–¥',
                        r'(\d+)\s*(–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–º–µ—Å—è—Ü)\s*–Ω–∞–∑–∞–¥',
                        r'–≤—á–µ—Ä–∞',
                        r'—Å–µ–≥–æ–¥–Ω—è',
                        r'–ø–æ–∑–∞–≤—á–µ—Ä–∞'
                    ]
                    
                    for pattern in time_patterns:
                        match = re.search(pattern, desc_text.lower())
                        if match:
                            if '–≤—á–µ—Ä–∞' in desc_text.lower():
                                return '–≤—á–µ—Ä–∞'
                            elif '—Å–µ–≥–æ–¥–Ω—è' in desc_text.lower():
                                return '—Å–µ–≥–æ–¥–Ω—è'
                            elif '–ø–æ–∑–∞–≤—á–µ—Ä–∞' in desc_text.lower():
                                return '–ø–æ–∑–∞–≤—á–µ—Ä–∞'
                            else:
                                count = match.group(1)
                                unit = match.group(2)
                                return f"{count} {unit} –Ω–∞–∑–∞–¥"
            except:
                pass
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ: {e}")
            return None
    
    def parse_card(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É"""
        try:
            card_data = {}
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            try:
                item_id = card_element.get_attribute('data-item-id')
                if item_id:
                    card_data['item_id'] = item_id
                    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ item_id: {item_id}")
                else:
                    print(f"‚ö†Ô∏è item_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ç—Ä–∏–±—É—Ç–µ data-item-id")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ item_id: {e}")
                pass
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-title"]')
                title_text = title_elem.text.strip()
                card_data['title'] = title_text
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                title_components = self.parse_title(title_text)
                card_data.update(title_components)
                
            except:
                card_data['title'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                card_data.update({
                    'rooms': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'area': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'floor': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'total_floors': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                })
            
            # –¶–µ–Ω–∞
            try:
                price_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                card_data['price'] = price_elem.text.strip()
            except:
                card_data['price'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ê–¥—Ä–µ—Å/–º–µ—Ç—Ä–æ
            try:
                address_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-address"]')
                address_text = address_elem.text.strip()
                card_data['address'] = address_text
                
                # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                address_components = self.parse_address(address_text)
                card_data.update(address_components)
                
            except:
                card_data['address'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                card_data.update({
                    'street_house': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'metro_name': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'time_to_metro': '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                })
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                params_elem = None
                params_text = ""
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
                try:
                    params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-specific-params"]')
                    params_text = params_elem.text.strip()
                except:
                    pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 2: –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                if not params_elem:
                    try:
                        params_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-params"]')
                        params_text = params_elem.text.strip()
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 3: –ø–æ –∫–ª–∞—Å—Å—É
                if not params_elem:
                    try:
                        params_elem = card_element.find_element(By.CSS_SELECTOR, '.item-specific-params')
                        params_text = params_elem.text.strip()
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 4: –ø–æ —Ç–µ–∫—Å—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                if not params_elem:
                    try:
                        # –ò—â–µ–º –ª—é–±–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
                        all_elements = card_element.find_elements(By.CSS_SELECTOR, '*')
                        found_elements = []
                        
                        for elem in all_elements:
                            try:
                                text = elem.text.strip()
                                if text and any(word in text.lower() for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã']):
                                    found_elements.append((elem.tag_name, text[:100]))
                                    if not params_elem:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                                        params_elem = elem
                                        params_text = text
                            except:
                                continue
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 5: –∏—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                if not params_elem:
                    try:
                        desc_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-description"]')
                        if desc_elem:
                            desc_text = desc_elem.text.strip()
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–∏
                            if any(word in desc_text.lower() for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω']):
                                params_elem = desc_elem
                                params_text = desc_text
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 6: –∏—â–µ–º —Ç–µ–≥–∏ –º–µ–∂–¥—É "–∑–∞ –º¬≤" –∏ –∞–¥—Ä–µ—Å–æ–º
                if not params_elem:
                    try:
                        all_text = card_element.text
                        lines = all_text.split('\n')
                        tag_lines = []
                        
                        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é "–∑–∞ –º¬≤" –∏ –∞–¥—Ä–µ—Å–∞
                        price_per_sqm_index = -1
                        address_index = -1
                        
                        for i, line in enumerate(lines):
                            line_lower = line.lower().strip()
                            
                            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–∑–∞ –º¬≤"
                            if '–∑–∞ –º¬≤' in line_lower and price_per_sqm_index == -1:
                                price_per_sqm_index = i
                                break
                            
                            # –ò—â–µ–º –∞–¥—Ä–µ—Å
                            if self.is_address_line(line) and address_index == -1:
                                address_index = i
                                break
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±–∞ –∏–Ω–¥–µ–∫—Å–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–≥–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
                        if price_per_sqm_index != -1 and address_index != -1 and address_index > price_per_sqm_index:
                            for i in range(price_per_sqm_index + 1, address_index):
                                line = lines[i].strip()
                                if line and len(line) > 2:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
                                    tag_lines.append(line)
                        
                        if tag_lines:
                            params_text = '\n'.join(tag_lines)
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º params_elem –∫–∞–∫ —Å–∞–º card_element, —á—Ç–æ–±—ã —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
                            params_elem = card_element
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 7: –∏—â–µ–º —Ç–µ–≥–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–æ Schema.org
                if not params_elem:
                    try:
                        desc_elem = card_element.find_element(By.CSS_SELECTOR, '[itemprop="description"]')
                        if desc_elem:
                            desc_text = desc_elem.text.strip()
                            if desc_text:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–∏
                                if any(word in desc_text.lower() for word in ['–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '—Ä–æ—Å—Ä–µ–µ—Å—Ç—Ä', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω']):
                                    params_elem = desc_elem
                                    params_text = desc_text
                    except:
                        pass
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 8: –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-marker
                try:
                    data_markers = card_element.find_elements(By.CSS_SELECTOR, '[data-marker]')
                    if data_markers:
                        pass  # –≠–ª–µ–º–µ–Ω—Ç—ã —Å data-marker –Ω–∞–π–¥–µ–Ω—ã
                except:
                    pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-marker
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 9: –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö div —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–ª–∞—Å—Å–∞–º–∏
                try:
                    divs = card_element.find_elements(By.CSS_SELECTOR, 'div[class]')
                    if divs:
                        pass  # Div —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏ –Ω–∞–π–¥–µ–Ω—ã
                except:
                    pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                
                # –°–µ–ª–µ–∫—Ç–æ—Ä 10: –≤—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö span —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                try:
                    spans = card_element.find_elements(By.CSS_SELECTOR, 'span')
                    if spans:
                        pass  # Span —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
                except:
                    pass  # –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ span —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                
                if params_elem and params_text:
                    card_data['params'] = params_text
                    
                    # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                    tags, seller_info = self.parse_tags_from_params(params_text)
                    card_data['tags'] = tags
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ —Ç–µ–≥–æ–≤
                    if seller_info:
                        card_data['seller_info'] = seller_info
                        if seller_info.get('agency_name'):
                            pass  # –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ
                    
                    if tags:
                        pass  # –¢–µ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã
                else:
                    card_data['params'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                    card_data['tags'] = []
                    card_data['seller_info'] = {}
                
                # –ò—Ç–æ–≥–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                if params_elem:
                    pass  # –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
                else:
                    pass  # –°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
                card_data['params'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                card_data['tags'] = []
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞
            complex_name = self.extract_complex_name(card_element, card_data.get('title', ''), card_data.get('params', ''))
            card_data['complex_name'] = complex_name
            
            # –û–ø–∏—Å–∞–Ω–∏–µ
            try:
                description_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-description"]')
                card_data['description'] = description_elem.text.strip()
            except:
                card_data['description'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É
            try:
                link_elem = card_element.find_element(By.CSS_SELECTOR, 'a[data-marker="item-title"]')
                raw_url = link_elem.get_attribute('href')
                # –û—á–∏—â–∞–µ–º URL –æ—Ç context –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                card_data['url'] = self.clean_url_path(raw_url)
            except:
                card_data['url'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                time_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-date"]')
                card_data['published_time'] = time_elem.text.strip()
            except:
                card_data['published_time'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            seller_info = self.parse_seller_info(card_element, card_data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if seller_info:
                # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –∏–∑ —Ç–µ–≥–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –µ—ë
                if 'seller_info' in card_data:
                    existing_seller = card_data['seller_info']
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    merged_seller = {**existing_seller, **seller_info}
                    card_data['seller_info'] = merged_seller
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                    if 'type' in seller_info:
                        card_data['seller_type'] = seller_info['type']
                    if 'creation_time' in seller_info:
                        card_data['creation_time'] = seller_info['creation_time']
                else:
                    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–≤—Ü–µ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                    card_data['seller_info'] = seller_info
                    if 'type' in seller_info:
                        card_data['seller_type'] = seller_info['type']
                    if 'creation_time' in seller_info:
                        card_data['creation_time'] = seller_info['creation_time']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            if 'creation_time' not in card_data:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ seller_info, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                creation_time = self.find_creation_time_in_card(card_element)
                if creation_time:
                    card_data['creation_time'] = creation_time
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–µ person –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ (–ë–ï–ó —Ç–∏–ø–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
            if 'seller_info' in card_data and card_data['seller_info']:
                seller_info = card_data['seller_info']
                person_parts = []
                
                # –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞
                if 'name' in seller_info:
                    person_parts.append(f"–ò–º—è: {seller_info['name']}")
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞
                if 'agency_name' in seller_info:
                    person_parts.append(f"–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ: {seller_info['agency_name']}")
                
                # –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if 'all_text_after_time' in seller_info and seller_info['all_text_after_time']:
                    all_text = ' | '.join(seller_info['all_text_after_time'])
                    person_parts.append(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {all_text}")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –ø–æ–ª–µ person
                if person_parts:
                    card_data['person'] = ' | '.join(person_parts)
            
            return card_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
    
    async def save_to_db(self, parsed_cards):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î"""
        if not DB_AVAILABLE or not self.enable_db_save:
            return False
            
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            await create_ads_avito_table()
            
            saved_count = 0
            for i, card in enumerate(parsed_cards):
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
                    db_data = self.prepare_data_for_db(card)
                    if db_data:
                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è avitoid
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É {i+1}: avitoid={db_data.get('avitoid', '–ù–ï–¢')}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        await save_avito_ad(db_data)
                        saved_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}: {e}")
                    pass
            
            return saved_count > 0
            
        except Exception as e:
            return False
    
    def parse_metro_page(self):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ"""
        try:
            print(f"üéØ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ ID = {self.metro_id} (avito_id = {self.metro_avito_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º URL
            metro_url = self.get_metro_url()
            if not metro_url:
                return []
                
            print(f"üåê URL: {metro_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(metro_url)
            time.sleep(self.page_load_delay)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
            current_url = self.driver.current_url
            print(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not self.wait_for_cards_load():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫
            parsed_cards = []
            for i, card in enumerate(cards[:self.max_cards]):
                card_data = self.parse_card(card)
                if card_data:
                    card_data['card_number'] = i + 1
                    parsed_cards.append(card_data)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
            
            return parsed_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    def parse_metro_page_by_number(self, page=1):
        """–ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            metro_url = self.get_metro_url_with_page(page)
            if not metro_url:
                return []
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(metro_url)
            time.sleep(self.page_load_delay)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not self.wait_for_cards_load():
                return []
            
            # –ü–ª–∞–≤–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            if self.max_cards > 0:
                target_cards = self.max_cards
            else:
                target_cards = self.target_cards_on_scroll if hasattr(self, 'target_cards_on_scroll') else 50
            
            loaded_cards_count = self.smooth_scroll_and_load_cards(target_cards)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            
            # –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫–∏
            parsed_cards = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            cards_to_parse = cards
            if self.max_cards > 0:
                cards_to_parse = cards[:self.max_cards]
            
            for i, card in enumerate(cards_to_parse):
                card_data = self.parse_card(card)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if card_data:
                    card_data['raw_text'] = card.text.strip()
                    card_data['card_number'] = i + 1
                    card_data['page_number'] = page  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    parsed_cards.append(card_data)
            
            return parsed_cards
            
        except Exception as e:
            return []
    
    def parse_multiple_pages(self):
        """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –º–µ—Ç—Ä–æ"""
        try:
            all_parsed_cards = []
            page = 1
            max_attempts = 100  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            
            while True:
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if page > max_attempts:
                    print(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({max_attempts}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
                if self.max_pages > 0 and page > self.max_pages:
                    print(f"üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({self.max_pages}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                
                # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page_cards = self.parse_metro_page_by_number(page)
                
                # –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if not page_cards:
                    print(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –ø—É—Å—Ç–∞—è (–Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                all_parsed_cards.extend(page_cards)
                print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {len(page_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                if self.max_pages > 0 and page >= self.max_pages:
                    print(f"üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü ({self.max_pages}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                page += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                if self.max_pages == 0 or page <= self.max_pages:
                    time.sleep(self.page_delay)
            
            return all_parsed_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
            return all_parsed_cards
    
    def print_statistics(self, parsed_cards):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:")
            print(f"   –ú–µ—Ç—Ä–æ ID: {self.metro_id}")
            print(f"   –ú–µ—Ç—Ä–æ avito_id: {self.metro_avito_id}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∞—Ä—Å–µ–Ω–æ: {self.max_pages}")
            print(f"   –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_cards)}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
            if DB_AVAILABLE:
                print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞")
                if self.enable_db_save:
                    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ‚úÖ –í–∫–ª—é—á–µ–Ω–æ")
                else:
                    print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ")
            else:
                print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def run_parser(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            if not await self.get_metro_avito_id():
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            if not self.setup_selenium():
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                return False
            
            # –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
            print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:")
            print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {self.max_pages if self.max_pages > 0 else '–≤—Å–µ'}")
            print(f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {self.max_cards if self.max_cards > 0 else '–≤—Å–µ'}")
            print(f"   ‚Ä¢ ID –º–µ—Ç—Ä–æ: {self.metro_id}")
            
            # –í—ã–≤–æ–¥–∏–º URL –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if self.metro_avito_id:
                base_url = f"https://www.avito.ru/moskva/kvartiry/prodam?metro={self.metro_avito_id}&s=104"
                print(f"   ‚Ä¢ URL –ø–æ–∏—Å–∫–∞: {base_url}")
            print()
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            parsed_cards = self.parse_multiple_pages()
            
            if parsed_cards:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
                if self.enable_db_save:
                    await self.save_to_db(parsed_cards)
                
                # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                print(f"üéØ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(parsed_cards) // (self.max_cards if self.max_cards > 0 else 25) + 1}")
                print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(parsed_cards)}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False
        finally:
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
    
    async def parse_single_metro(self, metro_id, max_pages, max_cards=None):
        """
        –ü–∞—Ä—Å–∏—Ç –æ–¥–Ω–æ –º–µ—Ç—Ä–æ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            metro_id (int): ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro
            max_pages (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            max_cards (int, optional): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (0 = –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
        
        Returns:
            tuple: (success: bool, saved_count: int, total_cards: int)
                - success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥
                - saved_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
                - total_cards: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        """
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.metro_id = metro_id
            self.max_pages = max_pages
            if max_cards is not None:
                self.max_cards = max_cards
            
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–æ ID={metro_id}, —Å—Ç—Ä–∞–Ω–∏—Ü={max_pages}, –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ={self.max_cards}")
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            if not await self.get_metro_avito_id():
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å avito_id –¥–ª—è –º–µ—Ç—Ä–æ {metro_id}")
                return False, 0, 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cookies")
                return False, 0, 0
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            if not self.setup_selenium():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Selenium")
                return False, 0, 0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookies")
                return False, 0, 0
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            parsed_cards = self.parse_multiple_pages()
            total_cards = len(parsed_cards)
            
            if not parsed_cards:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
                return False, 0, 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            saved_count = 0
            if self.enable_db_save and DB_AVAILABLE:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {total_cards} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ë–î...")
                await self.save_to_db(parsed_cards)
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                saved_count = total_cards  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –ú–µ—Ç—Ä–æ ID: {metro_id}")
            print(f"   –ú–µ—Ç—Ä–æ avito_id: {self.metro_avito_id}")
            print(f"   –°—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∞—Ä—Å–µ–Ω–æ: {max_pages}")
            print(f"   –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–ø–∞—Ä—Å–µ–Ω–æ: {total_cards}")
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count}")
            print(f"   Metro ID –≤ –ë–î: {metro_id} (—Å–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π metro)")
            
            return True, saved_count, total_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–æ {metro_id}: {e}")
            return False, 0, 0
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
    
    def extract_complex_name(self, card_element, title_text, params_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ - –ø–æ—Å–ª–µ —Ç–µ–≥–æ–≤ –∏ –ø–µ—Ä–µ–¥ –∞–¥—Ä–µ—Å–æ–º"""
        try:
            complex_name = ""
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–≥–æ–≤ –∏ –ø–µ—Ä–µ–¥ –∞–¥—Ä–µ—Å–æ–º
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
                all_text = card_element.text
                lines = all_text.split('\n')
                
                # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                tags_end_index = -1
                address_start_index = -1
                
                for i, line in enumerate(lines):
                    line_lower = line.lower().strip()
                    
                    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–≥–æ–≤ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥)
                    if any(tag in line_lower for tag in ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä']):
                        tags_end_index = i
                    
                    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∞–¥—Ä–µ—Å–∞ (–æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ª–∏—Ü—É, –¥–æ–º, –º–µ—Ç—Ä–æ)
                    if self.is_address_line(line):
                        address_start_index = i
                        break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ —Ç–µ–≥–∏, –∏ –∞–¥—Ä–µ—Å, –∏—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –º–µ–∂–¥—É –Ω–∏–º–∏
                if tags_end_index != -1 and address_start_index != -1 and address_start_index > tags_end_index:
                    # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º
                    for i in range(tags_end_index + 1, address_start_index):
                        line = lines[i].strip()
                        if line and len(line) > 2:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
                            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
                            if not any(exclude in line.lower() for exclude in ['–º¬≤', '—ç—Ç', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '—Å—Ç—É–¥–∏—è', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–º–µ—Ç—Ä–æ', '–º–∏–Ω']):
                                # –≠—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞
                                complex_name = line.strip()
                                print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –Ω–∞–π–¥–µ–Ω–æ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º: {complex_name}")
                                return complex_name
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏—â–µ–º –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
                if params_text:
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                    param_lines = params_text.split('\n')
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–ª–µ–∫—Å–∞
                    # –û–±—ã—á–Ω–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º
                    for line in param_lines:
                        line = line.strip()
                        if line and len(line) > 2:
                            line_lower = line.lower()
                            # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —è–≤–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
                            if not any(tag in line_lower for tag in ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–º–µ—Ç—Ä–æ', '–º–∏–Ω', '–º¬≤', '—ç—Ç']):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
                                if re.match(r'^[–ê-–Ø–∞-—è–Å—ë\s\-\d]+$', line):
                                    complex_name = line.strip()
                                    print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö: {complex_name}")
                                    return complex_name
                
                # –ò—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                try:
                    desc_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-description"]')
                    if desc_elem:
                        desc_text = desc_elem.text.strip()
                        if desc_text:
                            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–º–ø–ª–µ–∫—Å–æ–≤
                            desc_lines = desc_text.split('\n')
                            for line in desc_lines:
                                line = line.strip()
                                if line and len(line) > 2:
                                    line_lower = line.lower()
                                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —è–≤–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
                                    if not any(tag in line_lower for tag in ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–æ–∫—É–º–µ–Ω—Ç—ã', '–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–ª–∏—Ñ—Ç', '–ø–∞—Ä–∫–æ–≤–∫–∞', '–±–∞–ª–∫–æ–Ω', '–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä', '–º–µ—Ç—Ä–æ', '–º–∏–Ω', '–º¬≤', '—ç—Ç']):
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
                                        if re.match(r'^[–ê-–Ø–∞-—è–Å—ë\s\-\d]+$', line):
                                            complex_name = line.strip()
                                            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {complex_name}")
                                            return complex_name
                except:
                    pass
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {e}")
            
            if not complex_name:
                print("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return complex_name
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–∞: {e}")
            return ""

async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = EnhancedMetroParser()
    parser.database_url = database_url
    
    # –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–¢–†–ê–ù–ò–¶
    # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∂–µ–ª–∞–Ω–∏—é:
    # parser.max_pages = 3      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (1, 2, 3, 5, 10 –∏ —Ç.–¥.)
    # parser.max_cards = 15     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (0 = –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
    # parser.metro_id = 1       # ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫:
    # parser.max_cards = 15     # –ü–∞—Ä—Å–∏—Ç—å 15 –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:")
    print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parser.max_pages}")
    print(f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {parser.max_cards if parser.max_cards > 0 else '–≤—Å–µ'}")
    print(f"   ‚Ä¢ ID –º–µ—Ç—Ä–æ: {parser.metro_id}")
    print("=" * 60)
    
    success = await parser.run_parser()
    
    if success:
        print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main())