#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π ads_avito - –ø–∞—Ä—Å–∏–Ω–≥ AVITO –≤ –ë–î
"""

import os
import re
import asyncpg
from typing import Dict
from dotenv import load_dotenv
from datetime import datetime, date

# Load environment
load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

# Database pool –¥–ª—è ads_avito
_avito_db_pool: asyncpg.Pool | None = None

async def _get_avito_pool() -> asyncpg.Pool:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ads_avito"""
    global _avito_db_pool
    if _avito_db_pool is None:
        if not DATABASE_URL:
            raise RuntimeError("DATABASE_URL is not set")
        _avito_db_pool = await asyncpg.create_pool(DATABASE_URL)
    return _avito_db_pool


async def create_ads_avito_table() -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É ads_avito –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å AVITO"""
    pool = await _get_avito_pool()
    async with pool.acquire() as conn:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute(
            """
            CREATE TABLE IF NOT EXISTS ads_avito (
                id SERIAL PRIMARY KEY,
                url TEXT,
                avitoid NUMERIC,
                price BIGINT,
                rooms SMALLINT,
                area NUMERIC,
                floor SMALLINT,
                total_floors SMALLINT,
                complex TEXT,
                metro TEXT,
                metro_id INTEGER, -- ID –º–µ—Ç—Ä–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro
                min_metro SMALLINT,
                address TEXT,
                tags TEXT,
                person_type TEXT,
                person TEXT,
                object_type_id SMALLINT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(avitoid)
            );

            CREATE INDEX IF NOT EXISTS idx_ads_avito_avitoid ON ads_avito(avitoid);
            CREATE INDEX IF NOT EXISTS idx_ads_avito_metro_id ON ads_avito(metro_id);
            """
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ updated_at –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            await conn.execute("ALTER TABLE ads_avito ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
            print("[DB] –ü–æ–ª–µ updated_at –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É ads_avito")
        except Exception as e:
            if "already exists" in str(e).lower():
                print("[DB] –ü–æ–ª–µ updated_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ ads_avito")
            else:
                print(f"[DB] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è updated_at: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ metro_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            await conn.execute("ALTER TABLE ads_avito ADD COLUMN metro_id INTEGER")
            print("[DB] –ü–æ–ª–µ metro_id –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É ads_avito")
        except Exception as e:
            if "already exists" in str(e).lower():
                print("[DB] –ü–æ–ª–µ metro_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ ads_avito")
            else:
                print(f"[DB] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è metro_id: {e}")


async def convert_seller_type_to_number(seller_type):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ —á–∏—Å–ª–æ –¥–ª—è –ë–î"""
    if not seller_type:
        return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ"
    
    seller_type_lower = str(seller_type).lower()
    
    if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in seller_type_lower:
        return 3
    elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in seller_type_lower or '–∞–≥–µ–Ω—Ç' in seller_type_lower:
        return 2
    elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in seller_type_lower:
        return 4
    else:
        return 1  # "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def save_avito_ad(ad_data: dict) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ AVITO –≤ –ë–î. –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –ø–æ avitoid ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç."""
    pool = await _get_avito_pool()
    async with pool.acquire() as conn:
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        avitoid = None
        if ad_data.get('avitoid'):
            try:
                avitoid = int(ad_data['avitoid'])
                print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ avitoid: {ad_data.get('avitoid')} -> {avitoid}")
            except (ValueError, TypeError):
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ avitoid: {ad_data.get('avitoid')}")
                pass
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª–µ avitoid –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ad_data. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è: {list(ad_data.keys())}")
        
        price = ad_data.get('price')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–Ω–∞—Ç: 0, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä–æ–∫–∞, –Ω–µ —è–≤–ª—è—é—â–∞—è—Å—è —á–∏—Å–ª–æ–º
        rooms = None
        raw_rooms = ad_data.get('rooms')
        if raw_rooms is None:
            rooms = None
        elif isinstance(raw_rooms, (int, float)):
            try:
                rooms = int(raw_rooms)
            except Exception:
                rooms = None
        elif isinstance(raw_rooms, str):
            s = raw_rooms.strip()
            if re.fullmatch(r"\d+", s):
                rooms = int(s)
            else:
                rooms = 0

        metro = ad_data.get('metro')
        min_metro = None
        if ad_data.get('walk_minutes'):
            try:
                min_metro = int(ad_data['walk_minutes'])
            except (ValueError, TypeError):
                pass

        address = None
        if ad_data.get('address'):
            address = ad_data['address']
        elif ad_data.get('geo_labels'):
            address = ', '.join(ad_data['geo_labels'])

        tags = None
        if ad_data.get('tags'):
            tags = ad_data['tags']
        elif ad_data.get('labels'):
            tags = ', '.join(ad_data['labels'])

        seller = ad_data.get('seller', {})
        person_type = None
        person = None
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ person_type –∏–∑ ad_data, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if ad_data.get('person_type'):
            person_type = ad_data['person_type']
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø –≤ —á–∏—Å–ª–æ –¥–ª—è –ë–î
            person_type = await convert_seller_type_to_number(person_type)
            # print(f"[DB] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ person_type –∏–∑ ad_data: {person_type}")
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ person –∏–∑ ad_data, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if ad_data.get('person'):
            person = ad_data['person']
            # print(f"[DB] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–µ person –∏–∑ ad_data: {person}")
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            if seller.get('type'):
                type_mapping = {
                    'owner': '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫',
                    'agency': '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
                    'user': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    'private': '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
                    'developer': '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫',
                }
                person_type = type_mapping.get(seller['type'], seller['type'])
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø –≤ —á–∏—Å–ª–æ –¥–ª—è –ë–î
                person_type = await convert_seller_type_to_number(person_type)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—é –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –∏–∑ —Ç–µ–≥–æ–≤
            if seller.get('agency_name'):
                person = seller['agency_name']
            elif seller.get('name'):
                clean_name = seller['name']
                for stop in ['–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã', '–°—É–ø–µ—Ä–∞–≥–µ–Ω—Ç', '+7', '–ù–∞–ø–∏—Å–∞—Ç—å']:
                    if stop in clean_name:
                        clean_name = clean_name.split(stop)[0].strip()
                person = clean_name
        
        # –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ" (1) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if person_type is None:
            person_type = 1  # —á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º source_created
        source_created = ad_data.get('source_created')
        if source_created is None:
            print(f"‚ÑπÔ∏è source_created –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            source_created = datetime.now().date()
        elif isinstance(source_created, str):
            print(f"‚ö†Ô∏è source_created –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞: '{source_created}', —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            source_created = datetime.now().date()
        elif not isinstance(source_created, (datetime, date)):
            print(f"‚ö†Ô∏è source_created –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(source_created)}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É")
            source_created = datetime.now().date()
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        query = """
            INSERT INTO ads_avito (
                url, avitoid, price, rooms, area, floor, total_floors, 
                complex, metro, metro_id, min_metro, address, tags, 
                person_type, person, source_created, object_type_id
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)
            ON CONFLICT (avitoid) DO UPDATE SET
                url = EXCLUDED.url,
                price = EXCLUDED.price,
                rooms = EXCLUDED.rooms,
                area = EXCLUDED.area,
                floor = EXCLUDED.floor,
                total_floors = EXCLUDED.total_floors,
                complex = EXCLUDED.complex,
                metro = EXCLUDED.metro,
                metro_id = EXCLUDED.metro_id,
                min_metro = EXCLUDED.min_metro,
                address = EXCLUDED.address,
                tags = EXCLUDED.tags,
                person_type = EXCLUDED.person_type,
                person = EXCLUDED.person,
                source_created = EXCLUDED.source_created,
                object_type_id = EXCLUDED.object_type_id,
                updated_at = CURRENT_TIMESTAMP
            """

        result = await conn.execute(
            query,
            ad_data.get('URL'),
            avitoid,
            price,
            rooms,
            ad_data.get('area_m2'),
            ad_data.get('floor'),
            ad_data.get('floor_total'),
            ad_data.get('complex'),
            metro,
            ad_data.get('metro_id'),  # –î–æ–±–∞–≤–ª—è–µ–º metro_id
            min_metro,
            address,
            tags,
            person_type,
            person,
            source_created,  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            (2 if ad_data.get('object_type_id') == 2 else 1)  # object_type_id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        if "INSERT 0 1" in result:
            pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥
        elif "UPDATE 1" in result:
            pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥
        else:
            pass  # –£–±–∏—Ä–∞–µ–º –ª–æ–≥
        return True


async def create_avito_api_table() -> None:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É avito_api –¥–ª—è API –ø–∞—Ä—Å–µ—Ä–∞"""
    pool = await _get_avito_pool()
    async with pool.acquire() as conn:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await conn.execute("DROP TABLE IF EXISTS avito_api CASCADE")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–µ–º url
        await conn.execute(
            """
            CREATE TABLE avito_api (
                id SERIAL PRIMARY KEY,
                avitoid NUMERIC UNIQUE NOT NULL,
                title TEXT,
                deal_type SMALLINT, -- 1: –ø—Ä–æ–¥–∞–∂–∞, 2: –∞—Ä–µ–Ω–¥–∞
                price BIGINT,
                metro TEXT,
                url TEXT, -- URL –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        await conn.execute(
            "CREATE INDEX IF NOT EXISTS idx_avito_api_avitoid ON avito_api(avitoid)"
        )
        
        print("[DB] –¢–∞–±–ª–∏—Ü–∞ avito_api –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–ª–µ–º url")

async def save_avito_api_item(data: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É avito_api"""
    pool = await _get_avito_pool()
    async with pool.acquire() as conn:
        try:
            avitoid = None
            if data.get('offer_id'):
                try:
                    avitoid = int(data['offer_id'])
                except (ValueError, TypeError):
                    pass

            price = data.get('price')
            
            await conn.execute(
                """
                INSERT INTO avito_api (
                    avitoid, title, deal_type, price, metro, url
                ) VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (avitoid) DO NOTHING
                """,
                avitoid,
                data.get('title'),
                2 if data.get('deal_type') == 'rental' else 1,  # 2: –∞—Ä–µ–Ω–¥–∞, 1: –ø—Ä–æ–¥–∞–∂–∞
                price,
                data.get('metro'),
                data.get('url_clean')  # URL –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            )
            print(f"[DB] –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ API AVITO {data.get('offer_id')}")
            return True
        except Exception as e:
            print(f"[DB] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ avito_api: {e}")
            return False
