#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä AVITO —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É metro –∏–∑ –ë–î
"""

import asyncio
import os
import time
import random
import re
import sys
from typing import Dict, List, Optional
from urllib.parse import urljoin
from dotenv import load_dotenv
import json

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
# 1 - –í—Ç–æ—Ä–∏—á–∫–∞
# 2 - –ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏
DEFAULT_MODE = 1

# –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ (ID –∏–∑ —Ç–∞–±–ª–∏—Ü—ã metro –≤ –ë–î)
# –û—Å—Ç–∞–≤—å—Ç–µ None –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Ç—Ä–æ
DEFAULT_METRO_ID = None  # –ù–∞–ø—Ä–∏–º–µ—Ä: 55 –¥–ª—è –ö—É–∑—å–º–∏–Ω–∫–∏

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
MAX_CARDS_DEFAULT = 5

# Headless —Ä–µ–∂–∏–º
HEADLESS_MODE_DEFAULT = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
# ==============================

# Selenium imports
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, WebDriverException, NoSuchElementException

# Database imports
from parse_todb_avito import create_ads_avito_table, save_avito_ad
import asyncpg

# Load environment
load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

class AvitoMetroDBParser:
    def __init__(self, mode: int = 1, metro_id: Optional[int] = None, max_cards: int = 5):
        self.mode = mode
        self.metro_id = metro_id
        self.max_cards = max_cards
        self.driver = None
        self.db_conn = None
        
        # URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        self.base_urls = {
            1: "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg",
            2: "https://www.avito.ru/moskva/kvartiry/prodam/novostroyka-ASgBAgICAkSSA8YQ5geOUg"
        }
        
        # –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        self.mode_names = {
            1: "–≤—Ç–æ—Ä–∏—á–∫–∞",
            2: "–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏"
        }
    
    async def connect_db(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î"""
        try:
            self.db_conn = await asyncpg.connect(DATABASE_URL)
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
        return True
    
    async def close_db(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        if self.db_conn:
            await self.db_conn.close()
            print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def get_metro_info(self, metro_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–∑ –ë–î"""
        try:
            if not self.db_conn:
                return None
            
            # –ò—â–µ–º –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É ID
            metro = await self.db_conn.fetchrow("""
                SELECT id, name, line_id, lat, lon, cian_id, avito_id
                FROM metro 
                WHERE id = $1
            """, metro_id)
            
            if metro:
                return dict(metro)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É ID, –ø—Ä–æ–±—É–µ–º –ø–æ avito_id
            metro = await self.db_conn.fetchrow("""
                SELECT id, name, line_id, lat, lon, cian_id, avito_id
                FROM metro 
                WHERE avito_id = $1
            """, metro_id)
            
            if metro:
                return dict(metro)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ avito_id, –ø—Ä–æ–±—É–µ–º –ø–æ cian_id
            metro = await self.db_conn.fetchrow("""
                SELECT id, name, line_id, lat, lon, cian_id, avito_id
                FROM metro 
                WHERE cian_id = $1
            """, metro_id)
            
            if metro:
                return dict(metro)
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ: {e}")
            return None
    
    async def search_metro_by_name(self, name: str) -> Optional[Dict]:
        """–ò—â–µ—Ç —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            if not self.db_conn:
                return None
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
            metro = await self.db_conn.fetchrow("""
                SELECT id, name, line_id, lat, lon, cian_id
                FROM metro 
                WHERE LOWER(name) = LOWER($1)
            """, name)
            
            if metro:
                return dict(metro)
            
            # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            metro = await self.db_conn.fetchrow("""
                SELECT id, name, line_id, lat, lon, cian_id
                FROM metro 
                WHERE LOWER(name) LIKE LOWER($1)
                LIMIT 1
            """, f"%{name}%")
            
            if metro:
                return dict(metro)
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Ç—Ä–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {e}")
            return None
    
    async def get_metro_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç—Ä–æ"""
        try:
            if not self.db_conn:
                return {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω—Ü–∏–π
            total_count = await self.db_conn.fetchval("SELECT COUNT(*) FROM metro")
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–Ω–∏–π
            lines_count = await self.db_conn.fetchval("SELECT COUNT(DISTINCT line_id) FROM metro")
            
            # –°—Ç–∞–Ω—Ü–∏–∏ —Å cian_id
            cian_count = await self.db_conn.fetchval("SELECT COUNT(*) FROM metro WHERE cian_id IS NOT NULL")
            
            # –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π
            sample_stations = await self.db_conn.fetch("""
                SELECT id, name, line_id, cian_id
                FROM metro 
                ORDER BY id 
                LIMIT 10
            """)
            
            return {
                "total_stations": total_count,
                "lines_count": lines_count,
                "cian_id_count": cian_count,
                "sample_stations": [dict(station) for station in sample_stations]
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–µ—Ç—Ä–æ: {e}")
            return {}
    
    def get_target_url(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤–æ–π URL —Å —É—á–µ—Ç–æ–º –º–µ—Ç—Ä–æ"""
        base_url = self.base_urls.get(self.mode, self.base_urls[1])
        
        if self.metro_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º avito_id –¥–ª—è URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            url = f"{base_url}?metro={self.metro_id}"
            print(f"üìç –ü–∞—Ä—Å–∏–º {self.mode_names[self.mode]} —É –º–µ—Ç—Ä–æ ID: {self.metro_id}")
        else:
            url = base_url
            print(f"üìç –ü–∞—Ä—Å–∏–º {self.mode_names[self.mode]} –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Ç—Ä–æ")
        
        return url
    
    async def get_target_url_with_metro_info(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ü–µ–ª–µ–≤–æ–π URL —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ"""
        base_url = self.base_urls.get(self.mode, self.base_urls[1])
        
        if self.metro_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ
            metro_info = await self.get_metro_info(self.metro_id)
            if metro_info and metro_info.get('avito_id'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º avito_id –¥–ª—è URL
                url = f"{base_url}?metro={metro_info['avito_id']}"
                print(f"üìç –ü–∞—Ä—Å–∏–º {self.mode_names[self.mode]} —É –º–µ—Ç—Ä–æ: {metro_info['name']} (avito_id: {metro_info['avito_id']})")
                return url
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ID
                url = f"{base_url}?metro={self.metro_id}"
                print(f"üìç –ü–∞—Ä—Å–∏–º {self.mode_names[self.mode]} —É –º–µ—Ç—Ä–æ ID: {self.metro_id} (avito_id –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                return url
        else:
            url = base_url
            print(f"üìç –ü–∞—Ä—Å–∏–º {self.mode_names[self.mode]} –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –º–µ—Ç—Ä–æ")
            return url
    
    def setup_selenium(self) -> webdriver.Chrome:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium —Å stealth-—Ç–µ—Ö–Ω–∏–∫–∞–º–∏"""
        options = Options()
        
        # Stealth –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # User-Agent
        options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        options.add_argument("--window-size=1920,1080")
        
        # Headless —Ä–µ–∂–∏–º
        if HEADLESS_MODE_DEFAULT:
            options.add_argument("--headless")
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium WebDriver —Å stealth-—Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –≤ headless —Ä–µ–∂–∏–º–µ...")
        else:
            print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium WebDriver —Å stealth-—Ç–µ—Ö–Ω–∏–∫–∞–º–∏...")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        prefs = {
            "profile.managed_default_content_settings.images": 2,
            "profile.default_content_setting_values.notifications": 2
        }
        options.add_experimental_option("prefs", prefs)
        
        self.driver = webdriver.Chrome(options=options)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        return self.driver
    
    def load_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç-–∑–∞—â–∏—Ç—ã"""
        try:
            cookies_file = "avito_cookies.json"
            if not os.path.exists(cookies_file):
                print("‚ö†Ô∏è –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            with open(cookies_file, 'r', encoding='utf-8') as f:
                cookies_data = json.load(f)
            
            print(f"üç™ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {cookies_data['timestamp']}")
            print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data['cookies'])}")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–µ–Ω
            self.driver.get("https://www.avito.ru")
            time.sleep(2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            applied_count = 0
            for cookie in cookies_data['cookies']:
                try:
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–ª—è
                    cookie_dict = {
                        'name': cookie['name'],
                        'value': cookie['value'],
                        'domain': cookie.get('domain', ''),
                        'path': cookie.get('path', '/')
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if cookie.get('expiry'):
                        cookie_dict['expiry'] = cookie['expiry']
                    if cookie.get('secure'):
                        cookie_dict['secure'] = cookie['secure']
                    if cookie.get('httpOnly'):
                        cookie_dict['httpOnly'] = cookie['httpOnly']
                    
                    self.driver.add_cookie(cookie_dict)
                    applied_count += 1
                    
                except Exception as e:
                    continue
            
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {applied_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            self.driver.refresh()
            time.sleep(2)
            
            try:
                # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                auth_elements = [
                    '[data-marker="header/create-button"]',
                    '.create-button',
                    '.post-button',
                    '[data-marker="header/profile"]',
                    '.profile-link'
                ]
                
                for selector in auth_elements:
                    try:
                        element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
                        return True
                    except:
                        continue
                
                print("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ cookies –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
                return True
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return False
    
    async def parse_avito_page(self, url: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É AVITO"""
        try:
            print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            self.driver.get(url)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            delay = random.uniform(3, 6)
            print(f"‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ {delay:.1f} —Å–µ–∫...")
            await asyncio.sleep(delay)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            await asyncio.sleep(2)
            
            # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            try:
                headers = self.driver.find_elements(By.CSS_SELECTOR, "h1, h2, h3")
                if headers:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(headers)}")
                    for header in headers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–≥–æ–ª–æ–≤–∫–∞
                        print(f"    üìù {header.text[:100]}...")
                else:
                    print("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
            
            # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            print("üîç –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            selectors = [
                '[data-marker="item"]',
                '.iva-item-root',
                '.item',
                '.listing-item',
                'a[href*="/item/"]'  # –°—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ]
            
            cards = []
            used_selector = None
            
            for selector in selectors:
                try:
                    cards = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if cards:
                        used_selector = selector
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector}")
                        break
                except Exception as e:
                    continue
            
            if not cards:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏
                all_links = self.driver.find_elements(By.TAG_NAME, "a")
                print(f"üîç –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(all_links)}")
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                item_links = [link for link in all_links if '/item/' in (link.get_attribute('href') or '')]
                if item_links:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(item_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
                    cards = item_links[:self.max_cards]
                    used_selector = "a[href*='/item/']"
                
                if not cards:
                    return []
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            print(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫: {min(len(cards), self.max_cards)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            parsed_ads = []
            for i, card in enumerate(cards[:self.max_cards]):
                try:
                    ad_data = self.parse_card(card, i + 1)
                    if ad_data:
                        parsed_ads.append(ad_data)
                        print(f"  ‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ: {ad_data['avitoid']}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i + 1}: {e}")
            
            return parsed_ads
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    def parse_card(self, card, card_number: int) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            print(f"\nüì¶ –ö–∞—Ä—Ç–æ—á–∫–∞ {card_number}/{self.max_cards}:")
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            avitoid = self.extract_avitoid(card)
            if not avitoid:
                print("    ‚ùå ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = self.extract_text(card, '[data-marker="item-title"]', '.iva-item-title', 'h3', 'h4')
            if title:
                print(f"    –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title[:50]}...")
            
            # –¶–µ–Ω–∞
            price = self.extract_price(card)
            if price:
                print(f"    –¶–µ–Ω–∞: {price:,} ‚ÇΩ")
            
            # –ê–¥—Ä–µ—Å
            address = self.extract_text(card, '[data-marker="item-address"]', '.iva-item-address', '.address')
            if address:
                print(f"    –ê–¥—Ä–µ—Å: {address}")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ad_data = {
                'avitoid': avitoid,
                'title': title or '',
                'price': price or 0,
                'address': address or '',
                'metro_id': self.metro_id,
                'mode': self.mode,
                'mode_name': self.mode_names[self.mode],
                'url': self.get_target_url(),
                'parsed_at': time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            return ad_data
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    
    def extract_avitoid(self, card) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            href = card.get_attribute('href')
            if href:
                # –ò—â–µ–º ID –≤ href
                match = re.search(r'/(\d+)$', href)
                if match:
                    return match.group(1)
            
            # –ü—Ä–æ–±—É–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
            avitoid = card.get_attribute('data-item-id') or card.get_attribute('data-avito-id')
            if avitoid:
                return avitoid
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            id_elements = card.find_elements(By.CSS_SELECTOR, '[data-item-id], [data-avito-id]')
            for elem in id_elements:
                avitoid = elem.get_attribute('data-item-id') or elem.get_attribute('data-avito-id')
                if avitoid:
                    return avitoid
            
            return None
        except:
            return None
    
    def extract_text(self, card, *selectors) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º"""
        for selector in selectors:
            try:
                element = card.find_element(By.CSS_SELECTOR, selector)
                text = element.text.strip()
                if text:
                    return text
            except:
                continue
        return None
    
    def extract_price(self, card) -> Optional[int]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ü–µ–Ω—É"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ü–µ–Ω—ã
            price_selectors = [
                '[data-marker="item-price"]',
                '.iva-item-price',
                '.price',
                '.price-value',
                '.price-text'
            ]
            
            for selector in price_selectors:
                try:
                    element = card.find_element(By.CSS_SELECTOR, selector)
                    price_text = element.text.strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    price_match = re.search(r'[\d\s]+', price_text)
                    if price_match:
                        price_str = price_match.group().replace(' ', '')
                        return int(price_str)
                except:
                    continue
            
            return None
        except:
            return None
    
    async def run_parser(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ AVITO —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ—Ç—Ä–æ (–ë–î)")
            print("=" * 60)
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            if not await self.connect_db():
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç—Ä–æ
            metro_stats = await self.get_metro_stats()
            if metro_stats:
                print(f"üöá –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–æ:")
                print(f"  –í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: {metro_stats['total_stations']}")
                print(f"  –õ–∏–Ω–∏–π: {metro_stats['lines_count']}")
                print(f"  –° cian_id: {metro_stats['cian_id_count']}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            print(f"\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print(f"  –†–µ–∂–∏–º: {self.mode} ({self.mode_names[self.mode]})")
            print(f"  –ú–µ—Ç—Ä–æ: {self.metro_id or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            
            if self.metro_id:
                metro_info = await self.get_metro_info(self.metro_id)
                if metro_info:
                    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {metro_info['name']}")
                    print(f"  –õ–∏–Ω–∏—è: {metro_info['line_id']}")
                    print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {metro_info['lat']:.6f}, {metro_info['lon']:.6f}")
                    if metro_info['cian_id']:
                        print(f"  Cian ID: {metro_info['cian_id']}")
                else:
                    print(f"  ‚ö†Ô∏è –°—Ç–∞–Ω—Ü–∏—è —Å ID {self.metro_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            
            print(f"  –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ä—Ç–æ—á–µ–∫: {self.max_cards}")
            print(f"  Headless —Ä–µ–∂–∏–º: {'–î–∞' if HEADLESS_MODE_DEFAULT else '–ù–µ—Ç'}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            print("\nüíæ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await create_ads_avito_table()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π URL
            target_url = await self.get_target_url_with_metro_info()
            print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {self.mode_names[self.mode]} —Å stealth-—Ç–µ—Ö–Ω–∏–∫–∞–º–∏: {target_url}")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            self.setup_selenium()
            
            if not self.driver:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebDriver")
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç-–∑–∞—â–∏—Ç—ã
            print("\nüç™ –ó–∞–≥—Ä—É–∂–∞–µ–º cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–±–æ—Ç-–∑–∞—â–∏—Ç—ã...")
            cookies_loaded = self.load_cookies()
            
            if cookies_loaded:
                print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            else:
                print("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ cookies (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
            
            print(f"üìã –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ä—Ç–æ—á–µ–∫: {self.max_cards}")
            
            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            parsed_ads = await self.parse_avito_page(target_url)
            
            if not parsed_ads:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return
            
            print(f"\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ {self.mode_names[self.mode]} –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(parsed_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ë–î...")
            saved_count = 0
            
            for ad in parsed_ads:
                try:
                    result = await save_avito_ad(ad)
                    if result:
                        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ad['avitoid']} ({self.mode_names[self.mode]})")
                        saved_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç) AVITO {ad['avitoid']}: {result}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {ad['avitoid']}: {e}")
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count} –∏–∑ {len(parsed_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            if self.driver:
                self.driver.quit()
                print("üîí WebDriver –∑–∞–∫—Ä—ã—Ç")
            await self.close_db()
    
    async def print_metro_info(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö –º–µ—Ç—Ä–æ"""
        if not self.db_conn:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π
            stations = await self.db_conn.fetch("""
                SELECT id, name, line_id, cian_id, avito_id
                FROM metro 
                ORDER BY id 
                LIMIT 15
            """)
            
            print(f"üöá –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ: {len(stations)}")
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π:")
            
            for station in stations:
                cian_info = f" (cian_id: {station['cian_id']})" if station['cian_id'] else ""
                avito_info = f" (avito_id: {station['avito_id']})" if station['avito_id'] else ""
                print(f"  {station['id']:3d} - {station['name']:<25} –õ–∏–Ω–∏—è {station['line_id']}{cian_info}{avito_info}")
            
            if self.metro_id:
                metro_info = await self.get_metro_info(self.metro_id)
                if metro_info:
                    print(f"\nüìç –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è: {metro_info['id']} - {metro_info['name']} (–õ–∏–Ω–∏—è {metro_info['line_id']})")
                    if metro_info.get('avito_id'):
                        print(f"  üéØ Avito ID: {metro_info['avito_id']} (–¥–ª—è URL)")
                    if metro_info.get('cian_id'):
                        print(f"  üè† Cian ID: {metro_info['cian_id']}")
                else:
                    print(f"\n‚ö†Ô∏è –°—Ç–∞–Ω—Ü–∏—è —Å ID {self.metro_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ AVITO —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ—Ç—Ä–æ (–ë–î)")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    mode = DEFAULT_MODE
    metro_id = DEFAULT_METRO_ID
    max_cards = MAX_CARDS_DEFAULT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        try:
            mode = int(sys.argv[1])
            if mode not in [1, 2]:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1 –¥–ª—è –≤—Ç–æ—Ä–∏—á–∫–∏ –∏–ª–∏ 2 –¥–ª—è –Ω–æ–≤–æ—Å—Ç—Ä–æ–µ–∫")
                return
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1 –∏–ª–∏ 2")
            return
    
    if len(sys.argv) > 2:
        try:
            metro_id = int(sys.argv[2])
            print(f"üìç –£–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ: {metro_id}")
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –º–µ—Ç—Ä–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            return
    
    if len(sys.argv) > 3:
        try:
            max_cards = int(sys.argv[3])
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫")
            return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = AvitoMetroDBParser(mode=mode, metro_id=metro_id, max_cards=max_cards)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ
    await parser.print_metro_info()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    await parser.run_parser()
    
    print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
