#!/usr/bin/env python3
"""
Headless –ø–∞—Ä—Å–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —á–∏—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
"""

import json
import os
import time
import asyncio
import asyncpg
import random
from dotenv import load_dotenv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from parse_todb_avito import create_ads_avito_table, save_avito_ad

# –°–ø–∏—Å–æ–∫ User-Agent –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
USER_AGENTS = [
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
]

# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –±–µ–π–¥–∂–µ–π/–º–µ—Ç–æ–∫ Avito
AVITO_BADGES = [
    "–†—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞",
    "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫", 
    "–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –†–æ—Å—Ä–µ–µ—Å—Ç—Ä–µ",
    "–ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä",
    "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Å–¥–µ–ª–∫–∞",
    "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –¥–æ–º",
    "–°—Ä–æ—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞",
    "–í–æ–∑–º–æ–∂–µ–Ω —Ç–æ—Ä–≥",
    "–ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã",
    "–°–≤–æ–±–æ–¥–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞",
    "–†–µ–º–æ–Ω—Ç –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞",
    "–ò–ø–æ—Ç–µ–∫–∞",
    "–†–∞—Å—Å—Ä–æ—á–∫–∞",
    "–°–∫–∏–¥–∫–∞",
    "–ê–∫—Ü–∏—è",
    "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞",
    "–í—Ç–æ—Ä–∏—á–∫–∞",
    "–°—Ç—É–¥–∏—è",
    "–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã",
    "–ü–µ–Ω—Ç—Ö–∞—É—Å",
    "–î–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–∞—è",
    "–° –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥",
    "–° –º–µ–±–µ–ª—å—é",
    "–ë–µ–∑ –º–µ–±–µ–ª–∏",
    "–° –æ—Ç–¥–µ–ª–∫–æ–π",
    "–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏",
    "–° –±–∞–ª–∫–æ–Ω–æ–º",
    "–° –ª–æ–¥–∂–∏–µ–π",
    "–° —Ç–µ—Ä—Ä–∞—Å–æ–π"
]

class BlockingDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self):
        self.block_count = 0
        self.base_delay = 30  # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 30 —Å–µ–∫—É–Ω–¥
        self.max_delay = 480  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 8 –º–∏–Ω—É—Ç
        
    def is_blocked(self, driver):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            current_url = driver.current_url
            page_source = driver.page_source.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç
            if "captcha" in current_url.lower() or "check" in current_url.lower():
                print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–∞–ø—á—É/–ø—Ä–æ–≤–µ—Ä–∫—É")
                return True
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            try:
                response = driver.execute_script("return window.performance.getEntries()[0].responseStatus")
                if response == 403:
                    print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å 403 (Forbidden)")
                    return True
            except:
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
            blocking_indicators = [
                "captcha", "–∫–∞–ø—á–∞", "verification", "blocked", "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                "–¥–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω", "—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", "rate limit",
                "–ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", "verify you are human", "security check"
            ]
            
            for indicator in blocking_indicators:
                if indicator in page_source:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ
                    if page_source.count(indicator) > 2:  # –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑
                        print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: '{indicator}'")
                        return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ)
            if "avito.ru" in current_url and len(page_source) < 500:
                print("üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def get_backoff_delay(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É —Å exponential backoff –∏ jitter"""
        self.block_count += 1
        
        # Exponential backoff: 30s ‚Üí 60s ‚Üí 120s ‚Üí 240s ‚Üí 480s
        delay = min(self.base_delay * (2 ** (self.block_count - 1)), self.max_delay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º jitter (¬±20%)
        jitter = delay * 0.2
        final_delay = delay + random.uniform(-jitter, jitter)
        
        print(f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ #{self.block_count}: {final_delay:.1f} —Å–µ–∫")
        return final_delay
    
    def reset_block_count(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
        if self.block_count > 0:
            print(f"‚úÖ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–±—ã–ª–æ: {self.block_count})")
            self.block_count = 0

class HeadlessMetroParser:
    def __init__(self, metro_id=2, max_cards=3):
        self.metro_id = metro_id
        self.metro_avito_id = None
        self.max_cards = max_cards
        self.driver = None
        self.blocking_detector = BlockingDetector()  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        
    async def get_metro_avito_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç avito_id –¥–ª—è –º–µ—Ç—Ä–æ –∏–∑ –ë–î"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            load_dotenv()
            database_url = os.getenv('DATABASE_URL')
            
            if not database_url:
                print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
                return False
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            conn = await asyncpg.connect(database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            result = await conn.fetchrow(
                "SELECT name, avito_id FROM metro WHERE id = $1",
                self.metro_id
            )
            
            if result:
                self.metro_avito_id = result['avito_id']
                print(f"üìç –ú–µ—Ç—Ä–æ: {result['name']} (ID: {self.metro_id}, avito_id: {self.metro_avito_id})")
                await conn.close()
                return True
            else:
                print(f"‚ùå –ú–µ—Ç—Ä–æ —Å ID {self.metro_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                await conn.close()
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è avito_id: {e}")
            return False
    
    async def get_metro_info(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
            cookies_data = self.load_cookies()
            if not cookies_data:
                return None
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Selenium
            if not self.setup_selenium():
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            if not self.apply_cookies(cookies_data):
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º avito_id –¥–ª—è –º–µ—Ç—Ä–æ
            if not await self.get_metro_avito_id():
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–æ –∏–∑ –ë–î (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            metro_name = f"–ú–µ—Ç—Ä–æ ID {self.metro_id}"
            
            return {
                'name': metro_name,
                'id': self.metro_id,
                'avito_id': self.metro_avito_id
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç—Ä–æ: {e}")
            return None
    
    def load_cookies(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç cookies –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            cookies_file = "avito_cookies.json"
            if os.path.exists(cookies_file):
                with open(cookies_file, 'r', encoding='utf-8') as f:
                    cookies_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è cookies
                if 'created_at' in cookies_data:
                    created_time = cookies_data['created_at']
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies –æ—Ç {created_time}")
                else:
                    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã cookies")
                
                print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ cookies: {len(cookies_data.get('cookies', []))}")
                return cookies_data
            else:
                print("‚ùå –§–∞–π–ª cookies –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
            return None
    
    def setup_selenium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Selenium WebDriver –≤ headless —Ä–µ–∂–∏–º–µ"""
        try:
            options = Options()
            options.add_argument("--headless")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏
            random_user_agent = random.choice(USER_AGENTS)
            options.add_argument(f"--user-agent={random_user_agent}")
            print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º User-Agent: {random_user_agent[:50]}...")
            
            options.add_argument("--window-size=1920,1080")
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--disable-features=VizDisplayCompositor")
            options.add_experimental_option("excludeSwitches", ["enable-automation"])
            options.add_experimental_option('useAutomationExtension', False)
            
            print("üîß –°–æ–∑–¥–∞–µ–º headless –±—Ä–∞—É–∑–µ—Ä...")
            self.driver = webdriver.Chrome(options=options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def apply_cookies(self, cookies_data):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç cookies –∫ –±—Ä–∞—É–∑–µ—Ä—É"""
        try:
            if not self.driver:
                return False
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Avito
            print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ AVITO...")
            self.driver.get("https://avito.ru")
            time.sleep(2)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies
            cookies = cookies_data.get('cookies', [])
            for cookie in cookies:
                try:
                    self.driver.add_cookie(cookie)
                except:
                    continue
            
            print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ cookies: {len(cookies)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å cookies
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å cookies...")
            self.driver.refresh()
            time.sleep(3)
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è cookies: {e}")
            return False
    
    def change_session(self):
        """–°–º–µ–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ"""
        try:
            print("üîÑ –°–º–µ–Ω–∞ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–∞—É–∑–µ—Ä
            if self.driver:
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
            
            # –ù–ï —É–¥–∞–ª—è–µ–º cookies - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ–Ω—è–µ–º User-Agent –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            if not self.setup_selenium():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º cookies (–µ—Å–ª–∏ –µ—Å—Ç—å)
            cookies_data = self.load_cookies()
            if cookies_data:
                if not self.apply_cookies(cookies_data):
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å cookies")
            else:
                print("‚ö†Ô∏è Cookies –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö")
            
            print("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def handle_blocking(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å exponential backoff"""
        try:
            print("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ë–õ–û–ö–ò–†–û–í–ö–ê!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å exponential backoff
            delay = self.blocking_detector.get_backoff_delay()
            
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥...")
            time.sleep(delay)
            
            # –°–º–µ–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            if not self.change_session():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
                return False
            
            print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def get_metro_url(self, page=1):
        """–ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –º–µ—Ç—Ä–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id"""
        if not self.metro_avito_id:
            print("‚ùå avito_id –¥–ª—è –º–µ—Ç—Ä–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return None
            
        # URL –¥–ª—è –≤—Ç–æ—Ä–∏—á–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º avito_id
        base_url = "https://www.avito.ru/moskva/kvartiry/prodam/vtorichka-ASgBAgICAkSSA8YQ5geMUg"
        metro_url = f"{base_url}?metro={self.metro_avito_id}"
        if page > 1:
            metro_url += f"&p={page}"
        return metro_url
    
    def clean_url_from_context(self, url):
        """–û—á–∏—â–∞–µ—Ç URL –æ—Ç context –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if not url:
            return url
        
        try:
            # –£–±–∏—Ä–∞–µ–º context=... –∏–∑ URL
            if 'context=' in url:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é context=
                context_start = url.find('context=')
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π & –∏–ª–∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
                if '&' in url[context_start:]:
                    next_param = url.find('&', context_start)
                    # –£–±–∏—Ä–∞–µ–º context=...& –∏–ª–∏ context=... –≤ –∫–æ–Ω—Ü–µ
                    if next_param != -1:
                        url = url[:context_start] + url[next_param:]
                    else:
                        url = url[:context_start]
                else:
                    # context –≤ –∫–æ–Ω—Ü–µ URL
                    url = url[:context_start]
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π & –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è
                if url.endswith('&'):
                    url = url[:-1]
                if url.endswith('?'):
                    url = url[:-1]
            
            return url
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ URL –æ—Ç context: {e}")
            return url
    
    def wait_for_cards_load(self, timeout=30):
        """–ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫"""
        try:
            print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫...")
            
            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            wait = WebDriverWait(self.driver, timeout)
            cards = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '[data-marker="item"]')))
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            return True
            
        except TimeoutException:
            print("‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
            return False
    
    def parse_title(self, title_text):
        """–ü–∞—Ä—Å–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        try:
            title_data = {}
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
            rooms_pattern = r'(\d+)-–∫\.|(\d+)\s*–∫–æ–º–Ω–∞—Ç|—Å—Ç—É–¥–∏—è|–°—Ç—É–¥–∏—è'
            rooms_match = re.search(rooms_pattern, title_text)
            if rooms_match:
                if '—Å—Ç—É–¥–∏—è' in rooms_match.group(0).lower():
                    title_data['rooms'] = '—Å—Ç—É–¥–∏—è'
                else:
                    title_data['rooms'] = rooms_match.group(1) if rooms_match.group(1) else rooms_match.group(2)
            else:
                title_data['rooms'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–ª–æ—â–∞–¥–∏
            area_pattern = r'(\d+(?:[,\d]+)?)\s*–º¬≤'
            area_match = re.search(area_pattern, title_text)
            if area_match:
                title_data['area'] = area_match.group(1).replace(',', '.')
            else:
                title_data['area'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —ç—Ç–∞–∂–∞ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏
            floor_pattern = r'(\d+)/(\d+)\s*—ç—Ç'
            floor_match = re.search(floor_pattern, title_text)
            if floor_match:
                title_data['floor'] = floor_match.group(1)
                title_data['total_floors'] = floor_match.group(2)
            else:
                title_data['floor'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                title_data['total_floors'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            return title_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {e}")
            return {
                'rooms': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'area': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'floor': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'total_floors': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def parse_address(self, address_text):
        """–ü–∞—Ä—Å–∏—Ç –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            address_data = {}
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            lines = address_text.strip().split('\n')
            
            if len(lines) >= 2:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —É–ª–∏—Ü–∞ –∏ –¥–æ–º (–±–µ—Ä–µ–º –∫–∞–∫ –µ—Å—Ç—å)
                street_line = lines[0].strip()
                address_data['street_house'] = street_line
                
                # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –º–µ—Ç—Ä–æ –∏ –≤—Ä–µ–º—è
                metro_line = lines[1].strip()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –∏—â–µ–º –º–∏–Ω—É—Ç—ã
                parts = [p.strip() for p in metro_line.split(',') if p.strip()]
                
                minutes = None
                metro = None
                minutes_idx = None
                
                # –ò—â–µ–º —á–∞—Å—Ç—å —Å –º–∏–Ω—É—Ç–∞–º–∏ (–±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É –¥–æ —Å–ª–æ–≤–∞ "–º–∏–Ω")
                for i, p in enumerate(parts):
                    if re.search(r"–º–∏–Ω\.?", p, re.IGNORECASE):
                        nums = re.findall(r"\d+", p)
                        if nums:
                            minutes = int(nums[0])
                            minutes_idx = i
                            break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∏–Ω—É—Ç—ã, –º–µ—Ç—Ä–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–µ–≥–º–µ–Ω—Ç–µ
                if minutes_idx is not None and minutes_idx > 0:
                    # –≤—Å—ë, —á—Ç–æ –î–û —Å–µ–≥–º–µ–Ω—Ç–∞ —Å –º–∏–Ω—É—Ç–∞–º–∏ ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å–Ω–∞—è —á–∞—Å—Ç—å
                    address_candidates = parts[:minutes_idx]
                else:
                    address_candidates = parts
                
                # –ê–¥—Ä–µ—Å ‚Äî –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—É–ª–∏—Ü–∞, –¥–æ–º), –µ—Å–ª–∏ –µ—Å—Ç—å
                if address_candidates:
                    street = address_candidates[0]
                    house = None
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—á–ª–µ–Ω–∏—Ç—å –¥–æ–º –∫–∞–∫ –≤–µ–¥—É—â—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é —á–∞—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ,
                    # –∞ –º–µ—Ç—Ä–æ ‚Äî –∫–∞–∫ —Ñ—Ä–∞–∑—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã –±—É–∫–≤ (–ó–∞–≥–ª–∞–≤–Ω–∞—è+—Å—Ç—Ä–æ—á–Ω–∞—è)
                    if len(address_candidates) >= 2:
                        seg2 = address_candidates[1]
                        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–≥–ª–∞–≤–Ω–æ–π –∫–∏—Ä–∏–ª. –±—É–∫–≤—ã, –∑–∞ –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç —Å—Ç—Ä–æ—á–Ω–∞—è ‚Äî –Ω–∞—á–∞–ª–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç—Ä–æ
                        m_cap = re.search(r"[–ê-–Ø–Å][–∞-—è—ë]", seg2)
                        if m_cap and m_cap.start() > 0:
                            split_idx = m_cap.start()
                            head = seg2[:split_idx].strip()
                            tail = seg2[split_idx:].strip()
                            if head:
                                house = head
                            if not metro and tail:
                                metro = tail
                        else:
                            house = seg2
                    if street and house:
                        address_data['street_house'] = f"{street}, {house}"
                    else:
                        address_data['street_house'] = street
                if metro:
                    address_data['metro_name'] = metro
                else:
                    address_data['metro_name'] = metro_line
                if minutes:
                    address_data['time_to_metro'] = str(minutes)
                else:
                    address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                address_data['street_house'] = address_text.strip()
                address_data['metro_name'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                address_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            return address_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞: {e}")
            return {
                'street_house': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'metro_name': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞',
                'time_to_metro': '–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'
            }
    
    def clean_seller_name(self, seller_text):
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ñ—Ä–∞–∑ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ)"""
        if not seller_text:
            return None
        
        # –£–±–∏—Ä–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        ad_phrases = [
            r'–∑–≤–æ–Ω–∏—Ç–µ, –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!?',
            r'–∑–≤–æ–Ω–∏—Ç–µ!?',
            r'–≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!?',
            r'–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!?',
            r'–ø–∏—à–∏—Ç–µ!?',
            r'—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!?',
            r'–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!?',
            r'—Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö!?',
            r'–ª—É—á—à–∏–µ —Ü–µ–Ω—ã!?',
            r'–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!?'
        ]
        
        cleaned = seller_text
        for phrase in ad_phrases:
            cleaned = re.sub(phrase, '', cleaned, flags=re.IGNORECASE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = re.sub(r'\s+', ' ', cleaned).strip()
        
        return cleaned if len(cleaned) > 2 else None
    
    def parse_seller_info(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        seller_data = {}
        try:
            badge_elements = card_element.find_elements(By.CSS_SELECTOR, '[class*="badge"], [class*="label"], [class*="tag"], [class*="seller"], [class*="owner"]')
            for elem in badge_elements:
                try:
                    text = elem.text.strip()
                    if text and len(text) > 2:
                        if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in text.lower():
                            seller_data['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                            seller_data['from_badge'] = text
                            break
                        elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in text.lower() or '–∞–≥–µ–Ω—Ç' in text.lower():
                            seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                            seller_data['from_badge'] = text
                            break
                        elif '—á–∞—Å—Ç–Ω' in text.lower():
                            seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                            seller_data['from_badge'] = text
                            break
                except:
                    continue
        except:
            pass
        
        if 'type' not in seller_data:
            try:
                all_text = card_element.text.lower()
                if '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫' in all_text:
                    seller_data['type'] = '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'
                elif '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in all_text or '–∞–≥–µ–Ω—Ç' in all_text:
                    seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                elif '—á–∞—Å—Ç–Ω' in all_text:
                    seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
                elif '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫' in all_text:
                    seller_data['type'] = '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫'
                else:
                    seller_data['type'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                seller_data['full_text'] = '–Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ'
            except:
                seller_data['type'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                seller_data['full_text'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
        
        try:
            card_text = card_element.text
            time_seller_pattern = r'(\d+\s*(?:—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤)\s*–Ω–∞–∑–∞–¥)\s*([^0-9\n]+?)(?=\d+\s*–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö|\d+\s*–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)'
            match = re.search(time_seller_pattern, card_text, re.IGNORECASE | re.DOTALL)
            if match:
                time_created = match.group(1).strip()
                seller_name = match.group(2).strip()
                cleaned_seller = self.clean_seller_name(seller_name)
                if cleaned_seller:
                    seller_data['time_created'] = time_created
                    seller_data['seller_name'] = cleaned_seller
                    if 'type' not in seller_data or seller_data['type'] == '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                        if '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ' in cleaned_seller.lower() or '–∞–≥–µ–Ω—Ç' in cleaned_seller.lower():
                            seller_data['type'] = '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ'
                        elif '—á–∞—Å—Ç–Ω' in cleaned_seller.lower():
                            seller_data['type'] = '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
        except:
            pass
        
        try:
            data_attrs = {}
            for attr, value in card_element.get_property('attributes').items():
                if attr.startswith('data-'):
                    data_attrs[attr] = value
            for attr, value in data_attrs.items():
                if 'seller' in attr.lower() or 'owner' in attr.lower():
                    seller_data[f'data_{attr}'] = value
        except:
            pass
        
        return seller_data
    
    def prepare_data_for_db(self, card_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î ads_avito"""
        try:
            db_data = {}
            
            # URL
            db_data['URL'] = card_data.get('url', '')
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            db_data['offer_id'] = card_data.get('item_id', '')
            
            # –¶–µ–Ω–∞
            price_text = card_data.get('price', '')
            if price_text and '‚ÇΩ' in price_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ü–µ–Ω—ã "19 500 000 ‚ÇΩ"
                price_match = re.search(r'([\d\s]+)', price_text)
                if price_match:
                    price_str = price_match.group(1).replace(' ', '')
                    try:
                        db_data['price'] = int(price_str)
                    except:
                        db_data['price'] = None
                else:
                    db_data['price'] = None
            else:
                db_data['price'] = None
            
            # –ö–æ–º–Ω–∞—Ç—ã
            rooms = card_data.get('rooms', '')
            if rooms == '—Å—Ç—É–¥–∏—è':
                db_data['rooms'] = 0
            elif isinstance(rooms, str) and rooms.isdigit():
                db_data['rooms'] = int(rooms)
            else:
                db_data['rooms'] = None
            
            # –ü–ª–æ—â–∞–¥—å
            area = card_data.get('area', '')
            if area and area != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['area_m2'] = float(area)
                except:
                    db_data['area_m2'] = None
            else:
                db_data['area_m2'] = None
            
            # –≠—Ç–∞–∂
            floor = card_data.get('floor', '')
            if floor and floor != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['floor'] = int(floor)
                except:
                    db_data['floor'] = None
            else:
                db_data['floor'] = None
            
            # –í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π
            total_floors = card_data.get('total_floors', '')
            if total_floors and total_floors != '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':
                try:
                    db_data['floor_total'] = int(total_floors)
                except:
                    db_data['floor_total'] = None
            else:
                db_data['floor_total'] = None
            
            # –ö–æ–º–ø–ª–µ–∫—Å (–±–µ—Ä–µ–º –∏–∑ complex_name –µ—Å–ª–∏ –µ—Å—Ç—å)
            db_data['complex'] = card_data.get('complex_name', '')
            
            # –ú–µ—Ç—Ä–æ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π
            metro_name = card_data.get('metro_name', '')
            if metro_name and ',' in metro_name:
                db_data['metro'] = metro_name.split(',')[0].strip()
            else:
                db_data['metro'] = metro_name
            
            # –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ
            time_to_metro = card_data.get('time_to_metro', '')
            if time_to_metro and time_to_metro != '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                try:
                    db_data['walk_minutes'] = int(time_to_metro)
                except:
                    db_data['walk_minutes'] = None
            else:
                db_data['walk_minutes'] = None
            
            # –ê–¥—Ä–µ—Å
            db_data['address'] = card_data.get('street_house', '')
            
            # –¢–µ–≥–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º labels –∫–∞–∫ –µ—Å—Ç—å
            db_data['labels'] = card_data.get('labels', [])
            
            # –¢–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞
            seller_type = card_data.get('type', '')
            if seller_type == '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫':
                db_data['seller'] = {'type': 'owner'}
            elif seller_type == '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ':
                db_data['seller'] = {'type': 'agency'}
            elif seller_type == '—á–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ':
                db_data['seller'] = {'type': 'user'}
            elif seller_type == '–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫':
                db_data['seller'] = {'type': 'developer'}
            else:
                db_data['seller'] = {'type': 'unknown'}
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
            if card_data.get('seller_name'):
                db_data['seller']['name'] = card_data['seller_name']
            
            # –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ (–≤—Ç–æ—Ä–∏—á–∫–∞ = 2)
            db_data['object_type_id'] = 2
            
            return db_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î: {e}")
            return None
    
    def parse_card(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É"""
        try:
            card_data = {}
            
            # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            try:
                # –ò—â–µ–º ID –≤ data-marker –∏–ª–∏ –≤ URL
                item_id = card_element.get_attribute('data-item-id')
                if not item_id:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                    for attr in ['data-item-id', 'data-avito-item-id', 'id']:
                        item_id = card_element.get_attribute(attr)
                        if item_id:
                            break
                
                if not item_id:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
                    card_text = card_element.text
                    id_match = re.search(r'(\d{9,})', card_text)
                    if id_match:
                        item_id = id_match.group(1)
                
                card_data['item_id'] = item_id if item_id else '–Ω–µ –Ω–∞–π–¥–µ–Ω'
            except:
                card_data['item_id'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω'
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                title_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-title"], h3, .item-title')
                title_text = title_elem.text.strip()
                card_data['title'] = title_text
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                title_data = self.parse_title(title_text)
                card_data.update(title_data)
            except:
                card_data['title'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                card_data['rooms'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                card_data['area'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                card_data['floor'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
                card_data['total_floors'] = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
            
            # –¶–µ–Ω–∞
            try:
                price_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"], .price, .item-price')
                price_text = price_elem.text.strip()
                card_data['price'] = price_text
            except:
                card_data['price'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            
            # –ê–¥—Ä–µ—Å
            try:
                address_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-address"], .address, .item-address')
                address_text = address_elem.text.strip()
                card_data['address'] = address_text
                
                # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                address_data = self.parse_address(address_text)
                card_data.update(address_data)
            except:
                card_data['address'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                card_data['street_house'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                card_data['metro_name'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω'
                card_data['time_to_metro'] = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            
            # –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                time_elem = card_element.find_element(By.CSS_SELECTOR, '[data-marker="item-date"], .date, .item-date')
                time_text = time_elem.text.strip()
                card_data['published_time'] = time_text
            except:
                card_data['published_time'] = '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
            seller_info = self.parse_seller_info(card_element)
            card_data.update(seller_info)
            
            # –ü–∞—Ä—Å–∏–º –±–µ–π–¥–∂–∏/–º–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            badges = self.parse_badges(card_element)
            card_data['labels'] = badges
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
            try:
                print(f"üîç –ò—â–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ {card_data.get('item_id', 'N/A')}...")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏
                link_selectors = [
                    'a[data-marker="item-title"]',
                    'a[href*="/kvartiry/"]',
                    'a[data-marker="item"]',
                    'h3 a',
                    '.item-title a',
                    'a[href*="avito.ru"]',
                    'a'
                ]
                
                link_elem = None
                for i, selector in enumerate(link_selectors):
                    try:
                        elements = card_element.find_elements(By.CSS_SELECTOR, selector)
                        print(f"  –°–µ–ª–µ–∫—Ç–æ—Ä {i+1} '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        
                        for elem in elements:
                            href = elem.get_attribute('href')
                            if href and '/kvartiry/' in href:
                                link_elem = elem
                                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {href[:80]}...")
                                break
                        
                        if link_elem:
                            break
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{selector}': {e}")
                        continue
                
                if link_elem and link_elem.get_attribute('href'):
                    card_data['url'] = link_elem.get_attribute('href')
                    card_data['url'] = self.clean_url_from_context(card_data['url'])
                    print(f"  ‚úÖ URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {card_data['url'][:80]}...")
                else:
                    # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Å—Å—ã–ª–∫—É –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                    print(f"  üîç Fallback: –∏—â–µ–º –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏...")
                    all_links = card_element.find_elements(By.TAG_NAME, 'a')
                    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(all_links)} —Å—Å—ã–ª–æ–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ")
                    
                    for j, link in enumerate(all_links):
                        try:
                            href = link.get_attribute('href')
                            if href:
                                print(f"    –°—Å—ã–ª–∫–∞ {j+1}: {href[:60]}...")
                                if '/kvartiry/' in href:
                                    card_data['url'] = href
                                    card_data['url'] = self.clean_url_from_context(card_data['url'])
                                    print(f"    ‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {card_data['url'][:80]}...")
                                    break
                        except Exception as e:
                            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è href: {e}")
                            continue
                    else:
                        card_data['url'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                        print(f"    ‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏: {e}")
                card_data['url'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
            
            return card_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            return None
    
    def parse_badges(self, card_element):
        """–ü–∞—Ä—Å–∏—Ç –±–µ–π–¥–∂–∏/–º–µ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"""
        try:
            badges = []
            
            # –ò—â–µ–º –±–µ–π–¥–∂–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            badge_selectors = [
                '[class*="badge"]',
                '[class*="label"]', 
                '[class*="tag"]',
                '[class*="mark"]',
                '[data-marker*="badge"]',
                '[data-marker*="label"]',
                '[data-marker*="tag"]'
            ]
            
            for selector in badge_selectors:
                try:
                    elements = card_element.find_elements(By.CSS_SELECTOR, selector)
                    for elem in elements:
                        text = elem.text.strip()
                        if text and len(text) > 1:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ –Ω–∞—à–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
                            found_in_dict = False
                            for badge in AVITO_BADGES:
                                if badge.lower() in text.lower():
                                    if badge not in badges:
                                        badges.append(badge)
                                    found_in_dict = True
                                    break
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            if not found_in_dict and text not in badges and len(text) < 50:
                                badges.append(text)
                except:
                    continue
            
            # –¢–∞–∫–∂–µ –∏—â–µ–º –≤ –æ–±—â–µ–º —Ç–µ–∫—Å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            try:
                card_text = card_element.text
                for badge in AVITO_BADGES:
                    if badge.lower() in card_text.lower() and badge not in badges:
                        badges.append(badge)
            except:
                pass
            
            return badges
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–µ–π–¥–∂–µ–π: {e}")
            return []
    
    def slow_scroll_through_cards(self, cards):
        """–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏"""
        try:
            print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥...")
            
            # –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–µ—Ä–≤—ã–º 2 –∫–∞—Ä—Ç–æ—á–∫–∞–º
            if len(cards) >= 2:
                print("üìú –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–µ—Ä–≤—ã–º 2 –∫–∞—Ä—Ç–æ—á–∫–∞–º...")
                self.driver.execute_script("arguments[0].scrollIntoView(true);", cards[1])
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 2 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                print("‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 2 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # –°–∫—Ä–æ–ª–ª–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º 10 –∫–∞—Ä—Ç–æ—á–∫–∞–º
            if len(cards) >= 12:
                print("üìú –°–∫—Ä–æ–ª–ª–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º 10 –∫–∞—Ä—Ç–æ—á–∫–∞–º...")
                self.driver.execute_script("arguments[0].scrollIntoView(true);", cards[11])
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–∏—Ö 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                print("‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–∏—Ö 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
            # –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–æ–Ω—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            print("üìú –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–æ–Ω—Ü—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            
            print("‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞: {e}")
    
    def parse_metro_page(self, page=1):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–µ—Ç—Ä–æ"""
        try:
            print(f"üéØ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} —Å –º–µ—Ç—Ä–æ ID = {self.metro_id} (avito_id = {self.metro_avito_id})")
            
            # –ù–ï –æ—á–∏—â–∞–µ–º cookies - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ context –∏–∑ URL –∫–∞—Ä—Ç–æ—á–µ–∫
            
            # –ü–æ–ª—É—á–∞–µ–º URL —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            metro_url = self.get_metro_url(page)
            if not metro_url:
                return []
                
            print(f"üåê URL: {metro_url}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(metro_url)
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.blocking_detector.is_blocked(self.driver):
                if not self.handle_blocking():
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                    return []
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                self.driver.get(metro_url)
                time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
            current_url = self.driver.current_url
            print(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            if not self.wait_for_cards_load():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {len(cards)}")
            
            # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            self.slow_scroll_through_cards(cards)
            
            # –ü–ï–†–ï–ü–û–õ–£–ß–ê–ï–ú –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º stale elements)
            print("üîÑ –ü–µ—Ä–µ–ø–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞...")
            cards = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item"]')
            print(f"üìä –ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª—É—á–µ–Ω–∏—è: {len(cards)}")
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–æ—á–µ–∫
            parsed_cards = []
            for i, card in enumerate(cards[:self.max_cards]):
                print(f"\nüîç –ü–∞—Ä—Å–∏–º –∫–∞—Ä—Ç–æ—á–∫—É {i+1}/{min(self.max_cards, len(cards))}...")
                
                card_data = self.parse_card(card)
                if card_data:
                    card_data['card_number'] = i + 1
                    card_data['page'] = page
                    parsed_cards.append(card_data)
                    print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} —Å–ø–∞—Ä—Å–µ–Ω–∞")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
            self.blocking_detector.reset_block_count()
            
            return parsed_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return []
    
    async def parse_multiple_pages(self, max_pages=3):
        """–ü–∞—Ä—Å–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü"""
        try:
            all_parsed_cards = []
            
            for page in range(1, max_pages + 1):
                print(f"\n{'='*60}")
                print(f"üìÑ –°–¢–†–ê–ù–ò–¶–ê {page}/{max_pages}")
                print(f"{'='*60}")
                
                # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page_cards = self.parse_metro_page(page)
                
                if not page_cards:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
                    if self.blocking_detector.block_count > 0:
                        print(f"üö® –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                        break
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
                        continue
                
                all_parsed_cards.extend(page_cards)
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} —Å–ø–∞—Ä—Å–µ–Ω–∞: {len(page_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                if page < max_pages:
                    print("‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏...")
                    time.sleep(3)
            
            return all_parsed_cards
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
            return all_parsed_cards
    
    async def save_to_db(self, parsed_cards):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ë–î"""
        try:
            saved_count = 0
            for i, card in enumerate(parsed_cards):
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
                    db_data = self.prepare_data_for_db(card)
                    if db_data:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        await save_avito_ad(db_data)
                        saved_count += 1
                        print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ {i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
                    else:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} –¥–ª—è –ë–î")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ {i+1} –≤ –ë–î: {e}")
            
            print(f"\nüìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count}/{len(parsed_cards)} –∫–∞—Ä—Ç–æ—á–µ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def save_results(self, parsed_cards):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            result_data = {
                'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'metro_id': self.metro_id,
                'metro_avito_id': self.metro_avito_id,
                'url': self.get_metro_url(),
                'total_cards_found': len(parsed_cards),
                'parsed_cards': parsed_cards
            }
            
            filename = f"headless_metro_{self.metro_id}_cards_{time.strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result_data, f, ensure_ascii=False, indent=2)
            
            print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   –ú–µ—Ç—Ä–æ ID: {self.metro_id}")
            print(f"   –ú–µ—Ç—Ä–æ avito_id: {self.metro_avito_id}")
            print(f"   –ö–∞—Ä—Ç–æ—á–µ–∫ —Å–ø–∞—Ä—Å–µ–Ω–æ: {len(parsed_cards)}")
            print(f"   –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def print_clean_results(self, parsed_cards):
        """–í—ã–≤–æ–¥–∏—Ç —á–∏—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫"""
        print(f"\nüìã –ß–ò–°–¢–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –ö–ê–†–¢–û–ß–ï–ö:")
        print("=" * 80)
        
        for i, card in enumerate(parsed_cards):
            print(f"\nüè† –ö–ê–†–¢–û–ß–ö–ê #{i+1}")
            print("-" * 40)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {card.get('item_id', '–ù/–î')}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {card.get('title', '–ù/–î')}")
            print(f"–¶–µ–Ω–∞: {card.get('price', '–ù/–î')}")
            print(f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {card.get('published_time', '–ù/–î')}")
            
            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            print(f"\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
            print(f"  ‚Ä¢ –ö–æ–º–Ω–∞—Ç—ã: {card.get('rooms', '–ù/–î')}")
            print(f"  ‚Ä¢ –ü–ª–æ—â–∞–¥—å: {card.get('area', '–ù/–î')} –º¬≤")
            print(f"  ‚Ä¢ –≠—Ç–∞–∂: {card.get('floor', '–ù/–î')}/{card.get('total_floors', '–ù/–î')}")
            
            # –ê–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ
            print(f"\n–ê–¥—Ä–µ—Å –∏ –º–µ—Ç—Ä–æ:")
            print(f"  ‚Ä¢ –£–ª–∏—Ü–∞/–¥–æ–º: {card.get('street_house', '–ù/–î')}")
            print(f"  ‚Ä¢ –ú–µ—Ç—Ä–æ: {card.get('metro_name', '–ù/–î')}")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ: {card.get('time_to_metro', '–ù/–î')} –º–∏–Ω")
            
            # –ü—Ä–æ–¥–∞–≤–µ—Ü
            print(f"\n–ü—Ä–æ–¥–∞–≤–µ—Ü:")
            print(f"  ‚Ä¢ –¢–∏–ø: {card.get('type', '–ù/–î')}")
            if card.get('seller_name'):
                print(f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {card.get('seller_name', '–ù/–î')}")
            if card.get('time_created'):
                print(f"  ‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {card.get('time_created', '–ù/–î')}")
            if card.get('from_badge'):
                print(f"  ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {card.get('from_badge', '–ù/–î')}")
            
            # –°—Å—ã–ª–∫–∞
            print(f"\n–°—Å—ã–ª–∫–∞: {card.get('url', '–ù/–î')}")
            
            if i < len(parsed_cards) - 1:
                print("\n" + "=" * 80)
    
    async def run_parser(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ headless –ø–∞—Ä—Å–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
            print("=" * 60)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î
            print("üóÑÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ads_avito...")
            await create_ads_avito_table()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ ads_avito –≥–æ—Ç–æ–≤–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ
            metro_info = await self.get_metro_info()
            if not metro_info:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç—Ä–æ")
                return False
            
            print(f"üìç –ú–µ—Ç—Ä–æ: {metro_info['name']} (ID: {self.metro_id}, avito_id: {self.metro_avito_id})")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not self.setup_selenium():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            try:
                # –ü–∞—Ä—Å–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                parsed_cards = await self.parse_multiple_pages(max_pages=2)  # –ü–∞—Ä—Å–∏–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                
                if not parsed_cards:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏")
                    return False
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.save_results(parsed_cards)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î ads_avito...")
                await self.save_to_db(parsed_cards)
                
                # –í—ã–≤–æ–¥–∏–º —á–∏—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                self.print_clean_results(parsed_cards)
                
                return True
                
            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                if self.driver:
                    self.driver.quit()
                    print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = HeadlessMetroParser(metro_id=118, max_cards=3)  # –ê–≤–∏–∞–º–æ—Ç–æ—Ä–Ω–∞—è
    success = await parser.run_parser()
    
    if success:
        print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    asyncio.run(main())
