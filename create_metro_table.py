#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã metro —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ê–≤–∏—Ç–æ
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def create_metro_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É metro —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É metro
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS metro (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            line_id SMALLINT NOT NULL,
            lat DOUBLE PRECISION NOT NULL,
            lon DOUBLE PRECISION NOT NULL,
            exits SMALLINT NOT NULL,
            cian_id SMALLINT,
            avito_id INTEGER,  -- ID –º–µ—Ç—Ä–æ –¥–ª—è –ê–≤–∏—Ç–æ
            is_msk BOOLEAN DEFAULT TRUE,  -- –§–ª–∞–≥ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –º–µ—Ç—Ä–æ
            UNIQUE(name, line_id)
        );
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_metro_name ON metro(name)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_metro_cian_id ON metro(cian_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_metro_line_id ON metro(line_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_metro_avito_id ON metro(avito_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_metro_is_msk ON metro(is_msk)")
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ metro —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        count = await conn.fetchval("SELECT COUNT(*) FROM metro")
        print(f"üìä –í —Ç–∞–±–ª–∏—Ü–µ metro: {count} –∑–∞–ø–∏—Å–µ–π")
        
        if count == 0:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è. –ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö –º–µ—Ç—Ä–æ.")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç metro_mapping.py –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏")
        
        await conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã metro: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(create_metro_table())
        if success:
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ metro –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É metro")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
