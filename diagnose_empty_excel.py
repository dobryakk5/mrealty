#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Å—Ç—ã–º Excel —Ñ–∞–π–ª–æ–º –¥–ª—è Avito
"""

import sys
import os
import asyncio
from datetime import datetime

# Add path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_avito_excel_issue():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º Excel –¥–ª—è Avito"""
    
    print("üß™ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–£–°–¢–û–ì–û EXCEL –î–õ–Ø AVITO")
    print("="*50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        from listings_processor import ListingsProcessor, export_listings_to_excel, AVITO_AVAILABLE
        
        print(f"üìã –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è Avito: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if AVITO_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        if not AVITO_AVAILABLE:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –ú–æ–¥—É–ª—å Avito –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            print("   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É Excel –ø—É—Å—Ç–æ–π")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–π URL Avito
        test_urls = [
            "https://www.avito.ru/moskva/kvartiry/4-k._kvartira_95_m_514_et._4805953955"
        ]
        
        print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å URL: {test_urls[0]}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = ListingsProcessor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ URL
        is_avito = processor.is_avito_url(test_urls[0])
        print(f"üîç URL —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ Avito: {'‚úÖ –î–∞' if is_avito else '‚ùå –ù–µ—Ç'}")
        
        if not is_avito:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: URL –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è –∫–∞–∫ Avito!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
        try:
            listing_data = await processor.parse_avito_listing(test_urls[0], skip_photos=True)
            if listing_data:
                print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω")
                print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(listing_data)} –ø–æ–ª–µ–π")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                key_fields = ['url', 'title', 'price', 'rooms', 'total_area', 'floor']
                for field in key_fields:
                    value = listing_data.get(field, '–ù–ï –ù–ê–ô–î–ï–ù–û')
                    print(f"   {field}: {value}")
                    
            else:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª None!")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel —ç–∫—Å–ø–æ—Ä—Ç
        print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º Excel —ç–∫—Å–ø–æ—Ä—Ç...")
        try:
            user_id = 999999
            bio, request_id = await export_listings_to_excel(test_urls, user_id)
            
            if bio:
                print("‚úÖ Excel —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ß–∏—Ç–∞–µ–º Excel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                import pandas as pd
                bio.seek(0)
                df = pd.read_excel(bio)
                print(f"üìä Excel —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df)} —Å—Ç—Ä–æ–∫")
                
                if len(df) == 0:
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: Excel —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π (0 —Å—Ç—Ä–æ–∫)!")
                    print("   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ Excel")
                    return False
                else:
                    print("‚úÖ Excel —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")
                    print("üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ Excel:")
                    for col in df.columns:
                        print(f"   - {col}")
                    
                    if len(df) > 0:
                        print("üìã –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö:")
                        for col in df.columns[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–æ–ª–æ–Ω–æ–∫
                            value = df.iloc[0][col] if len(df) > 0 else 'N/A'
                            print(f"   {col}: {value}")
                    
                    return True
            else:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: Excel —ç–∫—Å–ø–æ—Ä—Ç –≤–µ—Ä–Ω—É–ª None!")
                return False
                
        except Exception as e:
            print(f"‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê: –û—à–∏–±–∫–∞ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    except Exception as e:
        print(f"‚ùå –û–ë–©–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

async def check_avito_parser_directly():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Avito –ø–∞—Ä—Å–µ—Ä –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüîß –ü–†–Ø–ú–ê–Ø –ü–†–û–í–ï–†–ö–ê AVITO –ü–ê–†–°–ï–†–ê")
    print("="*40)
    
    try:
        from avito_parser_integration import AvitoCardParser
        
        test_url = "https://www.avito.ru/moskva/kvartiry/4-k._kvartira_95_m_514_et._4805953955"
        
        print(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {test_url}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = AvitoCardParser(skip_photos=True)
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("üìã –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        parsed_data = parser.parse_avito_page(test_url)
        
        if parsed_data:
            print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–µ–Ω")
            print(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(parsed_data)} –ø–æ–ª–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            key_fields = ['url', 'title', 'price', 'rooms', 'total_area', 'floor']
            for field in key_fields:
                value = parsed_data.get(field, '–ù–ï –ù–ê–ô–î–ï–ù–û')
                print(f"   {field}: {value}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î
            print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º prepare_data_for_db...")
            db_data = parser.prepare_data_for_db(parsed_data)
            
            if db_data:
                print("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ë–î —É—Å–ø–µ—à–Ω–∞")
                print(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î: {len(db_data)} –ø–æ–ª–µ–π")
                return True
            else:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: prepare_data_for_db –≤–µ—Ä–Ω—É–ª None!")
                return False
        else:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ—Ä–Ω—É–ª None!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´: –ê–í–ò–¢–û –í–´–í–û–î–ò–¢ –ü–£–°–¢–û–ô EXCEL")
    print("="*60)
    
    async def run_all_diagnostics():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 1: –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫")
        main_success = await test_avito_excel_issue()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
        print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê 2: –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞")
        parser_success = await check_avito_parser_directly()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*60)
        
        print(f"–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: {'‚úÖ OK' if main_success else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
        print(f"–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {'‚úÖ OK' if parser_success else '‚ùå –ü–†–û–ë–õ–ï–ú–ê'}")
        
        if main_success and parser_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –±—ã–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        else:
            print("\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
            
            if not main_success:
                print("   - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ Excel —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω")
            if not parser_success:
                print("   - Avito –ø–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cookies —Ñ–∞–π–ª–∞ avito_cookies.json")
            print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome WebDriver —Å–æ–≤–º–µ—Å—Ç–∏–º —Å –≤–µ—Ä—Å–∏–µ–π Chrome")
            print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Avito URL –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫")
        
        return main_success and parser_success
    
    success = asyncio.run(run_all_diagnostics())
    exit(0 if success else 1)