#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ
–±–µ–∑ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from parse_avito_1metro import EnhancedMetroParser

def test_address_metro_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
    
    parser = EnhancedMetroParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ –∏ –º–µ—Ç—Ä–æ
    test_cases = [
        {
            'name': '–û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å "–º–∏–Ω"',
            'address_text': '–ü–æ–≤–∞—Ä—Å–∫–∞—è —É–ª., 8/1–∫1\n–ê—Ä–±–∞—Ç—Å–∫–∞—è, –¥–æ 5 –º–∏–Ω.',
            'expected': {
                'street_house': '–ü–æ–≤–∞—Ä—Å–∫–∞—è —É–ª., 8/1–∫1',
                'metro_name': '–ê—Ä–±–∞—Ç—Å–∫–∞—è',
                'time_to_metro': '5'
            }
        },
        {
            'name': '–í—Ä–µ–º—è –±–µ–∑ "–º–∏–Ω" —Å—É—Ñ—Ñ–∏–∫—Å–∞',
            'address_text': '–¢–≤–µ—Ä—Å–∫–∞—è —É–ª., 12\n–ü—É—à–∫–∏–Ω—Å–∫–∞—è, 3',
            'expected': {
                'street_house': '–¢–≤–µ—Ä—Å–∫–∞—è —É–ª., 12',
                'metro_name': 'Pushkinskaya',  # –ë—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ –æ—Ç —Ü–∏—Ñ—Ä
                'time_to_metro': '3'
            }
        },
        {
            'name': '–í—Ä–µ–º—è —Å "–º–∏–Ω—É—Ç"',
            'address_text': '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 45\n–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è, 7 –º–∏–Ω—É—Ç',
            'expected': {
                'street_house': '–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 45',
                'metro_name': '–û–∫—Ç—è–±—Ä—å—Å–∫–∞—è',
                'time_to_metro': '7'
            }
        },
        {
            'name': '–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞',
            'address_text': '–°–∞–¥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ, 15',
            'expected': {
                'street_house': '–°–∞–¥–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ, 15',
                'metro_name': '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
                'time_to_metro': '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
            }
        },
        {
            'name': '–í—Ä–µ–º—è —Å "–º–∏–Ω." (—Å —Ç–æ—á–∫–æ–π)',
            'address_text': '–ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, 22\n–°–º–æ–ª–µ–Ω—Å–∫–∞—è, 4 –º–∏–Ω.',
            'expected': {
                'street_house': '–ù–æ–≤—ã–π –ê—Ä–±–∞—Ç, 22',
                'metro_name': '–°–º–æ–ª–µ–Ω—Å–∫–∞—è',
                'time_to_metro': '4'
            }
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ\n")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print(f"   –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {repr(test_case['address_text'])}")
        
        # –ü–∞—Ä—Å–∏–º –∞–¥—Ä–µ—Å
        result = parser.parse_address(test_case['address_text'])
        
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"     ‚Ä¢ –£–ª–∏—Ü–∞/–¥–æ–º: {result.get('street_house', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        print(f"     ‚Ä¢ –ú–µ—Ç—Ä–æ: {result.get('metro_name', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        print(f"     ‚Ä¢ –í—Ä–µ–º—è: {result.get('time_to_metro', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')} –º–∏–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        success = True
        if 'street_house' not in result or not result['street_house']:
            print(f"     ‚ùå –û—à–∏–±–∫–∞: —É–ª–∏—Ü–∞/–¥–æ–º –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã")
            success = False
        
        if test_case['address_text'].count('\n') > 0:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
            if 'metro_name' not in result or result['metro_name'] == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"     ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –º–µ—Ç—Ä–æ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            if 'time_to_metro' not in result or result['time_to_metro'] == '–Ω–µ —É–∫–∞–∑–∞–Ω–æ':
                print(f"     ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ")
        
        if success:
            print(f"     ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        print(f"   ---")

def test_metro_line_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å –º–µ—Ç—Ä–æ –±–µ–∑ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤"""
    
    parser = EnhancedMetroParser()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    test_lines = [
        {'line': '–ü–æ–≤–∞—Ä—Å–∫–∞—è —É–ª., 8/1–∫1', 'expected': True, 'reason': '–∞–¥—Ä–µ—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É–ª–∏—Ü–µ–π'},
        {'line': '–ê—Ä–±–∞—Ç—Å–∫–∞—è, –¥–æ 5 –º–∏–Ω.', 'expected': True, 'reason': '–Ω–∞–∑–≤–∞–Ω–∏–µ + –≤—Ä–µ–º—è'},
        {'line': '–ü—É—à–∫–∏–Ω—Å–∫–∞—è', 'expected': True, 'reason': '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏'},
        {'line': '2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞', 'expected': False, 'reason': '–æ–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã'},
        {'line': '85 –º¬≤', 'expected': False, 'reason': '–ø–ª–æ—â–∞–¥—å'},
        {'line': '12/20 —ç—Ç', 'expected': False, 'reason': '—ç—Ç–∞–∂'},
        {'line': '–ú–µ—Ç—Ä–æ 10 –º–∏–Ω –ø–µ—à–∫–æ–º', 'expected': True, 'reason': '—Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä–æ + –≤—Ä–µ–º—è'},
        {'line': '—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15', 'expected': True, 'reason': '—É–ª–∏—Ü–∞ —Å –¥–æ–º–æ–º'},
        {'line': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫', 'expected': False, 'reason': '—Ç–∏–ø –ø—Ä–æ–¥–∞–≤—Ü–∞'},
        {'line': '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', 'expected': False, 'reason': '—Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'},
        {'line': '–°–æ–∫–æ–ª–∏–Ω–∞—è –ì–æ—Ä–∞, 3', 'expected': True, 'reason': '–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ + –≤—Ä–µ–º—è'},
    ]
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –º–µ—Ç—Ä–æ/–∞–¥—Ä–µ—Å–æ–º\n")
    print("=" * 60)
    
    for i, test in enumerate(test_lines, 1):
        result = parser.is_metro_line(test['line'])
        status = "‚úÖ" if result == test['expected'] else "‚ùå"
        expected_str = "–¥–∞" if test['expected'] else "–Ω–µ—Ç"
        actual_str = "–¥–∞" if result else "–Ω–µ—Ç"
        
        print(f"{i:2d}. '{test['line']}'")
        print(f"    –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_str} ({test['reason']})")
        print(f"    –†–µ–∑—É–ª—å—Ç–∞—Ç: {actual_str} {status}")
        print()

if __name__ == "__main__":
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ –∏ –º–µ—Ç—Ä–æ (–±–µ–∑ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π)")
    print("üìç –õ–æ–≥–∏–∫–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, –∞ –Ω–µ –Ω–∞ —Å–ø–∏—Å–∫–∞—Ö —Å—Ç–∞–Ω—Ü–∏–π")
    print()
    
    test_address_metro_parsing()
    test_metro_line_detection()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print()
    print("üí° –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("   ‚Ä¢ –í—Ä–µ–º—è –ø–∞—Ä—Å–∏—Ç—Å—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: '–º–∏–Ω', '–º–∏–Ω—É—Ç', '–º–∏–Ω.', –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞")
    print("   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π –Ω–µ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞—é—Ç—Å—è, –∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ")
    print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: –≤—Ä–µ–º—è, —É–ª–∏—Ü—ã, –∞–¥—Ä–µ—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–µ—Ç—Ä–æ-—Å–ª–æ–≤–∞")
    print("   ‚Ä¢ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã")