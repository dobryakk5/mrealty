#!/usr/bin/env python3
"""
–ü–∞—Ä—Å–µ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã —Å –≥–∏–±–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python parse_avito_to_db.py [–æ–ø—Ü–∏–∏]

–°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–†–û–ì–†–ï–°–°–ê:
- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ system.parsing_progress
- –ü–æ–ª–µ source = 1 –¥–ª—è AVITO (4=CIAN, 2=DOMCLICK, 3=YANDEX)
- –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
- –ü—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Å–µ—Ö –º–µ—Ç—Ä–æ (--all) –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏

–°–ò–°–¢–ï–ú–ê –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø –ü–ê–ì–ò–ù–ê–¶–ò–ò –ê–í–ò–¢–û:
- –ö–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ system.avito_pagination_tracking
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Ç—Ä–æ
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–æ –∏–ª–∏ –≤—Å–µ—Ö

–õ–û–ì–ò–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ô –°–¢–†–ê–ù–ò–¶–´ (--start-page):
- –ü–∞—Ä–∞–º–µ—Ç—Ä –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –º–µ—Ç—Ä–æ –≤ —Å–ø–∏—Å–∫–µ
- –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç—Ä–æ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
- –ï—Å–ª–∏ start_page –Ω–µ —É–∫–∞–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

–û–ø—Ü–∏–∏:
  --metro-ids 1,2,3     –°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö metro.id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  --exclude 4,5,6       –ò—Å–∫–ª—é—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ metro.id
  --max-pages N          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (0 = –≤—Å–µ)
  --max-cards N          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (0 = –≤—Å–µ)
  --start-page N         –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç—Ä–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)
  --all                  –ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã
  --help                 –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  python parse_avito_to_db.py --all                    # –í—Å–µ –º–µ—Ç—Ä–æ, –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  python parse_avito_to_db.py --metro-ids 1,2,3       # –¢–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ 1,2,3
  python parse_avito_to_db.py --exclude 4,5 --max-pages 2  # –í—Å–µ –º–µ—Ç—Ä–æ –∫—Ä–æ–º–µ 4,5, –º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  python parse_avito_to_db.py --metro-ids 1,2 --max-cards 10  # –ú–µ—Ç—Ä–æ 1,2, –º–∞–∫—Å–∏–º—É–º 10 –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  python parse_avito_to_db.py --metro-ids 1 --start-page 5  # –ú–µ—Ç—Ä–æ 1, –Ω–∞—á–∞—Ç—å —Å 5-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  python parse_avito_to_db.py --metro-ids 1,2,3 --start-page 3  # –ú–µ—Ç—Ä–æ 1,2,3: 1-–µ —Å 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å 1-–π
  python parse_avito_to_db.py --all --start-page 3    # –í—Å–µ –º–µ—Ç—Ä–æ: –ø–µ—Ä–≤–æ–µ —Å 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å 1-–π
"""

import asyncio
import sys
import os
import argparse
import time
from dotenv import load_dotenv
from parse_avito_1metro import EnhancedMetroParser

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
from parse_todb import (
    create_parsing_session,
    update_parsing_progress,
    complete_parsing_session,
    get_last_parsing_progress
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ê–≤–∏—Ç–æ
from parse_todb_avito import (
    get_avito_pagination_status,
    update_avito_pagination,
    get_all_avito_pagination_status,
    reset_avito_pagination
)

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
# =============================================================================

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0 = –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
DEFAULT_MAX_PAGES = 0

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0 = –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏)
DEFAULT_MAX_CARDS = 0

# –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1 = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
DEFAULT_START_PAGE = 1

# –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–µ—Ç—Ä–æ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
METRO_DELAY = 10

# –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è AVITO –≤ —Å–∏—Å—Ç–µ–º–µ parsing_progress
AVITO_SOURCE = 1

# =============================================================================
# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö
# =============================================================================

class MetroBatchParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–æ"""
    
    def __init__(self, database_url):
        self.database_url = database_url
        self.parser = None
        self.stats = {
            'total_metro': 0,
            'successful_metro': 0,
            'failed_metro': 0,
            'total_cards': 0,
            'total_saved': 0
        }
    
    async def get_moscow_metro_list(self, exclude_ids=None):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã –∏–∑ –ë–î"""
        try:
            import asyncpg
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã (is_msk is not false)
            if exclude_ids and len(exclude_ids) > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                if len(exclude_ids) == 0:
                    query = """
                        SELECT id, name, avito_id 
                        FROM metro 
                        WHERE is_msk IS NOT FALSE 
                        ORDER BY id
                    """
                    print(f"üîç SQL –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫): {query}")
                    result = await conn.fetch(query)
                else:
                    exclude_placeholders = ','.join([f'${i+1}' for i in range(len(exclude_ids))])
                    query = f"""
                        SELECT id, name, avito_id 
                        FROM metro 
                        WHERE is_msk IS NOT FALSE 
                        AND id NOT IN ({exclude_placeholders})
                        ORDER BY id
                    """
                    print(f"üîç SQL –∑–∞–ø—Ä–æ—Å —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {query}")
                    print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {exclude_ids}")
                    result = await conn.fetch(query, *exclude_ids)
            else:
                query = """
                    SELECT id, name, avito_id 
                    FROM metro 
                    WHERE is_msk IS NOT FALSE 
                    ORDER BY id
                """
                print(f"üîç SQL –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {query}")
                result = await conn.fetch(query)
            
            await conn.close()
            
            metro_list = []
            for row in result:
                metro_list.append({
                    'id': row['id'],
                    'name': row['name'],
                    'avito_id': row['avito_id']
                })
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(metro_list)} –º–µ—Ç—Ä–æ –≤ –ë–î")
            return metro_list
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç—Ä–æ: {e}")
            print(f"üîç –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            if hasattr(e, '__cause__') and e.__cause__:
                print(f"üîç –ü—Ä–∏—á–∏–Ω–∞: {e.__cause__}")
            return []
    
    async def get_specific_metro_list(self, metro_ids):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ –ø–æ ID"""
        try:
            import asyncpg
            conn = await asyncpg.connect(self.database_url)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–æ
            placeholders = ','.join([f'${i+1}' for i in range(len(metro_ids))])
            query = f"""
                SELECT id, name, avito_id 
                FROM metro 
                WHERE id IN ({placeholders})
                ORDER BY id
            """
            result = await conn.fetch(query, *metro_ids)
            
            await conn.close()
            
            metro_list = []
            for row in result:
                metro_list.append({
                    'id': row['id'],
                    'name': row['name'],
                    'avito_id': row['avito_id']
                })
            
            return metro_list
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç—Ä–æ: {e}")
            return []
    
    async def parse_single_metro(self, metro_info, max_pages, max_cards, start_page=1):
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω–æ –º–µ—Ç—Ä–æ
        
        Args:
            metro_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ç—Ä–æ
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            max_cards: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
        """
        try:
            metro_id = metro_info['id']
            metro_name = metro_info['name']
            metro_avito_id = metro_info['avito_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –ë–î
            pagination_status = await get_avito_pagination_status(metro_id)
            if pagination_status:
                last_processed_page = pagination_status['last_processed_page']
                total_pages_processed = pagination_status['total_pages_processed']
                print(f"üìä –°—Ç–∞—Ç—É—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–µ—Ç—Ä–æ ID {metro_id}:")
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {last_processed_page}")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages_processed}")
                
                # –ï—Å–ª–∏ start_page –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if start_page == 1 and last_processed_page > 0:
                    start_page = last_processed_page + 1
                    print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page}")
            else:
                print(f"üÜï –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –º–µ—Ç—Ä–æ ID {metro_id}")
            
            print(f"\nüöÄ –ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç—Ä–æ: {metro_name} (ID: {metro_id}, avito_id: {metro_avito_id})")
            print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {max_pages if max_pages > 0 else '–≤—Å–µ'}")
            print(f"üìä –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {max_cards if max_cards and max_cards > 0 else '–≤—Å–µ'}")
            if start_page > 1:
                print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page}")
            print("=" * 60)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç—Ä–æ
            self.parser = EnhancedMetroParser()
            self.parser.database_url = self.database_url
            self.parser.max_pages = max_pages
            self.parser.max_cards = max_cards
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            success, saved_count, total_cards = await self.parser.parse_single_metro(
                metro_id=metro_id,
                max_pages=max_pages,
                max_cards=max_cards,
                start_page=start_page
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if success:
                self.stats['successful_metro'] += 1
                self.stats['total_cards'] += total_cards
                self.stats['total_saved'] += saved_count
                print(f"‚úÖ –ú–µ—Ç—Ä–æ {metro_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                print(f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫: {total_cards}")
                print(f"   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}")
            else:
                self.stats['failed_metro'] += 1
                print(f"‚ùå –ú–µ—Ç—Ä–æ {metro_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
            
            return success
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ—Ç—Ä–æ {metro_info.get('name', 'Unknown')}: {e}")
            self.stats['failed_metro'] += 1
            return False
    
    async def parse_metro_batch(self, metro_list, max_pages, max_cards, start_page=1, use_progress_tracking=False):
        """
        –ü–∞—Ä—Å–∏—Ç –ø–∞–∫–µ—Ç –º–µ—Ç—Ä–æ
        
        Args:
            metro_list: –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            max_cards: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            start_page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
            use_progress_tracking: –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è --all)
        """
        if not metro_list:
            print("‚ùå –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–æ –ø—É—Å—Ç")
            return False
        
        self.stats['total_metro'] = len(metro_list)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        session_id = None
        current_index = 0
        
        if use_progress_tracking:
            print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è AVITO
            progress = await get_last_parsing_progress(1, None, AVITO_SOURCE)  # property_type=1, source=1 –¥–ª—è AVITO
            
            if progress:
                print(f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è: ID={progress['id']}, —Å—Ç–∞—Ç—É—Å={progress['status']}")
                print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç—Ä–æ: {progress['processed_metros']}/{progress['total_metros']}")
                print(f"   ‚Ä¢ –¢–µ–∫—É—â–µ–µ –º–µ—Ç—Ä–æ ID: {progress['current_metro_id']}")
            else:
                print("üîç –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            if progress and progress['status'] == 'active':
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é {progress['id']}")
                print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç—Ä–æ: {progress['processed_metros']}")
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Ç—Ä–æ ID: {progress['current_metro_id']}")
                session_id = progress['id']
                
                # –õ–û–ì–ò–ö–ê –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –º–µ—Ç—Ä–æ
                expected_metro_id = progress['current_metro_id']
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç—Ä–æ ID 36
                current_metro_can_continue = False
                current_metro_index = None
                
                # –ò—â–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Ç—Ä–æ –≤ —Å–ø–∏—Å–∫–µ
                for idx, metro in enumerate(metro_list):
                    if metro['id'] == expected_metro_id:
                        current_metro_index = idx
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–≥–æ –º–µ—Ç—Ä–æ
                        if metro['avito_id'] and metro.get('is_msk') is not False:
                            current_metro_can_continue = True
                        break
                
                if current_metro_can_continue:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç—Ä–æ ID 36
                    current_index = current_metro_index
                    print(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç—Ä–æ: ID {expected_metro_id}")
                    print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ avito_id: ‚úÖ {expected_metro_id} –∏–º–µ–µ—Ç avito_id")
                    print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ is_msk: ‚úÖ {expected_metro_id} –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç—Ä–æ
                    try:
                        from parse_todb_avito import get_avito_pagination_status
                        pagination_status = await get_avito_pagination_status(expected_metro_id)
                        if pagination_status and pagination_status['last_processed_page'] > 0:
                            # –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π
                            start_page = pagination_status['last_processed_page'] + 1
                            print(f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination_status['last_processed_page']}")
                            print(f"   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page}")
                        else:
                            # –ù–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1-–π
                            start_page = 1
                            print(f"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            print(f"   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page}")
                    except Exception as e:
                        print(f"   ‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º: {e}")
                        start_page = 1
                        print(f"   ‚Ä¢ –ù–∞—á–∏–Ω–∞–µ–º —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {start_page} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
                else:
                    # –¢–µ–∫—É—â–µ–µ –º–µ—Ç—Ä–æ –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
                    print(f"‚ö†Ô∏è –¢–µ–∫—É—â–µ–µ –º–µ—Ç—Ä–æ ID {expected_metro_id} –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                    
                    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Ç—Ä–æ –ø–æ—Å–ª–µ expected_metro_id —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π avito_id –∏ is_msk
                    next_metro_id = None
                    skipped_metros = []
                    skipped_reasons = []
                    
                    for metro in metro_list:
                        if metro['id'] > expected_metro_id:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —É—Å–ª–æ–≤–∏—è: avito_id IS NOT NULL –∏ is_msk IS NOT FALSE
                            if metro['avito_id'] and metro.get('is_msk') is not False:
                                next_metro_id = metro['id']
                                break
                            else:
                                skipped_metros.append(metro['id'])
                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–ø—É—Å–∫–∞
                                if not metro['avito_id']:
                                    skipped_reasons.append(f"ID {metro['id']}: –Ω–µ—Ç avito_id")
                                if metro.get('is_msk') is False:
                                    skipped_reasons.append(f"ID {metro['id']}: –Ω–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ")
                    
                    if next_metro_id:
                        # –ù–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –º–µ—Ç—Ä–æ —Å avito_id –∏ is_msk, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–µ–≥–æ
                        for idx, metro in enumerate(metro_list):
                            if metro['id'] == next_metro_id:
                                current_index = idx
                                break
                        print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Ç—Ä–æ: ID {next_metro_id} (–ø–æ—Å–ª–µ {expected_metro_id})")
                        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ avito_id: ‚úÖ {next_metro_id} –∏–º–µ–µ—Ç avito_id")
                        print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ is_msk: ‚úÖ {next_metro_id} –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –º–µ—Ç—Ä–æ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–æ –∏ –ø—Ä–∏—á–∏–Ω—ã
                        if skipped_metros:
                            print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω—ã –º–µ—Ç—Ä–æ: {skipped_metros}")
                            print(f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞:")
                            for reason in skipped_reasons:
                                print(f"     - {reason}")
                    else:
                        # –°–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Ç—Ä–æ —Å avito_id –∏ is_msk –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
                        print(f"‚úÖ –í—Å–µ –º–µ—Ç—Ä–æ –ø–æ—Å–ª–µ ID {expected_metro_id} —Å avito_id –∏ is_msk —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–æ –∏ –ø—Ä–∏—á–∏–Ω—ã
                        if skipped_metros:
                            print(f"   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω—ã –º–µ—Ç—Ä–æ: {skipped_metros}")
                            print(f"   ‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞:")
                            for reason in skipped_reasons:
                                print(f"     - {reason}")
                        
                        await complete_parsing_session(session_id)
                        print(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤—Å–µ –º–µ—Ç—Ä–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                        self.print_final_stats()
                        return True
                
                if current_index < len(metro_list):
                    next_metro = metro_list[current_index]
                    print(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –º–µ—Ç—Ä–æ {current_index + 1}/{len(metro_list)}: {next_metro['name']} (ID: {next_metro['id']})")
                else:
                    print(f"‚ö†Ô∏è –í—Å–µ –º–µ—Ç—Ä–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –º–µ—Ç—Ä–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                    await complete_parsing_session(session_id)
                    print(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –≤—Å–µ –º–µ—Ç—Ä–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    self.print_final_stats()
                    return True
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                print("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ AVITO")
                session_id = await create_parsing_session(1, None, len(metro_list), AVITO_SOURCE)
                current_index = 0
        
        print(f"\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(metro_list)} –º–µ—Ç—Ä–æ")
        print(f"üìÑ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages if max_pages > 0 else '–≤—Å–µ'}")
        print(f"üìä –ú–∞–∫—Å–∏–º—É–º –∫–∞—Ä—Ç–æ—á–µ–∫: {max_cards if max_cards and max_cards > 0 else '–≤—Å–µ'}")
        if use_progress_tracking:
            print(f"üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {'–≤–∫–ª—é—á–µ–Ω–æ' if session_id else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
            if session_id and progress:
                print(f"üîç –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –°–ï–°–°–ò–ò:")
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –º–µ—Ç—Ä–æ ID: {progress['current_metro_id']}")
                print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–µ—Ç—Ä–æ: {progress['processed_metros']}")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–µ—Ç—Ä–æ –≤ —Å–µ—Å—Å–∏–∏: {progress['total_metros']}")
                print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–æ: {len(metro_list)}")
        
        print("=" * 60)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∏–Ω–¥–µ–∫—Å–∞ {current_index} (–º–µ—Ç—Ä–æ {current_index + 1}/{len(metro_list)})")
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç—Ä–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç—Ä–æ
        current_start_page = start_page if 'start_page' in locals() else 1
        
        for i in range(current_index, len(metro_list)):
            metro_info = metro_list[i]
            print(f"\nüìç –ú–µ—Ç—Ä–æ {i+1}/{len(metro_list)}: {metro_info['name']} (ID: {metro_info['id']})")
            
            # –õ–û–ì–ò–ö–ê –ù–ê–ß–ê–õ–¨–ù–û–ô –°–¢–†–ê–ù–ò–¶–´:
            # start_page –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –º–µ—Ç—Ä–æ –≤ —Å–ø–∏—Å–∫–µ (current_index)
            # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç—Ä–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç—Ä–æ –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if i == current_index and 'start_page' in locals():
                current_start_page = start_page
            else:
                current_start_page = 1
            
            # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–æ
            success = await self.parse_single_metro(metro_info, max_pages, max_cards, current_start_page)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç—Ä–æ
            if use_progress_tracking and session_id:
                await update_parsing_progress(session_id, metro_info['id'], i + 1)
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {i+1}/{len(metro_list)} –º–µ—Ç—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –º–µ—Ç—Ä–æ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(metro_list) - 1:
                print(f"‚è≥ –ñ–¥–µ–º {METRO_DELAY} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –º–µ—Ç—Ä–æ...")
                await asyncio.sleep(METRO_DELAY)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if use_progress_tracking and session_id:
            await complete_parsing_session(session_id)
            print(f"‚úÖ –°–µ—Å—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ {session_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.print_final_stats()
        
        return True
    
    def print_final_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"üéØ –í—Å–µ–≥–æ –º–µ—Ç—Ä–æ: {self.stats['total_metro']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['successful_metro']}")
        print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {self.stats['failed_metro']}")
        print(f"üìä –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {self.stats['total_cards']}")
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {self.stats['total_saved']}")
        
        if self.stats['total_metro'] > 0:
            success_rate = (self.stats['successful_metro'] / self.stats['total_metro']) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü–æ–ª—É—á–∞–µ–º DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("   DATABASE_URL=postgresql://username:password@host:port/database")
        return False
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä –≤—Å–µ—Ö –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã —Å –≥–∏–±–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–æ
    metro_group = parser.add_mutually_exclusive_group(required=True)
    metro_group.add_argument('--metro-ids', type=str, 
                           help='–°–ø–∏—Å–æ–∫ metro.id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2,3)')
    metro_group.add_argument('--exclude', type=str,
                           help='–ò—Å–∫–ª—é—á–∏—Ç—å metro.id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4,5,6)')
    metro_group.add_argument('--all', action='store_true',
                           help='–ü–∞—Ä—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
    parser.add_argument('--max-pages', type=int, default=DEFAULT_MAX_PAGES,
                       help=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (0 = –≤—Å–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MAX_PAGES})')
    parser.add_argument('--max-cards', type=int, default=DEFAULT_MAX_CARDS,
                       help=f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (0 = –≤—Å–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_MAX_CARDS})')
    parser.add_argument('--start-page', type=int, default=DEFAULT_START_PAGE,
                       help=f'–ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç—Ä–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_START_PAGE})')
    
    args = parser.parse_args()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if args.start_page < 1:
        print("‚ùå –û—à–∏–±–∫–∞: --start-page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    batch_parser = MetroBatchParser(database_url)
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        if args.metro_ids:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç—Ä–æ
            metro_ids = [int(x.strip()) for x in args.metro_ids.split(',')]
            print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ: {metro_ids}")
            metro_list = await batch_parser.get_specific_metro_list(metro_ids)
            
        elif args.exclude:
            # –í—Å–µ –º–µ—Ç—Ä–æ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
            exclude_ids = [int(x.strip()) for x in args.exclude.split(',')]
            print(f"üéØ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã, –∏—Å–∫–ª—é—á–∞—è: {exclude_ids}")
            print(f"üîç –¢–∏–ø exclude_ids: {type(exclude_ids)}, –¥–ª–∏–Ω–∞: {len(exclude_ids)}")
            print(f"üîç –ó–Ω–∞—á–µ–Ω–∏—è: {exclude_ids}")
            metro_list = await batch_parser.get_moscow_metro_list(exclude_ids)
            
        else:
            # –í—Å–µ –º–µ—Ç—Ä–æ
            print("üéØ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –º–µ—Ç—Ä–æ –ú–æ—Å–∫–≤—ã")
            metro_list = await batch_parser.get_moscow_metro_list()
        
        if not metro_list:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç—Ä–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(metro_list)} –º–µ—Ç—Ä–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        for metro in metro_list:
            print(f"   ‚Ä¢ {metro['name']} (ID: {metro['id']}, avito_id: {metro['avito_id']})")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        print(f"\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {args.max_pages if args.max_pages > 0 else '–≤—Å–µ'}")
        print(f"   ‚Ä¢ –ö–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {args.max_cards if args.max_cards > 0 else '–≤—Å–µ'}")
        if args.start_page > 1:
            print(f"   ‚Ä¢ –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {args.start_page} (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç—Ä–æ)")
            print(f"   ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–æ: –Ω–∞—á–Ω—É—Ç —Å 1-–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–æ (--all)
        use_progress_tracking = args.all
        
        success = await batch_parser.parse_metro_batch(
            metro_list, 
            args.max_pages, 
            args.max_cards,
            args.start_page,
            use_progress_tracking
        )
        
        return success
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
