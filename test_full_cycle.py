#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
from parse_cian_to_db import (
    parse_arguments,
    parse_params_string,
    convert_time_period,
    build_search_url
)

async def test_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 60)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 1d
    print("üìã –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—Å–∫–∞: python parse_cian_to_db.py 1d")
    
    # 1. –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    print("\n1Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
    sys_argv_backup = sys.argv
    sys.argv = ['parse_cian_to_db.py', '1d']
    
    try:
        args = parse_arguments()
        print(f"   args.params = {args.params}")
        print(f"   args.proxy = {args.proxy}")
        print(f"   args.no_proxy = {args.no_proxy}")
    finally:
        sys.argv = sys_argv_backup
    
    # 2. –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\n2Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    property_type, time_period = parse_params_string('1d')
    print(f"   property_type = {property_type} ({'–≤—Ç–æ—Ä–∏—á–∫–∞' if property_type == 1 else '–Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏'})")
    print(f"   time_period = {time_period}")
    
    # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
    print("\n3Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏:")
    time_period_seconds = convert_time_period(time_period)
    print(f"   '{time_period}' -> {time_period_seconds}")
    print(f"   –¢–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è: {type(time_period_seconds)}")
    
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–æ–∏—Å–∫–∞
    print("\n4Ô∏è‚É£ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –ø–æ–∏—Å–∫–∞:")
    url = build_search_url(property_type, time_period_seconds)
    print(f"   URL: {url}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ totime=-2
    print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ totime:")
    if "&totime=-2" in url:
        print("   ‚úÖ URL —Å–æ–¥–µ—Ä–∂–∏—Ç &totime=-2")
        print("   ‚úÖ –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä '–∑–∞ –¥–µ–Ω—å'")
    else:
        print("   ‚ùå URL –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç &totime=-2")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å
    print("\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å:")
    print(f"   –í —Ç–∞–±–ª–∏—Ü—É system.parsing_progress –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ:")
    print(f"   - property_type = {property_type}")
    print(f"   - time_period = {time_period_seconds}")
    print(f"   - status = 'active'")
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")

if __name__ == '__main__':
    import sys
    asyncio.run(test_full_cycle())
